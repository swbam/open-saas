app OpenSaaS {
  wasp: {
    version: "^0.15.0"
  },

  title: "MGMT.golf",

  head: [
    "<meta charset='utf-8' />",
    "<meta name='description' content='Golf group management made easy - Schedule tee times, manage groups, and track courses.' />",
    "<meta name='author' content='MGMT.golf' />",
    "<meta name='keywords' content='golf, tee times, group management, courses' />",
    
    "<meta property='og:site_name' content='MGMT.golf' />",
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='MGMT.golf' />",
    "<meta property='og:description' content='Golf group management made easy - Schedule tee times, manage groups, and track courses.' />",
    "<meta property='og:image' content='https://mgmt.golf/public-banner.webp' />",

    "<meta name='twitter:title' content='MGMT.golf' />",
    "<meta name='twitter:text:title' content='MGMT.golf' />",
    "<meta name='twitter:image' content='https://mgmt.golf/public-banner.webp' />",
    "<meta name='twitter:image:alt' content='MGMT.golf' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />"
  ],

  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "MGMT.golf",
          email: "noreply@mgmt.golf"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      }
    },
    onAfterSignup: import { onAfterSignup } from "@src/auth/hooks",
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard",
  },

  db: {
    seeds: [
      import { seedMockUsers } from "@src/server/scripts/dbSeeds"
    ]
  },

  client: {
    rootComponent: import App from "@src/App",
  },

  emailSender: {
    provider: Dummy,
    defaultFrom: {
      name: "MGMT.golf",
      email: "noreply@mgmt.golf"
    }
  }
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/landing-page/LandingPage"
}

route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import DashboardPage from "@src/client/DashboardPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/auth/email-and-pass/RequestPasswordResetPage"
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/auth/email-and-pass/PasswordResetPage"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/auth/email-and-pass/EmailVerificationPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/user/AccountPage"
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/user/operations",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/user/operations",
  entities: [User]
}

route GroupsRoute { path: "/groups", to: GroupsPage }
page GroupsPage {
  authRequired: true,
  component: import GroupsPage from "@src/groups/GroupsPage"
}

route GroupRoute { path: "/groups/:groupId", to: GroupPage }
page GroupPage {
  authRequired: true,
  component: import GroupPage from "@src/groups/GroupPage"
}

query getGroups {
  fn: import { getGroups } from "@src/groups/queries",
  entities: [Group, GroupMember, Course, TeeTime]
}

query getGroupById {
  fn: import { getGroupById } from "@src/groups/queries",
  entities: [Group, GroupMember, Course, TeeTime]
}

action createGroup {
  fn: import { createGroup } from "@src/groups/actions",
  entities: [Group, GroupMember]
}

action updateGroup {
  fn: import { updateGroup } from "@src/groups/actions",
  entities: [Group, GroupMember]
}

action deleteGroup {
  fn: import { deleteGroup } from "@src/groups/actions",
  entities: [Group]
}

action addGroupMember {
  fn: import { addGroupMember } from "@src/groups/actions",
  entities: [Group, GroupMember, User]
}

action updateGroupMember {
  fn: import { updateGroupMember } from "@src/groups/actions",
  entities: [GroupMember]
}

action removeGroupMember {
  fn: import { removeGroupMember } from "@src/groups/actions",
  entities: [GroupMember]
}

route CoursesRoute { path: "/courses", to: CoursesPage }
page CoursesPage {
  authRequired: true,
  component: import CoursesPage from "@src/courses/CoursesPage"
}

route CourseRoute { path: "/courses/:courseId", to: CoursePage }
page CoursePage {
  authRequired: true,
  component: import CoursePage from "@src/courses/CoursePage"
}

route TeeTimesRoute { path: "/tee-times", to: TeeTimesPage }
page TeeTimesPage {
  authRequired: true,
  component: import TeeTimesPage from "@src/tee-times/TeeTimesPage"
}

route TeeTimeRoute { path: "/tee-times/:teeTimeId", to: TeeTimePage }
page TeeTimePage {
  authRequired: true,
  component: import TeeTimePage from "@src/tee-times/TeeTimePage"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/payment/PricingPage"
}

query getCustomerPortalUrl {
  fn: import { getCustomerPortalUrl } from "@src/payment/operations",
  entities: [User]
}

action generateCheckoutSession {
  fn: import { generateCheckoutSession } from "@src/payment/operations",
  entities: [User]
}

api paymentsWebhook {
  fn: import { stripeWebhook } from "@src/payment/stripe/webhook",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareConfigFn } from "@src/payment/stripe/webhook",
  httpRoute: (POST, "/payments-webhook")
}

// Add new queries for dashboard
query getUpcomingTeeTimes {
  fn: import { getUpcomingTeeTimes } from "@src/tee-times/queries",
  entities: [TeeTime, Course, Group]
}

query getRecentActivity {
  fn: import { getRecentActivity } from "@src/analytics/queries",
  entities: [Activity]
}

route AdminRoute { path: "/admin", to: AdminDashboardPage }
page AdminDashboardPage {
  authRequired: true,
  component: import AdminDashboardPage from "@src/admin/AdminDashboardPage"
}

route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
}