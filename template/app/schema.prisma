datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  username          String        @unique
  password          String
  isEmailVerified   Boolean       @default(false)
  emailVerificationSentAt DateTime?
  passwordResetSentAt   DateTime?
  isAdmin           Boolean       @default(false)
  subscriptionPlan  String        @default("free")
  subscriptionStatus String       @default("active")
  stripeCustomerId  String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  groupMemberships  GroupMember[]
  activities        Activity[]
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  courses     Course[]
  teeTimes    TeeTime[]
  courseHistory CourseHistory[]
}

model GroupMember {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, groupId])
}

model Course {
  id          String        @id @default(cuid())
  name        String
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  teeTimes    TeeTime[]
  history     CourseHistory[]
}

model CourseHistory {
  id          String    @id @default(cuid())
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  playedAt    DateTime  @default(now())
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  players     Json
  scorecards  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([courseId])
  @@index([groupId])
}

model TeeTime {
  id                  String   @id @default(cuid())
  dateTime            DateTime
  playerLimit         Int      @default(4)
  notes               String?
  confirmedPlayers    Json     @default("[]")
  waitlistPlayers     Json     @default("[]")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  group               Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId             String
  course              Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId            String

  @@index([dateTime])
  @@index([groupId])
  @@index([courseId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String?
  teeTime     TeeTime? @relation(fields: [teeTimeId], references: [id], onDelete: Cascade)
  teeTimeId   String?

  @@index([userId])
  @@index([createdAt])
}
