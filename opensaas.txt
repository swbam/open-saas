

=== PAGE: https://docs.opensaas.sh/ ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#_top ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/blog/ ===

 Blog | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           Blog          My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker      TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers      Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?     Dec 4, 2024     Matija CEO @ Wasp       SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!   Tags:webdevsaassideproject      We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon        Older posts                       



=== PAGE: https://docs.opensaas.sh/blog/rss.xml ===

OpenSaaS.sh | BlogOpen SaaS is a free, open-source, full-stack SaaS starter kit for React + NodeJS.https://docs.opensaas.sh/enMy GPT Wrapper Makes $550 MRR One Year After Launchhttps://docs.opensaas.sh/blog/2024-12-16-my-gpt-wrapper/https://docs.opensaas.sh/blog/2024-12-16-my-gpt-wrapper/Mon, 16 Dec 2024 00:00:00 GMT<p>Hey builders,</p>
<p>I wanted to share my journey building a micro-SaaS, <a href="https://coverlettergpt.xyz/">CoverLetterGPT</a>, which now earns <strong>$550/month in recurring revenue (MRR)</strong>—all while requiring <strong>minimal effort and maintenance</strong>. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.</p>
<div> <blockquote> <a href="https://twitter.com/x/status/1863553258586820976"></a> </blockquote> </div> 
<h3 id="quick-stats">Quick Stats:</h3>
<ul>
<li><strong>Built in 1 week</strong>
<ul>
<li>using <a href="https://wasp-lang.dev/">Wasp</a>, a React, NodeJS, &#x26; Prisma framework</li>
<li>and <a href="https://chakra-ui.com/">Chakra UI</a> for the design system.</li>
</ul>
</li>
<li><strong>Runs on autopilot</strong></li>
<li><strong>~$550 MRR</strong> after one year</li>
<li>Minimal customer support—only <strong>3 Stripe disputes</strong> to date</li>
<li>Costs <strong>~$15/month</strong> to operate (hosting + OpenAI API fees)</li>
<li>Deployed on <a href="https://railway.app/">Railway</a> &#x26; <a href="https://netlify.com/">Netlify</a></li>
</ul>
<hr>
<p>BTW, I built <a href="https://opensaas.sh">Open SaaS</a>, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.</p>
<p>Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.</p>
<div> <span>
⭐️ Star the  </span> <a href="https://github.com/wasp-lang/open-saas">
Open SaaS repo
</a> <span> and support open-source tools for builders, by builders! </span> </div>
<h3 id="small-wins-are-worth-it">Small Wins Are Worth It</h3>
<p>Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:</p>
<ul>
<li>$550/month is fantastic as side income.</li>
<li>It runs itself, requiring virtually no maintenance.</li>
<li>I can balance it easily alongside my full-time job.</li>
<li>It’s fun and doesn’t consume my free time.</li>
</ul>
<img src="https://docs.opensaas.sh/_astro/mrr-graph.BiCN9PUn_27F3QE.webp" alt="CoverLetterGPT MRR Graph" width="1264" height="774" loading="lazy" decoding="async">
<p>Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.</p>
<h3 id="build--launch-fast">Build &#x26; Launch Fast</h3>
<img src="https://docs.opensaas.sh/_astro/coverlettergpt-reddit.DuPl1oI0_1GuFv5.webp" alt="CoverLetterGPT Reddit Post" width="1636" height="1312" loading="lazy" decoding="async">
<p>The most important lesson I’ve learned: <strong>speed is everything.</strong> The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:</p>
<ol>
<li><strong>Avoid long, drawn-out failures:</strong> Build small, execute early.</li>
<li><strong>Use the fastest tools available:</strong> I used <a href="https://wasp-lang.dev/">Wasp</a> because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with <a href="https://chakra-ui.com/">Chakra UI</a>, I was able to build the app in about 1 week.</li>
<li><strong>Forget perfection:</strong> I didn’t worry about making it pretty or perfect—it just had to work.</li>
</ol>
<h3 id="keep-it-simple">Keep It Simple</h3>
<p>The beauty of micro-SaaS is in its simplicity. Here’s why:</p>
<ul>
<li>My app does <strong>one thing well</strong>: generating cover letters based on résumés and job descriptions.</li>
<li>There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.</li>
<li>Users get <strong>3 trial credits</strong>—enough to try the app and see value before paying.</li>
</ul>
<img src="https://docs.opensaas.sh/_astro/coverlettergpt.BwxoALrr_13BheA.webp" alt="CoverLetterGPT landing page" width="2264" height="1642" loading="lazy" decoding="async">
<p>One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.</p>
<p>This means I spend my time on <strong>new ideas</strong> rather than maintaining old ones.</p>
<h3 id="its-all-about-tradeoffs">It’s All About Tradeoffs</h3>
<p>While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:</p>
<ul>
<li><strong>Small wins</strong> are still wins.</li>
<li>I value having a side project that’s easy to manage alongside my full-time job.</li>
<li>I’d rather have <strong>less stress</strong> than chase higher profits.</li>
</ul>
<h3 id="links--resources">Links &#x26; Resources</h3>
<p>If you’re thinking about launching your own SaaS, here are some helpful resources:</p>
<ul>
<li>👨‍💻 <a href="https://coverlettergpt.xyz/">CoverLetterGPT (Live App)</a></li>
<li>💸 <a href="https://github.com/wasp-lang/open-saas">Open-Source SaaS Template</a></li>
<li>🛠️ <a href="https://wasp-lang.dev/">Framework: Wasp</a></li>
<li>✨ <a href="https://chakra-ui.com/">UI Components: Chakra UI</a></li>
<li>🛠️ <a href="https://railway.app/">Hosting: Railway</a> &#x26; <a href="https://netlify.com/">Netlify</a></li>
<li>✍️ <a href="https://www.reddit.com/r/SideProject/comments/1h4t8vk/my_saas_only_makes_550_a_month_and_i_think_thats/">My Original Reddit Post</a></li>
</ul>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>If you’re considering building a SaaS, <strong>don’t overthink it.</strong> Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:</p>
<ul>
<li>Keep it simple: Build an app that solves one problem well.</li>
<li>Launch fast: Test your idea and iterate based on real feedback.</li>
<li>Minimize effort: Aim for maximum reward with minimal maintenance.</li>
</ul>
<p>For me, <strong>$550 MRR</strong> isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.</p>
<h2 id="lets-stay-in-touch">Let’s stay in touch!</h2>
<p>If you found this helpful, check me out on <a href="https://x.com/hot_town/status/1863553258586820976">Twitter</a> where I like to build in public and share what I’m learning and building.</p>
<hr>
<div> <span>
⭐️ Star the  </span> <a href="https://github.com/wasp-lang/open-saas">
Open SaaS repo
</a> <span> and support tools that help you build fast! </span> </div>gptsaassideprojectindiehackerTurboReel: An Open Source AI Video Generator Built With Open SaaShttps://docs.opensaas.sh/blog/2024-12-10-turboreel-os-ai-video-generator-built-with-open-saas/https://docs.opensaas.sh/blog/2024-12-10-turboreel-os-ai-video-generator-built-with-open-saas/Tue, 10 Dec 2024 00:00:00 GMT<p>Peter is the creator of <a href="https://turboreelgpt.tech/"><strong>TurboReel</strong></a>, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.</p>
<p>But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where <a href="https://opensaas.sh/"><strong>Wasp’s Open SaaS boilerplate</strong></a> came in.</p>
<p>In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!</p>
<img src="https://docs.opensaas.sh/_astro/reddit-100-users.BS9URsE2_Z1YQVEd.webp" alt="Reddit screenshot, 100 users" loading="lazy" width="1284" height="628" decoding="async">
<h2 id="the-starting-point-open-saas-boilerplate">The Starting Point: Open SaaS Boilerplate</h2>
<p>Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.</p>
<p><em>“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and <a href="https://docs.opensaas.sh/blog/2024-12-04-open-source-saas-boilerplate-vs-paid/">others were paid but didn’t feel worth it</a>. Then I found Wasp’s Open SaaS boilerplate.”</em></p>
<p>What stood out to Peter wasn’t just that it was free, but that it was <strong>open source</strong>. <em>“I liked the idea of building on something maintained by a community, not locked behind a paywall”</em>, he says. Intrigued, Peter explored <a href="https://wasp-lang.dev/">Wasp</a> further and discovered an engaging community that offered exactly what he needed to start building TurboReel.</p>
<p>Here’s a video presenting Open SaaS, generated with TurboReel 🐝</p>
<video src="/_astro/opensaas.DKuKGNKo.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 45%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 45%;--smWidth: 100%;"></video>
<h2 id="turboreels-tech-stack">TurboReel’s Tech Stack</h2>
<p>TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.</p>
<video src="/_astro/studio-interface.CHdcQBBQ.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 100%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 100%;--smWidth: 100%;"></video>
<p>The platform’s <strong>open-source foundation</strong> unlocks development potential, while the <strong>paid SaaS layer</strong> helps with funding.</p>
<p>The tech behind TurboReel looks like this:</p>
<ul>
<li><strong>Open SaaS - a free, open-source React &#x26; Node.js SaaS starter</strong>
<ul>
<li>powered by Wasp, a full stack web framework for JS.</li>
<li>Combines <strong>React</strong> for the frontend and <strong>Node.js</strong> for backend.</li>
<li><a href="https://www.prisma.io/">Prisma</a> handles the database.</li>
</ul>
</li>
<li><strong>OpenAI</strong>
<ul>
<li>Used for generating scripts and scenes in the videos.</li>
</ul>
</li>
<li><a href="https://pollinations.ai/"><strong>Pollinations</strong></a>
<ul>
<li>Open-source platform for image and text generation.</li>
<li>Provides creative assets to enhance video quality.</li>
</ul>
</li>
<li><a href="https://re.video/"><strong>Revideo</strong></a>
<ul>
<li>Library for programmatic video creation.</li>
<li>Replaces the previously used <strong>MoviePy</strong>.</li>
</ul>
</li>
</ul>
<h3 id="building-faster-with-open-saas-boilerplate">Building faster with Open SaaS boilerplate</h3>
<blockquote>
<p>“The first thing that impressed me with Open SaaS was how much time it saved, I could start with <code dir="auto">wasp new saas</code> and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”</p>
</blockquote>
<p>The boilerplate included everything he needed:</p>
<ul>
<li><strong>Authentication via email, GitHub and Google</strong></li>
<li><strong>Running background jobs via pg-boss</strong></li>
<li><strong>Database management</strong></li>
<li><strong>Frontend-backend communication via a type-safe RPC layer</strong></li>
<li><strong>Deployment of the app with a single CLI command</strong></li>
</ul>
<p>One feature that particularly stood out was <strong>Wasp’s deployment commands</strong>.</p>
<blockquote>
<p>“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running <code dir="auto">wasp deploy fly deploy</code>.”</p>
</blockquote>
<p>Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.</p>
<div><figure><figcaption><span></span><span>Terminal window</span></figcaption><pre data-language="bash"><code><div><div><span style="--0:#82AAFF;--1:#3C63B3">app</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">myApp</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>  </span><span style="--0:#82AAFF;--1:#3C63B3">wasp:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>    </span><span style="--0:#82AAFF;--1:#3C63B3">version:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#9B504E">^0.15.0</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span>  </span><span style="--0:#82AAFF;--1:#3C63B3">title:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#9B504E">My App</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#3C63B3">,</span></div></div><div><div><span>  </span><span style="--0:#82AAFF;--1:#3C63B3">auth:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>    </span><span style="--0:#82AAFF;--1:#3C63B3">//</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">1.</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Specify</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">the</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">User</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">entity</span></div></div><div><div><span>    </span><span style="--0:#82AAFF;--1:#3C63B3">userEntity:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">User,</span></div></div><div><div><span>    </span><span style="--0:#82AAFF;--1:#3C63B3">methods:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>      </span><span style="--0:#82AAFF;--1:#3C63B3">//</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">2.</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Enable</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Github</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Auth</span></div></div><div><div><span>      </span><span style="--0:#82AAFF;--1:#3C63B3">gitHub:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{},</span></div></div><div><div><span>      </span><span style="--0:#82AAFF;--1:#3C63B3">email:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>        </span><span style="--0:#82AAFF;--1:#3C63B3">//</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">3.</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Specify</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">the</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">email</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">from</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">field</span></div></div><div><div><span>        </span><span style="--0:#82AAFF;--1:#3C63B3">fromField:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>          </span><span style="--0:#82AAFF;--1:#3C63B3">name:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#9B504E">My App Postman</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#3C63B3">,</span></div></div><div><div><span>          </span><span style="--0:#82AAFF;--1:#3C63B3">email:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#9B504E">hello@itsme.com</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span>        </span><span style="--0:#82AAFF;--1:#3C63B3">//</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">4.</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">Specify</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">the</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">email</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">verification</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">and</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">password</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">reset</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">options</span></div></div><div><div><span>        </span><span style="--0:#82AAFF;--1:#3C63B3">emailVerification:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>          </span><span style="--0:#82AAFF;--1:#3C63B3">clientRoute:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">EmailVerificationRoute</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span>        </span><span style="--0:#82AAFF;--1:#3C63B3">passwordReset:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">{</span></div></div><div><div><span>          </span><span style="--0:#82AAFF;--1:#3C63B3">clientRoute:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3C63B3">PasswordResetRoute</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span>    </span><span style="--0:#82AAFF;--1:#3C63B3">onAuthFailedRedirectTo:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#9B504E">/login</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div><div><span><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div><div><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div></div></figure></div>
<div style="background-color: #FFD700; padding: 1rem; text-align: center; font-size: 1.2rem; font-weight: bold; border-radius: 8px; color: black;"><p>⭐️ Star <a href="https://github.com/wasp-lang/open-saas" style="color: #0000FF; text-decoration: underline;">Open SaaS repo</a> and support tools that help you build fast!</p></div>
<h3 id="out-of-the-box-stripe-integration">Out-of-the-box Stripe integration</h3>
<p>Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like <a href="https://docs.opensaas.sh/guides/payments-integration/"><strong>Stripe for payments</strong></a> often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.</p>
<blockquote>
<p><em>“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.</em>”</p>
</blockquote>
<h3 id="the-power-of-open-source">The power of open source</h3>
<p>Both TurboReel and Wasp share a commitment to open source.</p>
<blockquote>
<p><em>“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. <a href="https://github.com/TurboReel">By making TurboReel open source</a>, I’m inviting smart people to collaborate and help push the project forward.”</em></p>
</blockquote>
<h2 id="getting-first-users">Getting first users</h2>
<img src="https://docs.opensaas.sh/_astro/reddit-200-upvotes.caScyp9Z_Z10nG5p.webp" alt="Reddit screenshot, 200 upvotes" loading="lazy" width="1550" height="838" decoding="async">
<p>Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.</p>
<p>Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!</p>
<h3 id="ready-to-build-your-saas">Ready to Build Your SaaS?</h3>
<p>Get started with <a href="https://wasp-lang.dev/">Wasp</a> today, or explore the <a href="https://opensaas.sh/">Open SaaS boilerplate</a> to see how it can work for you.</p>webdevsaassideprojectindiehackersShould You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?https://docs.opensaas.sh/blog/2024-12-04-open-source-saas-boilerplate-vs-paid/https://docs.opensaas.sh/blog/2024-12-04-open-source-saas-boilerplate-vs-paid/Wed, 04 Dec 2024 00:00:00 GMT<p>SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.</p>
<img src="https://docs.opensaas.sh/_astro/marc1.DF2DSBXJ_ZCNeCL.webp" alt="Twitter screenshot" loading="lazy" width="1186" height="416" decoding="async">
<p>On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.</p>
<p>So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?</p>
<p>As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).</p>
<p>The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!</p>
<h2 id="why-a-sudden-craze-with-all-these-starters-saas-es-are-not-a-new-thing-at-all">Why a sudden craze with all these starters? SaaS-es are not a new thing at all</h2>
<p>We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.</p>
<p><strong>The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold.</strong> Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.</p>
<p>If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.</p>
<p>If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:</p>
<ul>
<li><strong>What to use for the frontend?</strong> Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?</li>
<li><strong>Should I use a React framework</strong> e.g. Next or Remix? Or just go with React + Vite?</li>
<li><strong>Do I need SSR and SSG</strong>? Or should I just stick with CSR?</li>
<li><strong>What should I use as an API layer?</strong> Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?</li>
<li><strong>What to choose for the backend?</strong> Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?</li>
<li><strong>What about the database and ORM?</strong> Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?</li>
<li><strong>What are my hosting options?</strong> Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?</li>
</ul>
<p>These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.</p>
<p>This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.</p>
<p>Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.</p>
<h2 id="with-an-open-source-saas-starter-you-know-exactly-what-youre-getting-into">With an open-source SaaS starter, you know exactly what you’re getting into</h2>
<p>By the definition of open-source, <strong>you can see and examine the full code</strong> <strong>of the starter in advance</strong>, before committing to using it for your project.</p>
<p>Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.</p>
<p>You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.</p>
<img src="https://docs.opensaas.sh/_astro/opensaas.B08zFBJS_AL3XK.webp" alt="Open SaaS screenshot" loading="lazy" width="964" height="1028" decoding="async">
<p>Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.</p>
<h2 id="with-a-paid-starter-you-become-a-member-of-an-exclusive-tribe-aka-air-jordans-effect">With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)</h2>
<p>The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.</p>
<img src="https://docs.opensaas.sh/_astro/marc2.DUll89w__Z9PKSA.webp" alt="Marc promo banner" loading="lazy" width="1212" height="494" decoding="async">
<p>It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!</p>
<p>In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.</p>
<h2 id="security-in-open-source-everyone-is-a-reviewer">Security: in open-source, everyone is a reviewer</h2>
<p>Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.</p>
<img src="https://docs.opensaas.sh/_astro/dave-shipfast-tweet.DknvY3hK_1d0zBo.webp" alt="Dave Shipfast tweet" loading="lazy" width="1200" height="532" decoding="async">
<p>Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.</p>
<p>It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.</p>
<h2 id="with-a-paid-saas-starter-the-bus-factor-is-1-with-open-source-you-get-the-full-community-support">With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!</h2>
<p>A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and <strong>if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story.</strong> No support, updates, nor anybody to turn to with questions.</p>
<p><strong>On the other hand, <a href="https://opensaas.sh/">an open-source boilerplate starter</a> like Open SaaS is a living organism, with a number of contributors behind it.</strong> As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.</p>
<img src="https://docs.opensaas.sh/_astro/os-gh-stats.D-RX_bG5_iHwH5.webp" alt="Open source stats from opensaas" loading="lazy" width="672" height="583" decoding="async">
<p>Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.</p>
<h2 id="open-source-saas-starter--unlimited-updates-closed-source-sometimes">Open-source SaaS starter === unlimited updates. Closed source? Sometimes.</h2>
<p>An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.</p>
<img src="https://docs.opensaas.sh/_astro/os-commits.DMjrOevY_Z1nHmAD.webp" alt="Commits to open saas" loading="lazy" width="976" height="504" decoding="async">
<p>With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.</p>
<img src="https://docs.opensaas.sh/_astro/free-updates-vs-not.Cw_97lUk_Zhlikj.webp" alt="Free updates vs pay for everything" loading="lazy" width="742" height="259" decoding="async">
<h2 id="with-a-paid-saas-starter-you-might-need-to-buy-a-license-for-every-new-app">With a paid SaaS starter, you might need to buy a “license” for every new app</h2>
<p>Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.</p>
<img src="https://docs.opensaas.sh/_astro/boilerplate-licenses.D48ZP_VG_Z1MGOih.webp" alt="Boilerplate licenses" loading="lazy" width="610" height="265" decoding="async">
<p>Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.</p>
<p>With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.</p>
<h2 id="with-an-open-source-saas-starter-you-can-add-new-features-yourself">With an open-source SaaS starter, you can add new features yourself!</h2>
<p>One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!</p>
<img src="https://docs.opensaas.sh/_astro/community-contributions.DlUiCAQ6_Z1ims7E.webp" alt="Community contributions" loading="lazy" width="1136" height="304" decoding="async">
<h2 id="summary">Summary</h2>
<p>Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:</p>



































<table><thead><tr><th></th><th>Cost</th><th>Lifetime updates</th><th>Unlimited apps</th><th>Maintainers</th><th>Community</th><th>Air Jordans Effect</th><th>Easily contribute</th></tr></thead><tbody><tr><td>Open-source SaaS starter</td><td>$0</td><td>YES</td><td>YES</td><td>Many</td><td>Big, public</td><td>Rarely</td><td>YES</td></tr><tr><td>Paid starter</td><td>$300+</td><td>Depends</td><td>Depends</td><td>Typically one</td><td>Sometimes, private</td><td>Often</td><td>No</td></tr></tbody></table>
<p>This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.</p>
<p>Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.</p>
<p>In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!</p>webdevsaassideprojectWe Made the Most Annoying Cookie Banners Everhttps://docs.opensaas.sh/blog/2024-11-22-best-annoying-cookie-consent-banners/https://docs.opensaas.sh/blog/2024-11-22-best-annoying-cookie-consent-banners/Tue, 26 Nov 2024 00:00:00 GMT<h2 id="the-most-annoying-cookie-consent-banner-ever-hackathon">The Most Annoying Cookie Consent Banner Ever Hackathon</h2>
<p>We at <a href="https://wasp-lang.dev">Wasp</a> just finished off a fun little <a href="https://docs.opensaas.sh/blog/2024-10-10-most-annoying-cookie-banner-contest/">hackathon</a> where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on <a href="https://x.com/wasplang">X/Twitter</a>.</p>
<p>It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)</p>
<h2 id="the-gdpr-quiz">The GDPR Quiz</h2>
<p>The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.</p>
<p>GDPR is <em>the reason</em> we have cookie consent banners today.</p>
<p>This submission by <a href="https://www.tiktok.com/@cameronblackwoodcode/">Cam Blackwood</a> gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.</p>
<p>Thanks for the reality check, Cam.</p>
<video src="/_astro/295-camblackwood.DcG27wZn.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="windows-of-time">Windows of Time</h2>
<p>Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by <a href="https://github.com/Lezzz">Lazi</a> confirms that, by sending you through an operating system time machine to a past we’d all like to forget.</p>
<p>Disturbing, yet oddly comforting.</p>
<video src="/_astro/300-lezzz-sound.C8ldpwhU.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="find-all-the-cookies">Find all the Cookies</h2>
<p>There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.</p>
<p>This submission by <a href="https://github.com/fecony">Fecony</a>, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.</p>
<p>Well played, Fecony.</p>
<video src="/_astro/302-fecony-whereda.Dt-V46HK.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="fresh-batch-of-cookies">Fresh Batch of Cookies</h2>
<p>Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But <a href="https://github.com/henry-boyd">Henry Boyd</a> is a maniac and with his submission, you have to accept ALLLLL the cookies.</p>
<p>And that’s a whole lot of cookies.</p>
<video src="/_astro/296-henryboyd.CE1jFIea.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="cookie-management-application-process">Cookie Management Application Process</h2>
<p>What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.</p>
<p>Now all we have to do is wait for the rejection email.</p>
<video src="/_astro/286-wardbox.C05QWHgJ.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="grand-prize-winner-gangnam-style-beat">Grand Prize Winner: Gangnam Style Beat</h2>
<p>Our community-chosen winner’s submission pretty much speaks for itself.</p>
<p>Make sure you turn on the sound for this one!</p>
<p>🎤 <em>Eeeeh, sexy cookie. Op! op-op-op!</em> 🎵</p>
<video src="/_astro/285-3umaGH-gangnam.BR8SZHG6.mp4" preload="true" autoplay="" muted="" controls="" loop="" style="--lgWidth: 55%;--smWidth: 100%;"><track kind="captions" style="--lgWidth: 55%;--smWidth: 100%;"></video>
<h2 id="and-there-you-have-it">And there you have it!</h2>
<p>Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.</p>
<p>And now for a quick PR announcement:</p>
<p>At <a href="https://wasp.sh/">Wasp</a> we’re working hard to build a modern, open-source full-stack React/NodeJS framework.</p>
<p>The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.</p>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axqiv01tl1pha9ougp21.gif" alt="friendly handshake" loading="lazy" width="500" height="500" decoding="async">
<div><a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer"><p>⭐️ Star Wasp on GitHub 💪</p></a></div>
<p>Thanks for reading, and showing your support!</p>cookie consentsaassideprojecthackathon🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬https://docs.opensaas.sh/blog/2024-10-10-most-annoying-cookie-banner-contest/https://docs.opensaas.sh/blog/2024-10-10-most-annoying-cookie-banner-contest/Thu, 10 Oct 2024 00:00:00 GMT<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"><iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/tLEEk8Q5jo4?si=U-nROtawDHrjJ4k0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></div>
<h2 id="what-kind-of-hackathon-is-this">What kind of hackathon is this?</h2>
<p>The goal here is simple. Make <strong>THE MOST ANNOYING COOKIE BANNER</strong> you can think of.</p>
<p>Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:</p>
<ol>
<li><em>The Cookie Consent Wheel of Fortune:</em></li>
</ol>
<img src="https://docs.opensaas.sh/_astro/wheel.C0t0aI9l_1NmXd8.webp" alt="Consent wheel" loading="lazy" width="664" height="720" decoding="async">
<ol start="2">
<li><em>The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:</em></li>
</ol>
<img src="https://docs.opensaas.sh/_astro/enter.BKyLpmhG_1AGCrL.webp" alt="Enter to win" loading="lazy" width="1300" height="720" decoding="async">
<p>Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these <a href="https://uxdesign.cc/the-worst-volume-control-ui-in-the-world-60713dc86950">Ridiculous Volume Slider UI’s</a>.</p>
<h2 id="prizes">Prizes</h2>
<p>2 winners will receive a nice mechanical keyboard, an additional <em>annoying</em> gift, as well as a shoutout on our socials.</p>
<p>The 2 winners will be selected by:</p>
<ul>
<li>The Wasp team</li>
<li>Our Community (Discord &#x26; Twitter)</li>
</ul>
<p>The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.</p>
<img src="https://docs.opensaas.sh/_astro/keyboard.CAzQ-X8I_2hg4zW.webp" alt="Keyboard" loading="lazy" width="1678" height="1120" decoding="async">
<p>(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)</p>
<h2 id="how-to-participate">How to participate</h2>
<ul>
<li>
<p>Fork the <a href="https://stackblitz.com/edit/vitejs-vite-uiyjag?file=src%2Flanding-page%2Fcomponents%2FCookieConsentBanner.tsx">Annoying Cookie Banner Stackblitz Template</a></p>
<ul>
<li>If you prefer to work in your own editor, just click on the <code dir="auto">Create a repository</code> button after you fork the template</li>
</ul>
</li>
<li>
<p>When finished with your banner, click on <code dir="auto">Share</code> in the top left, and in the <code dir="auto">Embed</code> tab, click <code dir="auto">Copy URL</code> with the following settings:</p>
<img src="https://docs.opensaas.sh/_astro/image.CA79F9km_ZMPXkm.webp" alt="Share" loading="lazy" width="2346" height="948" decoding="async">
</li>
<li>
<p>Next, <a href="https://github.com/wasp-lang/open-saas/edit/main/MOST-ANNOYING-COOKIE-BANNER.md">edit the <code dir="auto">MOST-ANNOYING-COOKIE-BANNER.md</code> file</a> on the Open SaaS repo.</p>
<ul>
<li>Enter your GitHub username followed by the embed link you copied from Stackblitz</li>
<li>Note: after you create a PR, the Wasp team will add the <code dir="auto">ANNOYING COOKIE BANNER</code> label to it.</li>
</ul>
</li>
<li>
<p>Make sure you also ⭐️ <a href="https://github.com/wasp-lang/open-saas">star the Open Saas repository</a> to be eligible to win!</p>
</li>
</ul>
<h2 id="deadline--results">Deadline &#x26; Results</h2>
<p>Submit your PR before the 21st of October to be eligible to win!</p>
<p>Be sure to join our <a href="https://discord.gg/rzdnErX">Discord</a> or follow us on <a href="https://twitter.com/wasplang">Twitter/X</a> for updates and the final results!</p>
<h2 id="lets-annoy-our-users">Let’s annoy our users! 🚀</h2>
<p>Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.</p>
<p>Remember, this is all about having fun and pushing the boundaries of user interface design!</p>
<p>Let the annoyance games begin! 🎉</p>cookie consentsaassideprojecthackathonHow I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRRhttps://docs.opensaas.sh/blog/2023-11-21-coverlettergpt/https://docs.opensaas.sh/blog/2023-11-21-coverlettergpt/Tue, 21 Nov 2023 00:00:00 GMT<h2 id="hey-im-vince">Hey, I’m Vince…</h2>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az8xf61b2qxx1msfo4t5.png" alt="Vince Headshot" loading="lazy" width="700" height="700" decoding="async">
<p>I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.</p>
<p>If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as <a href="http://levels.io">levels.io</a> and <a href="https://twitter.com/marc_louvion">Marc Lou</a>.</p>
<p>This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.</p>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1r07ajn3gysdscjdkns.png" alt="CoverLetterGPT" loading="lazy" width="700" height="700" decoding="async">
<p>So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, <a href="http://CoverLetterGPT.xyz">CoverLetterGPT.xyz</a>, which I launched in March 2023!</p>
<p>I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:</p>
<ul>
<li>over 5,000 registered users</li>
<li>$203 monthly recurring revenue (MRR)</li>
</ul>
<p>Below, I’m going to share with you how I built it (yes, it’s <a href="https://github.com/vincanger/coverlettergpt">open-source</a>), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.</p>
<h2 id="what-the-heck-is-coverlettergpt">What the heck is CoverLetterGPT?</h2>
<p><a href="http://CoverLetterGPT.xyz">CoverLetterGPT.xyz</a> was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.</p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"><iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/ZhcFRD9cVrI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!</p>
<h2 id="whats-the-tech-stack">What’s the Tech Stack?</h2>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpb97bgrx98bwxemrg0o.png" alt="Tech Stack" loading="lazy" width="700" height="700" decoding="async">
<p>CoverLetterGPT is entirely open-source, so you can <a href="https://github.com/vincanger/coverlettergpt">check out the code</a>, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!</p>
<p>I built it using the <a href="https://wasp-lang.dev">Wasp full-stack framework</a> which allowed me to ship it about 10x faster.</p>
<p>Why?</p>
<p>Because <a href="https://wasp-lang.dev">Wasp</a> as a framework allows you to describe your app’s core features in a <code dir="auto">main.wasp</code> config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.</p>
<p>All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication &#x26; authorization, server config, email sending, and cron jobs.</p>
<p>BTW, <a href="https://wasp-lang.dev">Wasp</a> is open-source and free and you can help the project out a ton by starring the repo on GitHub: <a href="https://www.github.com/wasp-lang/wasp">https://www.github.com/wasp-lang/wasp</a> 🙏</p>
<img src="https://media1.giphy.com/media/ZfK4cXKJTTay1Ava29/giphy.gif?cid=7941fdc6pmqo30ll0e4rzdiisbtagx97sx5t0znx4lk0auju&ep=v1_gifs_search&rid=giphy.gif&ct=g" loading="lazy" alt="star wasp" width="500" height="500" decoding="async">
<p><a href="https://www.github.com/wasp-lang/wasp">⭐️ Star Wasp on GitHub 🙏</a></p>
<p>For the UI, I used <a href="https://chakra-ui.com/">Chakra UI</a>, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.</p>
<p>For payments, I used <a href="https://www.notion.so/How-I-Built-and-Open-Sourced-CoverLetterGPT-5-000-users-200-MRR-0d32f13fa00a440fb8e08c8dbf2b8a27?pvs=21">Stripe</a>, (I’ll go into the details of monetization below).</p>
<p>The Server and Postgres Database are hosted on <a href="https://railway.app/">https://railway.app</a>, with the client on <a href="http://Netlify.com">Netlify.com</a>’s free tier.</p>
<p>By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a <a href="https://github.com/wasp-lang/open-saas">free SaaS template</a> you can use that will save you days of work!</p>
<h2 id="how-i-marketed-it">How I Marketed It</h2>
<p>My biggest take-away from this whole project was that open-sourcing it was the best way to market it!</p>
<p>This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?</p>
<p>Well, not quite.</p>
<p>First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.</p>
<p>Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.</p>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q79djej6doj2yq10l2og.png" alt="reddit" loading="lazy" width="700" height="700" decoding="async">
<p>When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.</p>
<p>This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the <a href="https://www.indiehackers.com/post/whats-new-don-t-build-things-no-one-wants-833ee752ba?utm_source=indie-hackers-emails&#x26;utm_campaign=ih-newsletter&#x26;utm_medium=email">IndieHackers.com</a> newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.</p>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44rlv65u97qhufbhqt0k.png" alt="product hunt" loading="lazy" width="700" height="700" decoding="async">
<p>And even though it’s a small, simple product, I tried launching it on <a href="http://producthunt.com">Product Hunt</a>, where it also performed considerably well.</p>
<p>So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).</p>
<h2 id="how-i-monetized-it">How I Monetized It</h2>
<p>When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.</p>
<p>So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.</p>
<p>To my surprise, tips started coming in, with some as high as $10 dollars!</p>
<p>This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.</p>
<p>My initial payment options were:</p>
<ul>
<li>$4.95 for a 3 months access</li>
<li>$2.95 for 10 cover letter generations</li>
</ul>
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/golo3tnh3o0sy5sujrer.png" alt="pricing page" loading="lazy" width="700" height="700" decoding="async">
<p>That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:</p>
<ul>
<li>$5.95 / month subscription with GPT-4</li>
<li>$2.95 / month subscription with GPT-3.5-turbo</li>
</ul>
<p>Currently, over 90% of my customers choose the more powerful, more <a href="https://openai.com/pricing">expensive plan with GPT-4</a>, even though the 3 trial credits use the GPT-3.5-turbo model.</p>
<p>(I also integrated Bitcoin Lightning payments — check out the <a href="https://github.com/vincanger/coverlettergpt">repo</a> if you want to learn how — but haven’t received any yet.)</p>
<p>Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:</p>
<ul>
<li>Domain Name: $10/year</li>
<li>OpenAI bill: ~ $15/month</li>
<li>Hosting bill: ~ $3/month</li>
</ul>
<p>Which leaves me at about ~ $183/month in profits 😀</p>
<h2 id="future-plans">Future Plans</h2>
<p>One of the most surprising aspects about <a href="http://CoverLetterGPT.xyz">CoverLetterGPT.xyz</a>’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.</p>
<p>But I still have some plans to make it better:</p>
<ul>
<li>buy a better top-level domain (TLD), like <a href="http://CoverLetterGPT.ai">CoverLetterGPT.ai</a></li>
<li>add more features, like the ability to generate interview questions based on the cover letters</li>
<li>improve the UX and make it look more “professional”</li>
</ul>
<p>If you have any other ideas how I could improve it, drop me a comment, message me on <a href="https://twitter.com/hot_town">twitter/x</a>, or submit a <a href="https://github.com/vincanger/coverlettergpt">PR to the repo</a>.</p>
<h2 id="final-words--more-resources">Final Words + More Resources</h2>
<p>My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.</p>
<p>Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:</p>
<ul>
<li>👨‍💻 <a href="https://github.com/vincanger/coverlettergpt">CoverLetterGPT GitHub Repo</a></li>
<li>💸 <a href="https://github.com/wasp-lang/SaaS-Template-GPT">Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, &#x26; instructions in the README!</a></li>
<li>✍️ <a href="https://www.reddit.com/r/webdev/comments/11uh4qo/comment/jco5ggp/?utm_source=share&#x26;utm_medium=web2x&#x26;context=3">Initial CoverLetterGPT Reddit Post</a></li>
<li>🪓 <a href="https://www.indiehackers.com/post/whats-new-don-t-build-things-no-one-wants-833ee752ba?utm_source=indie-hackers-emails&#x26;utm_campaign=ih-newsletter&#x26;utm_medium=email">IndieHackers Feature</a></li>
<li>💸 <a href="https://www.youtube.com/watch?v=Psq5N5C-FGo&#x26;t=1041s">Great Video on how to use Stripe CLI &#x26; Webhooks</a></li>
</ul>
<p>Oh, and if you found these resources useful, don’t forget to support Wasp by <a href="https://github.com/wasp-lang/wasp">starring the repo on GitHub</a>!</p>
<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCpry2p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bky8z46ii7ayejprrqw3.gif" alt="star wasp" loading="lazy" width="500" height="500" decoding="async">
<p><a href="https://www.github.com/wasp-lang/wasp">⭐️ Thanks For Your Support 🙏 </a></p>indiehackersaassideproject



=== PAGE: https://docs.opensaas.sh/blog/2024-12-16-my-gpt-wrapper/ ===

 My GPT Wrapper Makes $550 MRR One Year After Launch | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview     Quick Stats:    Small Wins Are Worth It    Build & Launch Fast    Keep It Simple    It’s All About Tradeoffs    Links & Resources    Final Thoughts      Let’s stay in touch!    On this page   Overview     Quick Stats:    Small Wins Are Worth It    Build & Launch Fast    Keep It Simple    It’s All About Tradeoffs    Links & Resources    Final Thoughts      Let’s stay in touch!           My GPT Wrapper Makes $550 MRR One Year After Launch           Dec 16, 2024     Vince Dev Rel @ Wasp     Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!    Tags:gptsaassideprojectindiehacker    TurboReel: An Open Source AI Video Generator Built With Open SaaS           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/2024-12-10-turboreel-os-ai-video-generator-built-with-open-saas/ ===

 TurboReel: An Open Source AI Video Generator Built With Open SaaS | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    The Starting Point: Open SaaS Boilerplate    TurboReel’s Tech Stack     Building faster with Open SaaS boilerplate    Out-of-the-box Stripe integration    The power of open source      Getting first users     Ready to Build Your SaaS?      On this page   Overview    The Starting Point: Open SaaS Boilerplate    TurboReel’s Tech Stack     Building faster with Open SaaS boilerplate    Out-of-the-box Stripe integration    The power of open source      Getting first users     Ready to Build Your SaaS?             TurboReel: An Open Source AI Video Generator Built With Open SaaS           Dec 10, 2024     Milica Growth @ Wasp     Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.  Tags:webdevsaassideprojectindiehackers    My GPT Wrapper Makes $550 MRR One Year After Launch        Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/2024-12-04-open-source-saas-boilerplate-vs-paid/ ===

 Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One? | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Why a sudden craze with all these starters? SaaS-es are not a new thing at all    With an open-source SaaS starter, you know exactly what you’re getting into    With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)    Security: in open-source, everyone is a reviewer    With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!    Open-source SaaS starter === unlimited updates. Closed source? Sometimes.    With a paid SaaS starter, you might need to buy a “license” for every new app    With an open-source SaaS starter, you can add new features yourself!    Summary    On this page   Overview    Why a sudden craze with all these starters? SaaS-es are not a new thing at all    With an open-source SaaS starter, you know exactly what you’re getting into    With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)    Security: in open-source, everyone is a reviewer    With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!    Open-source SaaS starter === unlimited updates. Closed source? Sometimes.    With a paid SaaS starter, you might need to buy a “license” for every new app    With an open-source SaaS starter, you can add new features yourself!    Summary           Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?           Dec 4, 2024     Matija CEO @ Wasp     SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!  Tags:webdevsaassideproject    TurboReel: An Open Source AI Video Generator Built With Open SaaS        We Made the Most Annoying Cookie Banners Ever           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/2024-11-22-best-annoying-cookie-consent-banners/ ===

 We Made the Most Annoying Cookie Banners Ever | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    The Most Annoying Cookie Consent Banner Ever Hackathon    The GDPR Quiz    Windows of Time    Find all the Cookies    Fresh Batch of Cookies    Cookie Management Application Process    Grand Prize Winner: Gangnam Style Beat    And there you have it!    On this page   Overview    The Most Annoying Cookie Consent Banner Ever Hackathon    The GDPR Quiz    Windows of Time    Find all the Cookies    Fresh Batch of Cookies    Cookie Management Application Process    Grand Prize Winner: Gangnam Style Beat    And there you have it!           We Made the Most Annoying Cookie Banners Ever and it was totally worth it           Nov 26, 2024     Vince Dev Rel @ Wasp     The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!  Tags:cookie consentsaassideprojecthackathon    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?        🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/2024-10-10-most-annoying-cookie-banner-contest/ ===

 🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬 | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    What kind of hackathon is this?    Prizes    How to participate    Deadline & Results    Let’s annoy our users! 🚀    On this page   Overview    What kind of hackathon is this?    Prizes    How to participate    Deadline & Results    Let’s annoy our users! 🚀           🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬           Oct 10, 2024     Vince Dev Rel @ Wasp     
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉  Tags:cookie consentsaassideprojecthackathon    We Made the Most Annoying Cookie Banners Ever        How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/2023-11-21-coverlettergpt/ ===

 How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Hey, I’m Vince…    What the heck is CoverLetterGPT?    What’s the Tech Stack?    How I Marketed It    How I Monetized It    Future Plans    Final Words + More Resources    On this page   Overview    Hey, I’m Vince…    What the heck is CoverLetterGPT?    What’s the Tech Stack?    How I Marketed It    How I Monetized It    Future Plans    Final Words + More Resources           How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR           Nov 21, 2023     Vince Dev Rel @ Wasp     Hey, I’m Vince…

I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.
If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as levels.io and Marc Lou.
This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.

So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, CoverLetterGPT.xyz, which I launched in March 2023!
I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:

over 5,000 registered users
$203 monthly recurring revenue (MRR)

Below, I’m going to share with you how I built it (yes, it’s open-source), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.
What the heck is CoverLetterGPT?
CoverLetterGPT.xyz was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.

It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!
What’s the Tech Stack?

CoverLetterGPT is entirely open-source, so you can check out the code, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!
I built it using the Wasp full-stack framework which allowed me to ship it about 10x faster.
Why?
Because Wasp as a framework allows you to describe your app’s core features in a main.wasp config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.
All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication & authorization, server config, email sending, and cron jobs.
BTW, Wasp is open-source and free and you can help the project out a ton by starring the repo on GitHub: https://www.github.com/wasp-lang/wasp 🙏

⭐️ Star Wasp on GitHub 🙏
For the UI, I used Chakra UI, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.
For payments, I used Stripe, (I’ll go into the details of monetization below).
The Server and Postgres Database are hosted on https://railway.app, with the client on Netlify.com’s free tier.
By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a free SaaS template you can use that will save you days of work!
How I Marketed It
My biggest take-away from this whole project was that open-sourcing it was the best way to market it!
This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?
Well, not quite.
First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.
Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.

When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.
This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the IndieHackers.com newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.

And even though it’s a small, simple product, I tried launching it on Product Hunt, where it also performed considerably well.
So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).
How I Monetized It
When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.
So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.
To my surprise, tips started coming in, with some as high as $10 dollars!
This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.
My initial payment options were:

$4.95 for a 3 months access
$2.95 for 10 cover letter generations


That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:

$5.95 / month subscription with GPT-4
$2.95 / month subscription with GPT-3.5-turbo

Currently, over 90% of my customers choose the more powerful, more expensive plan with GPT-4, even though the 3 trial credits use the GPT-3.5-turbo model.
(I also integrated Bitcoin Lightning payments — check out the repo if you want to learn how — but haven’t received any yet.)
Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:

Domain Name: $10/year
OpenAI bill: ~ $15/month
Hosting bill: ~ $3/month

Which leaves me at about ~ $183/month in profits 😀
Future Plans
One of the most surprising aspects about CoverLetterGPT.xyz’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.
But I still have some plans to make it better:

buy a better top-level domain (TLD), like CoverLetterGPT.ai
add more features, like the ability to generate interview questions based on the cover letters
improve the UX and make it look more “professional”

If you have any other ideas how I could improve it, drop me a comment, message me on twitter/x, or submit a PR to the repo.
Final Words + More Resources
My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.
Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:

👨‍💻 CoverLetterGPT GitHub Repo
💸 Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, & instructions in the README!
✍️ Initial CoverLetterGPT Reddit Post
🪓 IndieHackers Feature
💸 Great Video on how to use Stripe CLI & Webhooks

Oh, and if you found these resources useful, don’t forget to support Wasp by starring the repo on GitHub!

⭐️ Thanks For Your Support 🙏   Tags:indiehackersaassideproject    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬           Edit page            



=== PAGE: https://docs.opensaas.sh/blog/tags/saas/ ===

 saas | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           saas      6 posts with the tag “saas”     My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker      TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers      Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?     Dec 4, 2024     Matija CEO @ Wasp       SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!   Tags:webdevsaassideproject      We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon      How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR     Nov 21, 2023     Vince Dev Rel @ Wasp       Hey, I’m Vince…

I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.
If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as levels.io and Marc Lou.
This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.

So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, CoverLetterGPT.xyz, which I launched in March 2023!
I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:

over 5,000 registered users
$203 monthly recurring revenue (MRR)

Below, I’m going to share with you how I built it (yes, it’s open-source), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.
What the heck is CoverLetterGPT?
CoverLetterGPT.xyz was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.

It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!
What’s the Tech Stack?

CoverLetterGPT is entirely open-source, so you can check out the code, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!
I built it using the Wasp full-stack framework which allowed me to ship it about 10x faster.
Why?
Because Wasp as a framework allows you to describe your app’s core features in a main.wasp config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.
All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication & authorization, server config, email sending, and cron jobs.
BTW, Wasp is open-source and free and you can help the project out a ton by starring the repo on GitHub: https://www.github.com/wasp-lang/wasp 🙏

⭐️ Star Wasp on GitHub 🙏
For the UI, I used Chakra UI, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.
For payments, I used Stripe, (I’ll go into the details of monetization below).
The Server and Postgres Database are hosted on https://railway.app, with the client on Netlify.com’s free tier.
By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a free SaaS template you can use that will save you days of work!
How I Marketed It
My biggest take-away from this whole project was that open-sourcing it was the best way to market it!
This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?
Well, not quite.
First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.
Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.

When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.
This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the IndieHackers.com newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.

And even though it’s a small, simple product, I tried launching it on Product Hunt, where it also performed considerably well.
So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).
How I Monetized It
When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.
So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.
To my surprise, tips started coming in, with some as high as $10 dollars!
This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.
My initial payment options were:

$4.95 for a 3 months access
$2.95 for 10 cover letter generations


That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:

$5.95 / month subscription with GPT-4
$2.95 / month subscription with GPT-3.5-turbo

Currently, over 90% of my customers choose the more powerful, more expensive plan with GPT-4, even though the 3 trial credits use the GPT-3.5-turbo model.
(I also integrated Bitcoin Lightning payments — check out the repo if you want to learn how — but haven’t received any yet.)
Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:

Domain Name: $10/year
OpenAI bill: ~ $15/month
Hosting bill: ~ $3/month

Which leaves me at about ~ $183/month in profits 😀
Future Plans
One of the most surprising aspects about CoverLetterGPT.xyz’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.
But I still have some plans to make it better:

buy a better top-level domain (TLD), like CoverLetterGPT.ai
add more features, like the ability to generate interview questions based on the cover letters
improve the UX and make it look more “professional”

If you have any other ideas how I could improve it, drop me a comment, message me on twitter/x, or submit a PR to the repo.
Final Words + More Resources
My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.
Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:

👨‍💻 CoverLetterGPT GitHub Repo
💸 Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, & instructions in the README!
✍️ Initial CoverLetterGPT Reddit Post
🪓 IndieHackers Feature
💸 Great Video on how to use Stripe CLI & Webhooks

Oh, and if you found these resources useful, don’t forget to support Wasp by starring the repo on GitHub!

⭐️ Thanks For Your Support 🙏    Tags:indiehackersaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/tags/sideproject/ ===

 sideproject | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           sideproject      6 posts with the tag “sideproject”     My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker      TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers      Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?     Dec 4, 2024     Matija CEO @ Wasp       SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!   Tags:webdevsaassideproject      We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon      How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR     Nov 21, 2023     Vince Dev Rel @ Wasp       Hey, I’m Vince…

I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.
If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as levels.io and Marc Lou.
This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.

So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, CoverLetterGPT.xyz, which I launched in March 2023!
I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:

over 5,000 registered users
$203 monthly recurring revenue (MRR)

Below, I’m going to share with you how I built it (yes, it’s open-source), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.
What the heck is CoverLetterGPT?
CoverLetterGPT.xyz was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.

It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!
What’s the Tech Stack?

CoverLetterGPT is entirely open-source, so you can check out the code, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!
I built it using the Wasp full-stack framework which allowed me to ship it about 10x faster.
Why?
Because Wasp as a framework allows you to describe your app’s core features in a main.wasp config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.
All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication & authorization, server config, email sending, and cron jobs.
BTW, Wasp is open-source and free and you can help the project out a ton by starring the repo on GitHub: https://www.github.com/wasp-lang/wasp 🙏

⭐️ Star Wasp on GitHub 🙏
For the UI, I used Chakra UI, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.
For payments, I used Stripe, (I’ll go into the details of monetization below).
The Server and Postgres Database are hosted on https://railway.app, with the client on Netlify.com’s free tier.
By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a free SaaS template you can use that will save you days of work!
How I Marketed It
My biggest take-away from this whole project was that open-sourcing it was the best way to market it!
This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?
Well, not quite.
First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.
Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.

When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.
This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the IndieHackers.com newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.

And even though it’s a small, simple product, I tried launching it on Product Hunt, where it also performed considerably well.
So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).
How I Monetized It
When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.
So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.
To my surprise, tips started coming in, with some as high as $10 dollars!
This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.
My initial payment options were:

$4.95 for a 3 months access
$2.95 for 10 cover letter generations


That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:

$5.95 / month subscription with GPT-4
$2.95 / month subscription with GPT-3.5-turbo

Currently, over 90% of my customers choose the more powerful, more expensive plan with GPT-4, even though the 3 trial credits use the GPT-3.5-turbo model.
(I also integrated Bitcoin Lightning payments — check out the repo if you want to learn how — but haven’t received any yet.)
Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:

Domain Name: $10/year
OpenAI bill: ~ $15/month
Hosting bill: ~ $3/month

Which leaves me at about ~ $183/month in profits 😀
Future Plans
One of the most surprising aspects about CoverLetterGPT.xyz’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.
But I still have some plans to make it better:

buy a better top-level domain (TLD), like CoverLetterGPT.ai
add more features, like the ability to generate interview questions based on the cover letters
improve the UX and make it look more “professional”

If you have any other ideas how I could improve it, drop me a comment, message me on twitter/x, or submit a PR to the repo.
Final Words + More Resources
My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.
Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:

👨‍💻 CoverLetterGPT GitHub Repo
💸 Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, & instructions in the README!
✍️ Initial CoverLetterGPT Reddit Post
🪓 IndieHackers Feature
💸 Great Video on how to use Stripe CLI & Webhooks

Oh, and if you found these resources useful, don’t forget to support Wasp by starring the repo on GitHub!

⭐️ Thanks For Your Support 🙏    Tags:indiehackersaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/tags/cookie-consent/ ===

 cookie consent | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           cookie consent      2 posts with the tag “cookie consent”     We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon                   



=== PAGE: https://docs.opensaas.sh/blog/tags/hackathon/ ===

 hackathon | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           hackathon      2 posts with the tag “hackathon”     We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon                   



=== PAGE: https://docs.opensaas.sh/blog/tags/indiehacker/ ===

 indiehacker | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           indiehacker      2 posts with the tag “indiehacker”     My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker      How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR     Nov 21, 2023     Vince Dev Rel @ Wasp       Hey, I’m Vince…

I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.
If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as levels.io and Marc Lou.
This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.

So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, CoverLetterGPT.xyz, which I launched in March 2023!
I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:

over 5,000 registered users
$203 monthly recurring revenue (MRR)

Below, I’m going to share with you how I built it (yes, it’s open-source), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.
What the heck is CoverLetterGPT?
CoverLetterGPT.xyz was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.

It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!
What’s the Tech Stack?

CoverLetterGPT is entirely open-source, so you can check out the code, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!
I built it using the Wasp full-stack framework which allowed me to ship it about 10x faster.
Why?
Because Wasp as a framework allows you to describe your app’s core features in a main.wasp config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.
All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication & authorization, server config, email sending, and cron jobs.
BTW, Wasp is open-source and free and you can help the project out a ton by starring the repo on GitHub: https://www.github.com/wasp-lang/wasp 🙏

⭐️ Star Wasp on GitHub 🙏
For the UI, I used Chakra UI, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.
For payments, I used Stripe, (I’ll go into the details of monetization below).
The Server and Postgres Database are hosted on https://railway.app, with the client on Netlify.com’s free tier.
By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a free SaaS template you can use that will save you days of work!
How I Marketed It
My biggest take-away from this whole project was that open-sourcing it was the best way to market it!
This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?
Well, not quite.
First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.
Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.

When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.
This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the IndieHackers.com newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.

And even though it’s a small, simple product, I tried launching it on Product Hunt, where it also performed considerably well.
So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).
How I Monetized It
When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.
So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.
To my surprise, tips started coming in, with some as high as $10 dollars!
This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.
My initial payment options were:

$4.95 for a 3 months access
$2.95 for 10 cover letter generations


That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:

$5.95 / month subscription with GPT-4
$2.95 / month subscription with GPT-3.5-turbo

Currently, over 90% of my customers choose the more powerful, more expensive plan with GPT-4, even though the 3 trial credits use the GPT-3.5-turbo model.
(I also integrated Bitcoin Lightning payments — check out the repo if you want to learn how — but haven’t received any yet.)
Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:

Domain Name: $10/year
OpenAI bill: ~ $15/month
Hosting bill: ~ $3/month

Which leaves me at about ~ $183/month in profits 😀
Future Plans
One of the most surprising aspects about CoverLetterGPT.xyz’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.
But I still have some plans to make it better:

buy a better top-level domain (TLD), like CoverLetterGPT.ai
add more features, like the ability to generate interview questions based on the cover letters
improve the UX and make it look more “professional”

If you have any other ideas how I could improve it, drop me a comment, message me on twitter/x, or submit a PR to the repo.
Final Words + More Resources
My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.
Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:

👨‍💻 CoverLetterGPT GitHub Repo
💸 Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, & instructions in the README!
✍️ Initial CoverLetterGPT Reddit Post
🪓 IndieHackers Feature
💸 Great Video on how to use Stripe CLI & Webhooks

Oh, and if you found these resources useful, don’t forget to support Wasp by starring the repo on GitHub!

⭐️ Thanks For Your Support 🙏    Tags:indiehackersaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/tags/webdev/ ===

 webdev | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           webdev      2 posts with the tag “webdev”     TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers      Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?     Dec 4, 2024     Matija CEO @ Wasp       SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!   Tags:webdevsaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/tags/gpt/ ===

 gpt | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           gpt      1 post with the tag “gpt”     My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker                   



=== PAGE: https://docs.opensaas.sh/blog/tags/indiehackers/ ===

 indiehackers | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           indiehackers      1 post with the tag “indiehackers”     TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers                   



=== PAGE: https://docs.opensaas.sh/blog/authors/vince/ ===

 Vince | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           Vince      4 posts by Vince     My GPT Wrapper Makes $550 MRR One Year After Launch     Dec 16, 2024     Vince Dev Rel @ Wasp       Hey builders,
I wanted to share my journey building a micro-SaaS, CoverLetterGPT, which now earns $550/month in recurring revenue (MRR)—all while requiring minimal effort and maintenance. Here’s how I did it and why I believe small, simple SaaS apps are an underrated way to start as an indie maker.
    
Quick Stats:

Built in 1 week

using Wasp, a React, NodeJS, & Prisma framework
and Chakra UI for the design system.


Runs on autopilot
~$550 MRR after one year
Minimal customer support—only 3 Stripe disputes to date
Costs ~$15/month to operate (hosting + OpenAI API fees)
Deployed on Railway & Netlify


BTW, I built Open SaaS, the free, open-source SaaS template based on what I learned from building and launching CoverLetterGPT.
Because Open SaaS is a community-driven project, it also benefits from community feedback and contributions, so it boasts a clean codebase and a ton of useful features. Check it out and give us a star! We’re always improving it.
 
⭐️ Star the   
Open SaaS repo
  and support open-source tools for builders, by builders!  
Small Wins Are Worth It
Many developers think a SaaS has to be big, flashy, or wildly profitable to be worth building. I disagree. For me:

$550/month is fantastic as side income.
It runs itself, requiring virtually no maintenance.
I can balance it easily alongside my full-time job.
It’s fun and doesn’t consume my free time.


Here’s why I think you should aim for small, achievable SaaS projects instead of trying to “hit it big” from the start.
Build & Launch Fast

The most important lesson I’ve learned: speed is everything. The faster you launch, the faster you’ll know if your idea works. Here’s what worked for me:

Avoid long, drawn-out failures: Build small, execute early.
Use the fastest tools available: I used Wasp because it gives me all the building blocks already set up (auth, database, cron jobs, email sending), letting me focus on the business logic of the app. Paired with Chakra UI, I was able to build the app in about 1 week.
Forget perfection: I didn’t worry about making it pretty or perfect—it just had to work.

Keep It Simple
The beauty of micro-SaaS is in its simplicity. Here’s why:

My app does one thing well: generating cover letters based on résumés and job descriptions.
There’s no need for a fancy landing page or marketing gimmicks. This is my 🌶 hot take.
Users get 3 trial credits—enough to try the app and see value before paying.


One of the biggest perks of micro-SaaS is how low-maintenance it can be. With CoverLetterGPT, I rarely handle customer service thanks to its simplicity.
This means I spend my time on new ideas rather than maintaining old ones.
It’s All About Tradeoffs
While I could optimize and grow CoverLetterGPT further, I’ve chosen to keep it small and simple. For me:

Small wins are still wins.
I value having a side project that’s easy to manage alongside my full-time job.
I’d rather have less stress than chase higher profits.

Links & Resources
If you’re thinking about launching your own SaaS, here are some helpful resources:

👨‍💻 CoverLetterGPT (Live App)
💸 Open-Source SaaS Template
🛠️ Framework: Wasp
✨ UI Components: Chakra UI
🛠️ Hosting: Railway & Netlify
✍️ My Original Reddit Post

Final Thoughts
If you’re considering building a SaaS, don’t overthink it. Start small, move fast, and treat it as an experiment. Forget the “rules” and focus on launching. Here’s what matters most:

Keep it simple: Build an app that solves one problem well.
Launch fast: Test your idea and iterate based on real feedback.
Minimize effort: Aim for maximum reward with minimal maintenance.

For me, $550 MRR isn’t just “enough”—it’s amazing. It’s proof that small, focused apps can succeed, and they’re a great way to build confidence and skills as a maker.
Let’s stay in touch!
If you found this helpful, check me out on Twitter where I like to build in public and share what I’m learning and building.

 
⭐️ Star the   
Open SaaS repo
  and support tools that help you build fast!     Tags:gptsaassideprojectindiehacker      We Made the Most Annoying Cookie Banners Ever     Nov 26, 2024     Vince Dev Rel @ Wasp       The Most Annoying Cookie Consent Banner Ever Hackathon
We at Wasp just finished off a fun little hackathon where we asked our users to create the most annoying cookie consent banners they could think of (because cookie banners aren’t annoying enough already, right?). Then we let our community pick the winner in an elimination style tournament on X/Twitter.
It was a lot of fun, and the submissions were really creative, so we thought we’d highlight some of our favorites for you, including the community chosen winner. Check ‘em out below. We hope they inspire you… to… not use them on your own sites. :)
The GDPR Quiz
The General Data Protection Regulation (GDPR) is the EU’s data privacy law that requires websites to get explicit consent from users before collecting their data through cookies.
GDPR is the reason we have cookie consent banners today.
This submission by Cam Blackwood gets to the core of why cookie consent banners are annoying: they force users to make a decision about something they barely understand (or care about), based on a regulation they probably don’t even know exists.
Thanks for the reality check, Cam.

Windows of Time
Do you ever feel like cookie consent banners are UX design pattern from the past? Well, this submission by Lazi confirms that, by sending you through an operating system time machine to a past we’d all like to forget.
Disturbing, yet oddly comforting.

Find all the Cookies
There are some sites that make rejecting cookies a real pain, as if you were trying to find a needle in a haystack, or as if you were looking at a Where’s Waldo puzzle.
This submission by Fecony, Wasp community meme lord, is just that. We find it annoying and fun at the same time, but what we’re not sure about is if it’s even possible to find them all.
Well played, Fecony.

Fresh Batch of Cookies
Most of us probably just smash the “accept” or “reject” button without even reading the fine print. But Henry Boyd is a maniac and with his submission, you have to accept ALLLLL the cookies.
And that’s a whole lot of cookies.

Cookie Management Application Process
What’s more annoying than cookie consent banners? Probably job applications. Well [Wardbox], community builder extraordinaire, combines the best (or worst) of both worlds to make the cookie mangament process even more tedious than you could imagine.
Now all we have to do is wait for the rejection email.

Grand Prize Winner: Gangnam Style Beat
Our community-chosen winner’s submission pretty much speaks for itself.
Make sure you turn on the sound for this one!
🎤 Eeeeh, sexy cookie. Op! op-op-op! 🎵

And there you have it!
Thanks to everyone who participated! We had a lot of fun looking at all the submissions and we’re glad to see that the community is as creative (and annoying) as ever.
And now for a quick PR announcement:
At Wasp we’re working hard to build a modern, open-source full-stack React/NodeJS framework.
The easiest way to show your support is just to star the Wasp repo! 🐝 It helps us spread the word and motivates us to keep building.

⭐️ Star Wasp on GitHub 💪
Thanks for reading, and showing your support!   Tags:cookie consentsaassideprojecthackathon      🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬     Oct 10, 2024     Vince Dev Rel @ Wasp       
What kind of hackathon is this?
The goal here is simple. Make THE MOST ANNOYING COOKIE BANNER you can think of.
Cookie consent banners annoy us all. So we thought, why not have some fun with them? Here are a couple examples of what that might look like:

The Cookie Consent Wheel of Fortune:



The “Hit Enter When the Red Ball is Over the Accept Button to Consent” Banner:


Now it’s time for you to get creative. Btw, if you’re looking for some inspiration, check out these Ridiculous Volume Slider UI’s.
Prizes
2 winners will receive a nice mechanical keyboard, an additional annoying gift, as well as a shoutout on our socials.
The 2 winners will be selected by:

The Wasp team
Our Community (Discord & Twitter)

The community will get a chance to vote in a battle royale style elimination tournament, where two banners will go head-to-head and the winner will advance to the next round.

(The brand/style will depend on the winner’s location, but we’ll do our best to find one with a Wasp look and feel 😃)
How to participate


Fork the Annoying Cookie Banner Stackblitz Template

If you prefer to work in your own editor, just click on the Create a repository button after you fork the template



When finished with your banner, click on Share in the top left, and in the Embed tab, click Copy URL with the following settings:



Next, edit the MOST-ANNOYING-COOKIE-BANNER.md file on the Open SaaS repo.

Enter your GitHub username followed by the embed link you copied from Stackblitz
Note: after you create a PR, the Wasp team will add the ANNOYING COOKIE BANNER label to it.



Make sure you also ⭐️ star the Open Saas repository to be eligible to win!


Deadline & Results
Submit your PR before the 21st of October to be eligible to win!
Be sure to join our Discord or follow us on Twitter/X for updates and the final results!
Let’s annoy our users! 🚀
Let’s create the most annoying cookie consent banner and have some fun! This hackathon is your chance to show off your creativity and tech skills. We’re super excited to see what wild ideas you come up with.
Remember, this is all about having fun and pushing the boundaries of user interface design!
Let the annoyance games begin! 🎉   Tags:cookie consentsaassideprojecthackathon      How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR     Nov 21, 2023     Vince Dev Rel @ Wasp       Hey, I’m Vince…

I’m a self-taught developer that changed careers during the Covid Pandemic. I did it because I wanted a better career, enjoyed programming, and at the same time, had a keen interest in IndieHacking.
If you’re not aware, IndieHacking is the movement of developers who build potentially profitable side-projects in their spare time. And there are some very successful examples of IndieHackers and “solopreneurs” out there inspiring others, such as levels.io and Marc Lou.
This thought of being able to build my own side-project that could generate profit while I slept was always attractive to me.

So I’m happy to report that I’ve finally done it with my first software-as-a-service (SaaS) app, CoverLetterGPT.xyz, which I launched in March 2023!
I’ll be the first to admit that the results aren’t spectacular, but they’re still something I’m very proud of:

over 5,000 registered users
$203 monthly recurring revenue (MRR)

Below, I’m going to share with you how I built it (yes, it’s open-source), how I marketed and monetized it, along with a bunch of helpful resources to help you build your own profitable side-project.
What the heck is CoverLetterGPT?
CoverLetterGPT.xyz was an idea I got after the OpenAI API was released. It’s an app that allows you to upload a PDF of your CV/resumé, along with the job description you’re applying to, and it will generate and edit unique cover letters for you based on this information.

It also lets you save and manage your cover letters per each job, making it easy to make and apply to multiple jobs without having to keep copy and pasting all your important info into ChatGPT!
What’s the Tech Stack?

CoverLetterGPT is entirely open-source, so you can check out the code, fork it, learn from it, make your own, submit a PR (I’d love you forever if you did 🙂)… whatever!
I built it using the Wasp full-stack framework which allowed me to ship it about 10x faster.
Why?
Because Wasp as a framework allows you to describe your app’s core features in a main.wasp config file. Then it continually compiles and “glues” these features into a React-ExpressJS-Prisma full-stack app for you.
All you have to focus on is writing the client and server-side logic, and Wasp will do the boring stuff for you, like authentication & authorization, server config, email sending, and cron jobs.
BTW, Wasp is open-source and free and you can help the project out a ton by starring the repo on GitHub: https://www.github.com/wasp-lang/wasp 🙏

⭐️ Star Wasp on GitHub 🙏
For the UI, I used Chakra UI, as I always do. I like that it’s a component-based UI library. This helps me build UI’s a lot faster than I would with Tailwind or vanilla CSS.
For payments, I used Stripe, (I’ll go into the details of monetization below).
The Server and Postgres Database are hosted on https://railway.app, with the client on Netlify.com’s free tier.
By the way, If you’re interested in building your own SaaS with almost the same stack as above, I also built a free SaaS template you can use that will save you days of work!
How I Marketed It
My biggest take-away from this whole project was that open-sourcing it was the best way to market it!
This seems counter-intuitive, right? Why would making the code available for anyone to see and copy be good for a business? You’re basically rolling out a red carpet for competitors, aren’t you?
Well, not quite.
First of all, the number of people who will realistically spend the time and energy launching a direct competitor is low. Also, most people interested in your open-source code want to learn some aspect of it and apply it to their own ideas, not just copy yours directly.
Secondly, and most importantly, the fact that it’s open-source makes people a lot more receptive to you talking about it.

When you present something you’ve built and give people the opportunity to learn from it, they’re much more welcoming! As a result, they’re more likely to upvote it, share it, use it, and recommend it to others.
This is exactly what happened with CoverLetterGPT! As a result of me sharing the open-source code, it get featured on the IndieHackers.com newsletter (>100k subscribers), shared on blogs, and talked about on social media platforms.

And even though it’s a small, simple product, I tried launching it on Product Hunt, where it also performed considerably well.
So, all together, these initial efforts combined gave my product a good initial marketing presence. To this day, I haven’t really done much else to market it, except some twitter posts (and this post, if you want to consider it marketing 🤑).
How I Monetized It
When I first launched in March 2023, I didn’t really expect anyone to pay for the product, but I wanted to learn how to use Stripe as a payments processor, thinking that the skills might be useful in the future.
So I started simple, and just put a one-time payment link for tips. No paywall, no subscriptions. It was entirely free to use with any tip amount welcome.
To my surprise, tips started coming in, with some as high as $10 dollars!
This encouraged me to force users to login to use the product, and add a paywall after users used up 3 credits.
My initial payment options were:

$4.95 for a 3 months access
$2.95 for 10 cover letter generations


That went reasonably well until I implemented the ability for users to use GPT to make finer edits to their generated cover letters. That’s when I changed my pricing and that’s when better profits started to come in:

$5.95 / month subscription with GPT-4
$2.95 / month subscription with GPT-3.5-turbo

Currently, over 90% of my customers choose the more powerful, more expensive plan with GPT-4, even though the 3 trial credits use the GPT-3.5-turbo model.
(I also integrated Bitcoin Lightning payments — check out the repo if you want to learn how — but haven’t received any yet.)
Now, with an MRR of ~$203, my monthly profit of course depends on my costs, which are:

Domain Name: $10/year
OpenAI bill: ~ $15/month
Hosting bill: ~ $3/month

Which leaves me at about ~ $183/month in profits 😀
Future Plans
One of the most surprising aspects about CoverLetterGPT.xyz’s success is that, on the surface, the product is very simple. Also, I’ve done very little in the way of SEO marketing, and haven’t continued to market it much at all. The current growth is mostly organic at this point thanks to my initial marketing efforts.
But I still have some plans to make it better:

buy a better top-level domain (TLD), like CoverLetterGPT.ai
add more features, like the ability to generate interview questions based on the cover letters
improve the UX and make it look more “professional”

If you have any other ideas how I could improve it, drop me a comment, message me on twitter/x, or submit a PR to the repo.
Final Words + More Resources
My intention with this article was to help others who might be considering launching their own SaaS product. So I hope that’s been the case here. If you still have any questions, don’t hesitate to ask.
Here are also the most important links from this article along with some further resources that will help in building and marketing your own profitable side-project:

👨‍💻 CoverLetterGPT GitHub Repo
💸 Free Full-Stack SaaS Template w/ Google Auth, Stripe, GPT, & instructions in the README!
✍️ Initial CoverLetterGPT Reddit Post
🪓 IndieHackers Feature
💸 Great Video on how to use Stripe CLI & Webhooks

Oh, and if you found these resources useful, don’t forget to support Wasp by starring the repo on GitHub!

⭐️ Thanks For Your Support 🙏    Tags:indiehackersaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/authors/matija/ ===

 Matija | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           Matija      1 post by Matija     Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?     Dec 4, 2024     Matija CEO @ Wasp       SaaS boilerplate starters became a very popular thing in the web dev community, and also a pathway to a luxury lifestyle for those behind them, sometimes making north of five figure amounts per month.

On the other hand, there’s also been a rise of the open-source SaaS boilerplate starters, that cover various stacks and offer similar features as their paid counterparts, but completely for free and with an active community alongside.
So, what’s the catch? Why pay $300 or $500 for something that you can simply get for free? Are there any trade-offs you should be aware of, and what are the pros and cons of each option?
As it usually turns out in the real world, the answer isn’t completely black and white and depends on what you need (your requirements) but also what you want (your personal preferences).
The goal of this article is to break these further down and give you an objective, simple framework to follow when choosing a boilerplate starter for your next project. So, let’s get into it!
Why a sudden craze with all these starters? SaaS-es are not a new thing at all
We have all been building web apps and SaaS-es for decades, you may rightfully observe, so why this became a thing just now? It seems like everybody is making their own starter today and getting a ton of excitement (and money) from the community.
The answer is that the complexity of building a SaaS (or in another words, a web app) in the last ten years increased tenfold. Partly it is due to the evolution of the underlying architecture (we switched from monolithic, server-based approach to “rich client ↔ backend”) which introduced more moving parts into the equation, and partly due to the explosion of options for each part of the stack.
If you were about to build a SaaS fifteen years ago, you pretty much knew you’d go with either Ruby on Rails, Laravel, or Django, depending on which language and community you preferred. These would come as a batteries-included solution, give you their best defaults and you’d be up and running in a matter of hour(s). You got a single, well-tested path to follow and not much decisions to make.
If you sit down and try to do the same today, your head would probably get dizzy after a few hour(s) of merely reading about all the possible options you could go with:

What to use for the frontend? Something mainstream as React, Vue or Angular, or something more sexy and bleeding edge like Svelte or Solid?
Should I use a React framework e.g. Next or Remix? Or just go with React + Vite?
Do I need SSR and SSG? Or should I just stick with CSR?
What should I use as an API layer? Good ol’ REST, or maybe GraphQL, or maybe even typesafe RPC?
What to choose for the backend? Do I use something lightweight like Express.js with Node/Bun/Deno or a full-blown solution such as Nest.js/Django/Rails? Or maybe finally try Phoenix/Livewire combo everybody has been talking about? Do I go serverless or not?
What about the database and ORM? Relational or non-relational? Should I write raw queries or use a full-blown ORM such as Drizzle and Prisma? If yes, which one?
What are my hosting options? Am I going to get locked in with a single provider? What if I want/need to host my app somewhere else?

These are just some of the questions you need to start thinking about when deciding how to start your SaaS in 2024. As you can see, it’s more then enough to make your head spin and even if you’re a seasoned developer and makes you feel like you need to be a rocket scientist to figure out the right combination.
This is why people today turn to SaaS boilerplate starters and gladly even pay for it. It means somebody else did the legwork and (hopefully) made a sensible decision on the stack which will remain current and easy to maintain in the years to come.
Now that we gave some context to the sudden rise of SaaS starters, let’s back to the original question - why pay for something when there is an open-source, free version of it? Let’s take a look at some of the factors that come to play.
With an open-source SaaS starter, you know exactly what you’re getting into
By the definition of open-source, you can see and examine the full code of the starter in advance, before committing to using it for your project.
Although it’s not likely you will go through every line of code beforehand and try to understand it all (that’s why you’re looking for a starter in the first place), you can check it out and see how you like it - e.g. the style of the code, readability and how well documented and tested it is.
You can also see the repository’s activity stats - number of open and closed issues, features in progress, commit frequency and how fast are things being resolved and new features added.

Paid, closed-source starters, again by definition, offer at best a fraction of these benefits. You can see the value proposition as the author designed it - some hand-picked testimonials, a demo and potentially have a peek at the docs.
With a paid starter, you become a member of an exclusive tribe (aka Air Jordans Effect)
The most popular paid boilerplates today often come from well-known developers, or “indie makers,” who’ve already built successful products. Buying their boilerplate feels a bit like joining an exclusive club—it’s as if you’re tapping into their expertise and using the same tools they once used to succeed.

It’s like wearing a jersey signed by a famous athlete or a perfume co-created by a pop star. It won’t guarantee instant success, but it gives you a sense of connection and inspiration. You’re reminded that someone else turned these same tools into something great—and that you could do it too!
In the long run, this mindset might matter even more than the tools themselves. When things get hard, feeling part of that “club” could be what keeps you going, and taking your idea one step further.
Security: in open-source, everyone is a reviewer
Paid boilerplate starters are mostly an effort of a single person. It is the type of project that, past the initial development phase, doesn’t require a full-time attention and is more of a seasonal nature (e.g. updating libraries to the latest versions). That makes it a perfect workload for a single person and also makes it much more profitable rather than splitting the margin with the team. If there was a whole team behind, it probably wouldn’t cost $500, but rather $2000.

Recently, there was a security incident with one of the popular paid starters that allowed external parties to send unauthorized web hook requests, which caused a lot of ripples in the online community of builders.
It is a good reminder that, while it’s important to ship quickly, security isn’t something that can be skipped over. And while nobody can guarantee the security of any SaaS starter, be it paid or open-source, the fact is that in open-source projects there are much more people involved in both development and code review. Since the code is freely available, you’re also free to review it yourself, use any pen-testing tools on it or ask another expert to check it before committing to it.
With a paid SaaS starter, the bus factor is 1, with open-source you get the full community support!
A paid SaaS starter typically depends on a single maintainer. Since the code is closed source, nobody else has access nor rights to it, and if for any reason the author becomes unable or unwilling to continue working on it, that’s the end of the story. No support, updates, nor anybody to turn to with questions.
On the other hand, an open-source boilerplate starter like Open SaaS is a living organism, with a number of contributors behind it. As with any open-source project, there will typically be a smaller core team which does the bulk of the work and steers the project (and that might as well be a single person in the start), but anybody can join at any point, and they will. As the project grows and becomes more used, more and more people will start adding fixes and features they need themselves and take ownership of the specific parts.

Another thing to account for is it takes a long time for SaaS starter business to become more than a side income, and only a fraction of builders will ever come to that point. That means most of boilerplate creators will still have a full-time job or other engagements going on. Which means they will have a limited time for customer support and adding new features.
Open-source SaaS starter === unlimited updates. Closed source? Sometimes.
An another direct benefit of the SaaS starter code being open-source is that you will have an immediate access to all the updates, as soon as they get released. That includes both security patches, version bumps and completely new features.

With closed source, it varies a lot from one starter to another. Some offer updates as an upsell (e.g. basic and pro tier), some offer a limited time updates (e.g. 1-year), and some promise a lifetime of updates.

With a paid SaaS starter, you might need to buy a “license” for every new app
Another thing to be aware of is that, with paid starters, there often might be a limit to the number of apps you are allowed to start with a single starter purchase. It is typically phrased in terms of “licenses”, and if you exceed a limit you’re legally required to buy a new one, although you already own the starter code.

Again, this is not the case with all paid starters (some offer unlimited projects with a single purchase), but it is a common pattern worth checking before buying.
With an open-source starter, there naturally isn’t any such limit - the full source code is publicly available and you’re free to use it in any way you see fit.
With an open-source SaaS starter, you can add new features yourself!
One of the most exciting benefits of the open-source approach is that anybody can contribute! If there is a feature you’re missing or want to improve, you can simply do it yourself it and create a pull request. Then, the core maintainers will review it, give advice and point you in the right direction if needed. Once it gets merged, it is available for everyone to use!

Summary
Now that we have gone through the main differences between open-source and paid SaaS starters, let’s give it a bird’s-eye view:
CostLifetime updatesUnlimited appsMaintainersCommunityAir Jordans EffectEasily contributeOpen-source SaaS starter$0YESYESManyBig, publicRarelyYESPaid starter$300+DependsDependsTypically oneSometimes, privateOftenNo
This is a useful list to be aware of when making a decision which route to go, but in the end there is no one answer that will fit all. Your decision will depend on what exactly you’re looking to build and which tech stack you prefer using.
Also, the factors above will not be equally weighted by everyone - one person might be excited about being a part of a wider community and being able to easily contribute to the project, while other most appreciate the fact there is a strong online personality they can follow and get inspired.
In the end, the only important thing is to take action and successfully ship that application you’ve been thinking about for so long. Good luck!   Tags:webdevsaassideproject                   



=== PAGE: https://docs.opensaas.sh/blog/authors/milica/ ===

 Milica | OpenSaaS.sh     


  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                      All posts       Recent posts       My GPT Wrapper Makes $550 MRR One Year After Launch    TurboReel: An Open Source AI Video Generator Built With Open SaaS    Should You Use an Open-source SaaS Boilerplate Starter or a $300+ Paid One?    We Made the Most Annoying Cookie Banners Ever    🍪 THE MOST ANNOYING COOKIE BANNER EVER HACKATHON 🤬    How I Built & Grew CoverLetterGPT to 5,000 Users and $200 MRR          Tags       saas (6)    sideproject (6)    cookie consent (2)    hackathon (2)    indiehacker (2)    webdev (2)    gpt (1)    indiehackers (1)          Authors       Vince (4)    Matija (1)    Milica (1)       RSS         GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    On this page   Overview           Milica      1 post by Milica     TurboReel: An Open Source AI Video Generator Built With Open SaaS     Dec 10, 2024     Milica Growth @ Wasp       Peter is the creator of TurboReel, an open-source platform with a paid SaaS layer, that transforms how creators generate short-form video content. With just a prompt, users can produce polished TikToks and YouTube Shorts in moments.
But like any SaaS founder, Peter faced the challenge of turning his vision into reality without getting bogged down in repetitive technical setup. That’s where Wasp’s Open SaaS boilerplate came in.
In this post, we’ll cover three main things: what inspired Peter to kickstart the project, how he chose the tech stack to build on, and finally, how he made his first $100. Let’s dive in!

The Starting Point: Open SaaS Boilerplate
Peter’s journey to Open SaaS began with a simple Google search for SaaS boilerplates.
“I was looking for something that could save me time,” Peter recalls. “I came across a few options—some were free but basic, and others were paid but didn’t feel worth it. Then I found Wasp’s Open SaaS boilerplate.”
What stood out to Peter wasn’t just that it was free, but that it was open source. “I liked the idea of building on something maintained by a community, not locked behind a paywall”, he says. Intrigued, Peter explored Wasp further and discovered an engaging community that offered exactly what he needed to start building TurboReel.
Here’s a video presenting Open SaaS, generated with TurboReel 🐝

TurboReel’s Tech Stack
TurboReel lets users generate short explainer videos with minimal effort. Starting with a single text prompt describing the video’s purpose (e.g. “Create a video on building your SaaS with OpenSaaS”), you can produce professional grade TikTok and YT shorts without needing any video editing skills.

The platform’s open-source foundation unlocks development potential, while the paid SaaS layer helps with funding.
The tech behind TurboReel looks like this:

Open SaaS - a free, open-source React & Node.js SaaS starter

powered by Wasp, a full stack web framework for JS.
Combines React for the frontend and Node.js for backend.
Prisma handles the database.


OpenAI

Used for generating scripts and scenes in the videos.


Pollinations

Open-source platform for image and text generation.
Provides creative assets to enhance video quality.


Revideo

Library for programmatic video creation.
Replaces the previously used MoviePy.



Building faster with Open SaaS boilerplate

“The first thing that impressed me with Open SaaS was how much time it saved, I could start with wasp new saas and immediately have a functioning boilerplate. It gave me the foundation I needed to focus on my product, not the setup.”

The boilerplate included everything he needed:

Authentication via email, GitHub and Google
Running background jobs via pg-boss
Database management
Frontend-backend communication via a type-safe RPC layer
Deployment of the app with a single CLI command

One feature that particularly stood out was Wasp’s deployment commands.

“Usually, deployment takes time to set up properly, but with Wasp, it was as simple as running wasp deploy fly deploy.”

Here’s what Wasp’s config file looks like, through which you can define full-stack auth in a Wasp app.
Terminal windowapp myApp {  wasp: {    version: "^0.15.0"  },  title: "My App",  auth: {    // 1. Specify the User entity    userEntity: User,    methods: {      // 2. Enable Github Auth      gitHub: {},      email: {        // 3. Specify the email from field        fromField: {          name: "My App Postman",          email: "hello@itsme.com"        },        // 4. Specify the email verification and password reset options        emailVerification: {          clientRoute: EmailVerificationRoute        },        passwordReset: {          clientRoute: PasswordResetRoute        },      },    },    onAuthFailedRedirectTo: "/login"  },}
⭐️ Star Open SaaS repo and support tools that help you build fast!
Out-of-the-box Stripe integration
Another significant advantage for Peter was how Open SaaS handled third-party integrations. Setting up services like Stripe for payments often requires a lot of effort, but Wasp’s OpenSaaS streamlined the process - you just need to add your API key and you’re good to go.

“Payments are usually a huge headache, but Open SaaS made it so smooth. I didn’t have to spend weeks integrating Stripe—it just worked. That gave me more time to focus on TurboReel’s core functionality.”

The power of open source
Both TurboReel and Wasp share a commitment to open source.

“The video generation space is complex. There aren’t many established solutions for what I’m trying to do. By making TurboReel open source, I’m inviting smart people to collaborate and help push the project forward.”

Getting first users

Peter found interesting subreddits on Reddit and shared his product with users. He enabled everyone to sign up and create a few videos, to get feedback quite early. Lots of people in the creator community loved it, and based off of their feedback, he iterated furthermore improving the UI and the workflow.
Within a few days, he was able to get first paying customers, which proved that his MVP was going in the right direction. Plans for the future? The sky is the limit!
Ready to Build Your SaaS?
Get started with Wasp today, or explore the Open SaaS boilerplate to see how it can work for you.   Tags:webdevsaassideprojectindiehackers                   



=== PAGE: https://docs.opensaas.sh/guides/payments-integration/ ===

 Payments Integration | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Important First Steps    Stripe     Get your test Stripe API Keys    Create Test Products    Create a Test Customer    Set up the Customer Portal    Install the Stripe CLI    Testing Webhooks via the Stripe CLI    Testing Checkout and Payments via the Client      Lemon Squeezy     Get your test Lemon Squeezy API Keys    Get your Lemon Squeezy Store ID    Create Test Products    Create and Use the Lemon Squeezy Webhook in Local Development      Deploying    On this page   Overview    Important First Steps    Stripe     Get your test Stripe API Keys    Create Test Products    Create a Test Customer    Set up the Customer Portal    Install the Stripe CLI    Testing Webhooks via the Stripe CLI    Testing Checkout and Payments via the Client      Lemon Squeezy     Get your test Lemon Squeezy API Keys    Get your Lemon Squeezy Store ID    Create Test Products    Create and Use the Lemon Squeezy Webhook in Local Development      Deploying         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Payments Integration      This guide will show you how to set up Payments for testing and local development with the following payment processors:

Stripe
Lemon Squeezy

Which should I choose?Stripe is the industry standard, is more configurable, and has cheaper fees.
Lemon Squeezy acts a Merchant of Record. This means they take care of paying taxes in multiple countries for you, but charge higher fees per transaction.
Important First Steps
First, go to /src/payment/paymentProcessor.ts and choose which payment processor you’d like to use, e.g. Stripe or Lemon Squeezy:
src/payment/paymentProcessor.tsimport { stripePaymentProcessor } from './stripe/paymentProcessor';import { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';//...
export const paymentProcessor: PaymentProcessor = stripePaymentProcessor;// or...export const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;
At this point, you can delete:

the unused payment processor code within the /src/payment/<unused-provider> directory,
any unused environment variables from .env.server (they will be prefixed with the name of the provider your are not using):

e.g. STRIPE_API_KEY, STRIPE_CUSTOMER_PORTAL_URL, LEMONSQUEEZY_API_KEY, LEMONSQUEEZY_WEBHOOK_SECRET


Make sure to also uninstall the unused dependencies:

npm uninstall @lemonsqueezy/lemonsqueezy.js
or
npm uninstall stripe


Remove any unused fields from the User model in the schema.prisma file if they exist:

e.g. lemonSqueezyCustomerPortalUrl



Now your code is ready to go with your preferred payment processor and it’s time to configure your payment processor’s API keys, products, and other settings.
Stripe
First, you’ll need to create a Stripe account. You can do that here.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Get your test Stripe API Keys
Once you’ve created your account, you’ll need to get your test API keys. You can do that by navigating to https://dashboard.stripe.com/test/apikeys or by going to the Stripe Dashboard and clicking on the Developers.


Click on the Reveal test key token button and copy the Secret key.
Paste it in your .env.server file under STRIPE_API_KEY=

Create Test Products
To create a test product, go to the test products url https://dashboard.stripe.com/test/products, or after navigating to your dashboard, click the test mode toggle.


Click on the Add a product button and fill in the relevant information for your product.
Make sure you select Software as a service (SaaS) as the product type.
For Subscription products, make sure you select Recurring as the billing type.
For One-time payment products, make sure you select One-time as the billing type.
If you intend to let your users switch between two subscription plans, e.g. upgrade from hobby to pro, you’ll need to create two separate products and with their own price IDs. The ability for users to swich plans can then be configured later in the Customer Portal.
If you want to add different price tiers for the same product (e.g. monthly and yearly), click the Add another price button at the buttom.



After you save the product, you’ll be directed to the product page.
Copy the price IDs and paste them in the .env.server file

We’ve set you up with two example subscription product environment variables, PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID= and PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID=.
As well as a one-time payment product/credits-based environment variable, PAYMENTS_CREDITS_10_PLAN_ID=.


Note that if you change the names of the price IDs, you’ll need to update your server code to match these names as well

Create a Test Customer
To create a test customer, go to the test customers url https://dashboard.stripe.com/test/customers.

Click on the Add a customer button and fill in the relevant information for your test customer.

NoteWhen filling in the test customer email address, use an address you have access to and will use when logging into your SaaS app. This is important because the email address is used to identify the customer when creating a subscription and allows you to manage your test user’s payments/subscriptions via the test customer portal
Set up the Customer Portal
Go to https://dashboard.stripe.com/test/settings/billing/portal in the Stripe Dashboard and activate and copy the Customer portal link. Paste it in your .env.server file:
.env.serverSTRIPE_CUSTOMER_PORTAL_URL=<your-test-customer-portal-link>
If you’d like to give users the ability to switch between different plans, e.g. upgrade from a hobby to a pro subscription, go down to the Subscriptions dropdown and select customers can switch plans.

Then select the products you’d like them to be able to switch between.
Now, after your users have paid, they can click on Manage Subscription in the client and will be taken to the customer portal where they can update their current plan.
Install the Stripe CLI
To install the Stripe CLI with homebrew, run the following command in your terminal:
Terminal windowbrew install stripe/stripe-cli/stripe
or for other install scripts or OSes, follow the instructions here.
Now, let’s start the webhook server and get our webhook signing secret.
First, login:
Terminal windowstripe login
Errors running the Stripe CLIIf you’re seeing errors, consider appending sudo to the stripe commands.
See this GitHuh issue for more details.
Terminal windowstripe listen --forward-to localhost:3001/payments-webhook
You should see a message like this:
Terminal window> Ready! You are using Stripe API Version [2023-08-16]. Your webhook signing secret is whsec_8a... (^C to quit)
copy this secret to your .env.server file under STRIPE_WEBHOOK_SECRET=.
Testing Webhooks via the Stripe CLI

In a new terminal window, run the following command:

Terminal windowstripe login

start the Stripe CLI webhook forwarding on port 3001 where your Node server is running.

Terminal windowstripe listen --forward-to localhost:3001/payments-webhook
Webhook URLIn older versions of this template, the webhook URL was http://localhost:3001/stripe-webhook.
If you’re using an older version, make sure to use the url that matches the webhook url in your main.wasp file payemnts API definition.
remember to copy and paste the outputted webhook signing secret (whsec_...) into your .env.server file under STRIPE_WEBHOOK_SECRET= if you haven’t already.

In another terminal window, trigger a test event:

Terminal windowstripe trigger payment_intent.succeeded
The results of the event firing will be visible in the initial terminal window. You should see messages like this:
Terminal window...2023-11-21 09:31:09   --> invoice.paid [evt_1OEpMPILOQf67J5TjrUgRpk4]2023-11-21 09:31:09  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMPILOQf67J5TjrUgRpk4]2023-11-21 09:31:10   --> invoice.payment_succeeded [evt_1OEpMPILOQf67J5T3MFBr1bq]2023-11-21 09:31:10  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMPILOQf67J5T3MFBr1bq]2023-11-21 09:31:10   --> checkout.session.completed [evt_1OEpMQILOQf67J5ThTZ0999r]2023-11-21 09:31:11  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMQILOQf67J5ThTZ0999r]
For more info on testing webhooks, check out https://stripe.com/docs/webhooks#test-webhook
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Testing Checkout and Payments via the Client
Make sure the Stripe CLI is running by following the steps above.
You can then test the payment flow via the client by doing the following:


Click on a Buy button on the for any of the products on the homepage. You should be redirected to the checkout page.


Fill in the form with the following test credit card number 4242 4242 4242 4242 and any future date for the expiration date and any 3 digits for the CVC.


Click on the “Pay” button. You should be redirected to the success page.


Check your terminal window for status messages and logs


You can also check your Database via the DB Studio to see if the user entity has been updated by running:


Terminal windowwasp db studio


Navigate to localhost:5555 and click on the users table. You should see the subscriptionStatus is active for the user that just made the purchase.

NoteIf you want to learn more about how a user’s payment status, subscription status, and subscription tier affect a user’s priveledges within the app, check out the User Overview reference.
Lemon Squeezy
First, make sure you’ve defined your payment processor in src/payment/paymentProcessor.ts, as described in the important first steps.
Next, you’ll need to create a Lemon Squeezy account in test mode. You can do that here.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Get your test Lemon Squeezy API Keys
Once you’ve created your account, you’ll need to get your test API keys. You can do that by navigating to https://app.lemonsqueezy.com/settings/api and creating a new API key.

Click on the + button
Give your API key a name
Copy and paste it in your .env.server file under LEMONSQUEEZY_API_KEY=

Get your Lemon Squeezy Store ID

To get your store ID, go to the Lemon Squeezy Dashboard and copy the Store ID from the top right corner.
Copy and paste this number in your .env.server file under LEMONSQUEEZY_STORE_ID=
Create Test Products
To create a test product, go to the test products url https://app.lemonsqueezy.com/products.

Click on the + New Product button and fill in the relevant information for your product.
Fill in the general information.
For pricing, select the type of product you’d like to create, e.g. Subscription for a recurring monthly payment product or  Single Payment for credits-based product.



Make sure you select Software as a service (SaaS) as the Tax category type.
If you want to add different price tiers for Subscription products, click on add variant under the variants tab. Here you can input the name of the variant (e.g. “Hobby”, “Pro”), and that variant’s price.



For a product with no variants, on the product page, click the ... menu button and select Copy variant ID



For a product with variants, on the product page, click on the product, go to the variants tab and select Copy ID for each variant.



Paste these IDs in the .env.server file:

We’ve set you up with two example subscription product environment variables, PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID= and PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID=.
As well as a one-time payment product/credits-based environment variable, PAYMENTS_CREDITS__10_PLAN_ID=.


Note that if you change the names of the these environment variables, you’ll need to update your app code to match these names as well.

Create and Use the Lemon Squeezy Webhook in Local Development
Lemon Squeezy sends messages/updates to your Wasp app via its webhook, e.g. when a payment is successful. For that to work during development, we need to expose our locally running (via wasp start) Wasp app and make it available online, specifically the server part of it. Since the Wasp server runs on port 3001, you should run ngrok on port 3001, which will provide you with a public URL that you can use to configure Lemon Squeezy with.
To do this, first make sure you have installed ngrok.
Once installed, and with your wasp app running, run:
Terminal windowngrok http 3001

Ngrok will output a forwarding address for you. Copy and paste this address and add /payments-webhook to the end (this URL path has been configured for you already in main.wasp under the api paymentsWebhook definition). It should look something like this:
Callback URLhttps://89e5-2003-c7-153c-72a5-f837.ngrok-free.app/payments-webhook
Now go to your Lemon Squeezy Webhooks Dashboard:

click the + button.
add the newly created webhook forwarding url to the Callback URL section.
give your webhook a signing secret (a long, random string).
copy and paste this same signing secret into your .env.server file under LEMONSQUEEZY_WEBHOOK_SECRET=
make sure to select at least the following updates to be sent:

order_created
subscription_created
subscription_updated
subscription_cancelled


click save

You’re now ready to start consuming Lemon Squeezy webhook events in local development.
Deploying
Once you deploy your app, you can follow the same steps, just make sure that you are no longer in test mode within the Stripe or Lemon Squeezy Dashboards. After you’ve repeated the steps in live mode, add the new API keys and price/variant IDs to your environment variables in your deployed environment.     Edit page      Previous  File Uploading      Next  SEO            



=== PAGE: https://docs.opensaas.sh/start/getting-started/ ===

 Getting Started | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Install Wasp     Pre-requisites    Linux and macOS    Windows    Finalize Installation      Setting up your SaaS app     Cloning the OpenSaaS template    Start your DB    Start your app      What’s next?    On this page   Overview    Install Wasp     Pre-requisites    Linux and macOS    Windows    Finalize Installation      Setting up your SaaS app     Cloning the OpenSaaS template    Start your DB    Start your app      What’s next?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Getting Started      This guide will help you get your new SaaS app up and running.
If you prefer video tutorials, you can watch this walkthrough below which will guide you through most of the setup (installation, authentication, payments, etc.). If you get stuck at any point, you can refer back to these docs for more information.


Install Wasp
Pre-requisites
You must have Node.js (and NPM) installed on your machine and available in PATH to use Wasp.
Your version of Node.js must be >= 18.
To switch easily between Node.js versions, we recommend using nvm.
Installing and using nvmNeed help with nvm?Install nvm via your OS package manager (apt, pacman, homebrew, …) or via the nvm install script.Then, install a version of Node.js that you need:Terminal windownvm install 20Finally, whenever you need to ensure a specific version of Node.js is used, run:Terminal windownvm use 20to set the Node.js version for the current shell session.You can runTerminal windownode -vto check the version of Node.js currently being used in this shell session.Check NVM repo for more details: https://github.com/nvm-sh/nvm.
Linux and macOS
Open your terminal and run:
Terminal windowcurl -sSL https://get.wasp-lang.dev/installer.sh | sh
Bad CPU type in executableAre you getting this error on a Mac (Apple Silicon)?Given that the wasp binary is built for x86 and not for arm64 (Apple Silicon), you’ll need to install Rosetta on your Mac if you are using a Mac with Mx (M1, M2, …). Rosetta is a translation process that enables users to run applications designed for x86 on arm64 (Apple Silicon). To install Rosetta, run the following command in your terminalTerminal windowsoftwareupdate --install-rosettaOnce Rosetta is installed, you should be able to run Wasp without any issues.
Windows
In order to use Wasp on Windows, you need to install WSL2 (Windows Subsystem for Linux) and a Linux distribution of your choice. We recommend using Ubuntu.
You can refer to this article for a step by step guide to using Wasp in the WSL environment. If you need further help, reach out to us on Discord.
Once in WSL2, run the following command in your WSL2 environment:
Terminal windowcurl -sSL https://get.wasp-lang.dev/installer.sh | sh
WSL2 and file system issuesAre you getting file system issues using WSL2?If you are using WSL2, make sure that your Wasp project is not on the Windows file system, but instead on the Linux file system. Otherwise, Wasp won’t be able to detect file changes, due to this issue in WSL2.
Finalize Installation
Run the following command to verify that Wasp was installed correctly:
Terminal windowwasp version
Also be sure to install the Wasp VSCode extension to get the best DX, e.g. syntax highlighting, code scaffolding, autocomplete, etc.
Installing the Wasp VSCode ExtensionYou can install the Wasp VSCode extension by searching for “Wasp” in the Extensions tab in VSCode, or by visiting the 🐝 Wasp VSCode Extension 🧑‍💻 homepage
Setting up your SaaS app
Cloning the OpenSaaS template
From the directory where you’d like to create your new project run:
Terminal windowwasp new
Then select option [3] saas from the list of templates after entering the name of your project.
This will clone a clean copy of the Open SaaS template into a new directory! 🎉
Start your DB
Before you start your app, you need to have a Postgres Database connected and running. With Wasp, that’s super easy!
First, make sure you have Docker installed and running. If not, download and install it here
With Docker running, open a new terminal window/tab and position yourself in the app directory:
Terminal windowcd app
Then run:
Terminal windowwasp start db
This will start and connect your app to a Postgres database for you. No need to do anything else! 🤯 Just make sure to leave this terminal window open in the background while developing. Once you terminate the process, your DB will no longer be available to your app.
Now let’s create our very first database migration, to ensure the database has a correct schema. Open a new terminal tab/window and run the following command:
Terminal windowwasp db migrate-dev
This might take a bit since this is the first time you are running it and it needs to install all the
dependencies for your Wasp project.
In the future, you will also want to run wasp db migrate-dev whenever you make changes to your Prisma schema (Entities),
to apply those schema changes to the database.
Additionally, if you want to see or manage your DB via Prisma’s DB Studio GUI, run:
Terminal windowwasp db studio
Start your app
At this point, you should be positioned in the app/ directory and have the database running in another terminal session.
Next, copy the .env.server.example file to .env.server.
Terminal windowcp .env.server.example .env.server
.env.server is where API keys for services like payments, email sender, and similar go, and this is where you will want to put them in later.
For now, you can leave it as it is (dummy API keys), this will be enough to run the app.
Then run:
Terminal windowwasp start
This will install all the dependencies and start the app (client and server) for you :)!
If the app doesn’t open automatically in your browser, you can open it manually by visiting http://localhost:3000 in your browser.
At this point, you should have:

your database running in one terminal session, likely on port 5432.
your app running in another terminal session, the client likely on port 3000, and the server likely on port 3001.

Run Blog and Docs
This SaaS app comes with a docs and blog section built with the Starlight template on top of the Astro framework. You can use this as a starting point for your own blog and documentation, if necessary.
If you do not need this, you can simply delete the blog folder from the root of the project.
If you want to run the Starlight docs and blog, first navigate to the blog folder:
Terminal windowcd ../blog
Then run:
Terminal windownpm install
Then start the development server:
Terminal windownpm run dev
Check the instructions in the terminal for the link to open the blog, it will typically be https://localhost:4321/.
What’s next?
Awesome! We have our new app ready and we know how to run both it and the blog/docs! Now, in the next section, we’ll give you a quick “guided tour” of the different parts of the app we created and understand how it works.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub     Edit page      Previous  Introduction      Next  Guided Tour            



=== PAGE: https://docs.opensaas.sh/start/guided-tour/ ===

 Guided Tour | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Getting acquainted with the codebase     App File Structure    The Wasp Config file    Client    Server      Main Features     Auth    Subscription Payments with Stripe or Lemon Squeezy    Analytics and Admin Dashboard      App Customization Walkthrough     General Considerations    Customizations Checklist      What’s next?    On this page   Overview    Getting acquainted with the codebase     App File Structure    The Wasp Config file    Client    Server      Main Features     Auth    Subscription Payments with Stripe or Lemon Squeezy    Analytics and Admin Dashboard      App Customization Walkthrough     General Considerations    Customizations Checklist      What’s next?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Guided Tour      Awesome, you now have your very own SaaS app up and running! But, first, here are some important things you need to know about your app in its current state:

When signing up with a new user, you will get a message to check your email for a verification link. But, in development, these emails are simply written to your terminal. So, to continue with the registration process, check your server logs after sign up!

server logs[ Server ] ╔═══════════════════════╗[ Server ] ║ Dummy email sender ✉️  ║[ Server ] ╚═══════════════════════╝[ Server ] From:    Open SaaS App <me@example.com>[ Server ] To:      vinny@wasp.sh[ Server ] Subject: Verify your email[ Server ] ═════════ Text ═════════[ Server ] Click the link below to verify your email: http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw[ Server ] ═════════ HTML ═════════[ Server ] <p>Click the link below to verify your email</p>[ Server ] <a href="http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw">Verify email</a>[ Server ] ════════════════════════

Your app is still missing some key configurations (e.g. API keys for Payment Processors, OpenAI, AWS S3, Auth, Analytics). These services won’t work at the moment, but don’t fear, because we’ve provided detailed guides in these docs to help you set up all the services in this template.
If you want to get a feel for what your SaaS could look like when finished, check out OpenSaaS.sh in your browser. It was built using this template! So make sure to log in, play around with the demo app, make a test payment, and check out the admin dashboard.

In the sections below, we will take a short guide through the codebase and the app’s main features. Then at the end of this tour, we also prepared a checklist of likely changes you will want to make to the app to make it your own.
We’re looking forward to seeing what you build!
Getting acquainted with the codebase
Now that you’ve gotten a first look at the app, let’s dive into the codebase.
At the root of our project, you will see three folders:
Terminal window.├── app├── blog└── e2e-tests
app contains the Wasp project files, which is your full-stack React + NodeJS + Prisma app along with a Wasp config file, main.wasp, which will be explained in more detail below.
blog contains the Astro Starlight template for the blog and documentation section.
e2e-tests contains the end-to-end tests using Playwright, which you can run to test your app’s functionality.
App File Structure
We’ve structured this full-stack app template vertically (by feature). That means that most directories within app/src contain both the React client code and NodeJS server code necessary for implementing its logic.
Let’s check out what’s in the app folder in more detail:
v0.13 and belowIf you are using an older version of the OpenSaaS template with Wasp v0.13.x or below, you may see a slightly different file structure. But don’t worry, the vast majority of the code and features are the same! 😅
Terminal window.├── main.wasp              # Wasp Config file. You define your app structure here.├── .wasp/                 # Output dir for Wasp. DON'T MODIFY THESE FILES!├── public/                # Public assets dir, e.g. www.yourdomain.com/public-banner.webp├── src/                   # Your code goes here.│   ├── admin/             # Admin dashboard related pages and components.│   ├── analytics/         # Logic and background jobs for processing analytics.│   ├── auth/              # All auth-related pages/components and logic.│   ├── client/            # Shared components, hooks, landing page, and other client code (React).│   ├── demo-ai-app/       # Logic for the example AI-powered demo app.│   ├── file-upload/       # Logic for uploading files to S3.│   ├── landing-page       # Landing page related code│   ├── messages           # Logic for app user messages.│   ├── newsletter/        # Logic for scheduled recurring newsletter sending.│   ├── payment/           # Logic for handling payments and webhooks.│   ├── server/            # Scripts, shared server utils, and other server-specific code (NodeJS).│   ├── shared/            # Shared constants and util functions.│   └── user/              # Logic related to users and their accounts.├── .env.server            # Dev environment variables for your server code.├── .env.client            # Dev environment variables for your client code.├── .prettierrc            # Prettier configuration.├── tailwind.config.js     # TailwindCSS configuration.├── package.json├── package-lock.json└── .wasproot
The Wasp Config file
This template at its core is a Wasp project, where Wasp is a full-stack web app framework that let’s you write your app in React, NodeJS, and Prisma and will manage the “boilerplatey” work for you, allowing you to just take care of the fun stuff!
Wasp’s secret sauce is its use of a config file (main.wasp) and compiler which takes your code and outputs the client app, server app and deployment code for you.
In this template, we’ve already defined a number of things in the main.wasp config file, including:

Auth
Routes and Pages
Prisma Database Models
Operations (data read and write functions)
Background Jobs
Email Sending

By defining these things in the config file, Wasp continuously handles the boilerplate necessary with putting all these features together. You just need to focus on the business logic of your app.
Wasp abstracts away some things that you would normally be used to doing during development, so don’t be surprised if you don’t see some of the things you’re used to seeing.
NoteIt’s possible to learn Wasp’s feature set simply through using this template, but if you find yourself unsure how to implement a Wasp-specific feature and/or just want to learn more, a great starting point is the intro tutorial in the Wasp docs which takes ~20 minutes.
Client
The src/client folder contains any additional client-side code that doesn’t belong to a feature:
Terminal window.└── client    ├── components         # Your shared React components.    ├── fonts              # Extra fonts    ├── hooks              # Your shared React hooks.    ├── icons              # Your shared SVG icons.    ├── static             # Assets that you need access to in your code, e.g. import logo from 'static/logo.png'    ├── App.tsx            # Main app component to wrap all child components. Useful for global state, navbars, etc.    ├── cn.ts              # Helper function for dynamic and conditional Tailwind CSS classes.    └── Main.css
Server
The src/server folder contains any additional server-side code that does not belong to a specific feature:
Terminal window└── server    ├── scripts            # Scripts to run via Wasp, e.g. database seeding.    └── utils.ts
Main Features
Auth
This template comes with a fully functional auth flow out of the box. It takes advantages of Wasp’s built-in Auth features, which do the dirty work of rolling your own full-stack auth for you!
main.wasp  auth: {    userEntity: User,    methods: {      email: {        //...      },      google: {},      github: {},      discord: {}    },    onAuthFailedRedirectTo: "/",  },
By defining the auth structure in your main.wasp file, Wasp manages all the necessary code for you, including:

Email verified login with reset password
Social login with Google and/or GitHub
Auth-related database entities for user credentials, sessions, and social logins
Custom-generated AuthUI components for login, signup, and reset password
Auth hooks for fetching user data


We’ve set the template up with Wasp’s email, google, and gitHub methods, which are all battle-tested and suitable for production.
You can get started developing your app with the email method right away!
Dummy Email ProviderNote that the email method relies on an emailSender (configured at app.emailSender in the main.wasp file), a service which sends emails to verify users and reset passwords.For development purposes, Wasp provides a Dummy email sender which Open SaaS comes with as the default. This provider does not actually send any confirmation emails to the specified email address, but instead logs all email verification links/tokens to the console! You can then follow these links to verify the user and continue with the sign-up process.main.wasp  emailSender: {    provider: Dummy, // logs all email verification links/tokens to the server's console    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },
We will explain more about these auth methods, and how to properly integrate them into your app, in the Authentication Guide.
Subscription Payments with Stripe or Lemon Squeezy
No SaaS is complete without payments, specifically subscription payments. That’s why this template comes with a fully functional Stripe or Lemon Squeezy integration.
Let’s take a quick look at how payments are handled in this template.

a user clicks the BUY button and a Checkout session is created on the server
the user is redirected to the Checkout page where they enter their payment info
the user is redirected back to the app and the Checkout session is completed
Stripe / Lemon Squeezy sends a webhook event to the server with the payment info
The app server’s webhook handler handles the event and updates the user’s subscription status

The payment processor you choose (Stripe or Lemon Squeezy) and its related functions can be found at src/payment/paymentProcessor.ts. The Payment Processor object holds the logic for creating checkout sessions, webhooks, etc.
The logic for creating the Checkout session is defined in the src/payment/operation.ts file. Actions are a type of Wasp Operation, specifically your server-side functions that are used to write or update data to the database. Once they’re defined in the main.wasp file, you can easily call them on the client-side:
a) define the action in the main.wasp file
main.waspaction generateCheckoutSession {  fn: import { generateCheckoutSession } from "@src/payment/operations",  entities: [User]}
b) implement the action in the src/payment/operations file
src/server/actions.tsexport const generateCheckoutSession = async (paymentPlanId, context) => {  //... }
c) call the action on the client-side
src/client/app/SubscriptionPage.tsximport { generateCheckoutSession } from "wasp/client/operations";
const handleBuyClick = async (paymentPlanId) => {  const checkoutSession = await generateCheckoutSession(paymentPlanId);};
The webhook handler is defined in the src/payment/webhook.ts file. Unlike Actions and Queries in Wasp which are only to be used internally, we define the webhook handler in the main.wasp file as an API endpoint in order to expose it externally to Stripe
main.waspapi paymentsWebhook {  fn: import { paymentsWebhook } from "@src/payment/webhook",  httpRoute: (POST, "/payments-webhook")  entities: [User],}
Within the webhook handler, we look for specific events that the Payment Processor sends us to let us know which payment was completed and for which user. Then we update the user’s subscription status in the database.
To learn more about configuring the app to handle your products and payments, check out the Payments Integration guide.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Analytics and Admin Dashboard
Keeping an eye on your metrics is crucial for any SaaS. That’s why we’ve built an administrator’s dashboard where you can view your app’s stats, user data, and revenue all in one place.

To do that, we’ve leveraged Wasp’s Jobs feature to run a cron job that calculates your daily stats. The app stats, such as page views and sources, can be pulled from either Plausible or Google Analytics. All you have to do is create a project with the analytics provider of your choice and import the respective pre-built helper functions!
main.waspjob dailyStatsJob {  executor: PgBoss,  perform: {    fn: import { calculateDailyStats } from "@src/analytics/stats"  },  schedule: {    cron: "0 * * * *" // runs every hour  },  entities: [User, DailyStats, Logs, PageViewSource]}
For more info on integrating Plausible or Google Analytics, check out the Analytics guide.
App Customization Walkthrough
General Considerations
When you first start your Open SaaS app straight from the template, it will run, but many of the services won’t work because they lack your own API keys. Here are list of services that need your API keys to work properly:

Auth Methods (Google, GitHub)
Stripe or Lemon Squeezy
OpenAI (Chat GPT API)
Email Sending (Sendgrid) — you must set this up if you’re using the email Auth method
Analytics (Plausible or Google Analytics)
File Uploading (AWS S3)

Now would be a good time to decide which features you do and do not need for your app, and remove the ones from the codebase that you don’t need.
For the features you will use, the next section of the documentation, Guides, will walk you through how to set each one up!
Open SaaS is built on WaspRemember, this template is built on the Wasp framework. If, at any time, these docs fail to provide enough information about a certain built-in feature, make sure to check out the Wasp docs!
But before you start setting up the main features, let’s walk through the customizations you will likely want to make to the template to make it your own.
Customizations Checklist
main.wasp Config File

 Change the app name and title:
main.wasp  app YourAppName {    wasp: {      version: "^0.13.2"    },
    title: "Your App Name",
Restart Your AppUpon changing the app name, new, empty development database will be assigned to your app. This means you’ll need to rerun wasp db start, wasp db migrate-dev and wasp start.

 Update meta tags in app.head (even if you don’t have a custom domain yet, put one you would like to have, as this won’t affect development).
 Update app.emailSender.defaultFrom.name with the name of your app/company/whatever you want your users to see in their inbox, if you’re using the emailSender feature and/or email Auth method.
 Remove any features you might not use or need:

 Auth methods - app.auth.methods

 If you’re not using email Auth method, remove the routes/pages RequestPasswordReset, PasswordReset, and EmailVerification


 Email Sending - app.emailSender, job emailChecker
 Plausible analytics - app.head
 File Uploading - entity File, route FileUploadRoute, action createFile, query getAllFilesByUser, getDownloadFileSignedURL


 Rename Entites and their properties, Routes/Pages, & Operations, if you wish.

Customizing the Look / Style of the App

 Update your favicon at public/favicon.ico.
 Update the banner image used when posting links to your site at public/public-banner.webp.

 Update the URL for this banner at og:image and twitter:image in app.head of the main.wasp file.


 Make changes to your landing page, landingPage.tsx.

 Customize the navBar, features, testimonials, and faqs in the contentSections.ts file.
 Change/rename the logo.webp and main hero banner (open-saas-banner.webp) in the static folder.


 If you want to make changes to the global styles of the app, you can do so in tailwind.config.cjs. Be aware that the current custom global styles defined already are mostly used in the app’s Admin Dashboard!

Customizing the Analytics & Admin Dashboard

 If you’re using Plausible, update the app.head with your Plausible domain.
 Update the calculateDailyStats function in src/server/workers/calculateDailyStats.ts to pull the stats from the analytics provider you’ve chosen (Plausible or Google Analytics).
 Change the cron schedule in the dailyStatsJob in the main.wasp file to match how often you want your stats to be calculated.
 Update the AdminDashboard components to display the stats you do/don’t want to see.

.env.server and .env.client Files

 After you’ve followed the Guides in the next section, you’ll need to update the .env.server and .env.client files with your API keys and other environment variables for the services you’ve decided to use.
 Delete any redundant environment variables that you’re not using, from the .env.* files as well as the .env.*.example files.

Other Customizations

 Make a new GitHub Repo for your app.
 Deploy your app to a hosting provider.
 Buy a domain name for your app and get it set up with your hosting provider.
 Read the e2e-tests README and get your end-to-end tests set up.

 Change the tests to suit the changes you’ve made to your app


 Get the CI pipeline set up for your app (you can get started by using the Open SaaS development CI example here)

What’s next?
In the following Guides sections, we’ll walk you through getting those API keys and setting up the finer points of features such as Payments & Webhooks, Auth, Email Sending, Analytics, and more.     Edit page      Previous  Getting Started      Next  Analytics            



=== PAGE: https://docs.opensaas.sh/guides/analytics/ ===

 Analytics | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog    On this page   Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Analytics      This guide will show you how to integrate analytics for your app. You can choose between Google Analytics and Plausible.
Google Analytics is free, but uses cookies, so you’ll probably want/need to implement the Cookie Consent Modal when using it.
Plausible is an open-source, privacy-friendly alternative to Google Analytics. You DO NOT have to use the cookie consent modal with Plausible, as it does not use cookies. It’s also easier to use than Google if you use their hosted service, but be aware it is a paid feature. It is completely free if you want to self-host it, although this comes with some additional setup steps.
If you’re looking to add analytics to your blog, you can follow the Adding Analytics to your Blog section at the end of this guide.
Plausible
Hosted Plausible
Sign up for a hosted Plausible account here.
Once you’ve signed up, you’ll be taken to your dashboard. Create your site by adding your domain. Your domain is also your PLAUSIBLE_SITE_ID in your .env.server file. Make sure to add it.
Terminal windowPLAUSIBLE_SITE_ID=<your domain without www>
After adding your domain, you’ll be taken to a page with your Plausible script tag. Copy and paste this script tag into the main.wasp file’s head section.
app OpenSaaS {  wasp: {    version: "^0.13.0"  },  title: "My SaaS App",  head: [        "<your plausible script tag here>",  ],  //...
Go back to your Plausible dashboard, click on your username in the top right, and click on the Settings tab. Scroll down, find your API key and paste it into your .env.server file under the PLAUSIBLE_API_KEY variable.
No CookiesPlausible does not use cookies, so you don’t need to add it to your Cookie Consent Modal, hence the script can be added directly to app.head in your main.wasp file.
Self-hosted Plausible
Plausible, being an open-source project, allows you to self-host your analytics. This is a great option if you want to keep your data private and not pay for the hosted service.
coming soon…
until then, check out the official documentation
Contribute!If you’d like to help us write this guide, click the “Edit page” button at the bottom of this pageAs a completely free, open-source project, we appreciate any help 🙏
Google Analytics
First off, head over to src/analytics/stats.ts and switch out the Plausible Provider for Google Analytics so that your background (cron) job fetches the data from Google Analytics for your Admin Dashboard:
stats.ts//...import { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';
export const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {  //...}
Next, make sure you sign up for Google analytics, then go to your Admin panel in the bottom of the left sidebar and then create a “Property” for your app.
Once you’ve created a new Property, some Installation Instructions will pop up. Select install manually where you should see a string that looks like this:
<your-google-analytics-id> https://www.googletagmanager.com/gtag/js?id=<your-google-analytics-id>
and copy and paste the Google Analytics ID into your .env.client file to get it working with the Cookie Consent Modal provided with this template:
.env.clientREACT_APP_GOOGLE_ANALYTICS_ID=<your-google-analytics-id> # e.g. G-1234567890
noscriptIn the Installation Instructions, Google Tag Manager might also instruct you to paste the noscript code snippet immediately after the opening <body> tag.
You should skip this step because this snippet is activated only if users try to browse your app without JavaScript enabled, which is very rare and Wasp needs JS anyway.
Then, set up the Google Analytics API access by following these steps:


Set up a Google Cloud project: If you haven’t already, start by setting up a project in the Google Cloud Console.


Enable the Google Analytics API for your project: Navigate to the “Library” in the Google Cloud Console and search for the “Google Analytics Data API” (for Google Analytics 4 properties) and enable it.


Create credentials: Now go to the “Credentials” tab within your Google Cloud project, click on + credentials, and create a new service account key. First, give it a name. Then, under “Grant this service account access to project”, choose viewer.


Create Credentials: When you go back to Credentials page, you should see a new service account listed under “Service Accounts”. It will be a long email address to ends with @your-project-id.iam.gserviceaccount.com. Click on the service account name to go to the service account details page.


Under “Keys” in the service account details page, click “Add Key” and choose Create new key.


Select “JSON”, then click “Create” to download your new service account’s JSON key file. Keep this file secure and don’t add it to your git repo – it grants access to your Google Analytics data.




Update your Google Anayltics Settings: Go back to your Google Analytics dashboard, and click on the Admin section in the left sidebar. Under Property Settings > Property > Property Access Management Add the service account email address (the one that ends with @your-project-id.iam.gserviceaccount.com) and give it Viewer permissions.


Encode and add the Credentials: Add the client_email and the private_key from your JSON Key file into your .env.server file. But be careful! Because Google uses a special PEM private key, you need to first convert the key to base64, otherwise you will run into errors parsing the key. To do this, in a terminal window, run the command below and paste the output into your .env.server file under the GOOGLE_ANALYTICS_PRIVATE_KEY variable:
Terminal windowecho -n "-----BEGIN PRIVATE KEY-----\nMI...A++eK\n-----END PRIVATE KEY-----\n" | base64


Add your Google Analytics Property ID: You will find the Property ID in your Google Analytics dashboard in the Admin > Property > Property Settings > Property Details section of your Google Analytics property (not your Google Cloud console). Add this 9-digit number to your .env.server file under the GOOGLE_ANALYTICS_PROPERTY_ID variable.


Adding Analytics to your Blog
To add your analytics script to your Astro Starlight blog, all you need to do is modify the head property in your blog/astro.config.mjs file.
Below is an example of how to add Google Analytics to your blog:
export default defineConfig({  site: 'https://opensaas.sh',  integrations: [    starlightBlog({      // ...    }),    starlight({      //...       head: [        {          tag: 'script',          attrs: {            src: 'https://www.googletagmanager.com/gtag/js?id=<YOUR-GOOGLE-ANALYTICS-ID>',          },        },        {          tag: 'script',          content: `          window.dataLayer = window.dataLayer || [];          function gtag(){dataLayer.push(arguments);}          gtag('js', new Date());
          gtag('config', '<YOUR-GOOGLE-ANALYTICS-ID>');          `,        },      ],     Edit page      Previous  Guided Tour      Next  Authentication            



=== PAGE: https://docs.opensaas.sh/guides/authentication/ ===

 Authentication | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Email Verified Auth    Google, GitHub, & Discord Auth    On this page   Overview    Email Verified Auth    Google, GitHub, & Discord Auth         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Authentication      Setting up your app’s authentication is easy with Wasp. In fact, it’s already set up for you in the main.wasp file:
main.wasp  auth: {    userEntity: User,    methods: {      email: {},      google: {},      gitHub: {},      discord: {}    },    onAuthFailedRedirectTo: "/",  },
The great part is, by defining your auth config in the main.wasp file, Wasp manages most of the Auth process for you, including the auth-related database entities for user credentials and sessions, as well as auto-generated client components for your app on the fly (aka AuthUI — you can see them in use in the src/auth folder).
Email Verified Auth
email method is the default auth method in Open Saas.
Since it needs to send emails to verify users and reset passwords, it requires an email sender provider: a service it can use to send emails.
“email sender” provider is configured via app.emailSender field in the main.wasp file.
Dummy Email ProviderTo make it easy for you to get started, Open SaaS initially comes with the Dummy “email sender” provider, which does not send any emails, but instead logs all email verification links/tokens to the server’s console!
You can then follow these links to verify the user and continue with the sign-up process.main.wasp  emailSender: {    provider: Dummy, // logs all email verification links/tokens to the server's console    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },You can not use the Dummy provider in production and your app will not build until you move to a production-ready provider, such as SendGrid. We outline the process of migrating to SendGrid below.
In order to use the email auth method in production, you’ll need to switch from the Dummy “email sender” provider to a production-ready provider like SendGrid:

First, set up your app’s emailSender in the main.wasp file by following this guide.
Add your SENDGRID_API_KEY to the .env.server file.
Make sure the email address you use in the fromField object is the same email address that you configured your SendGrid account to send out emails with. In the end, your main.wasp file should look something like this:

main.wasp  auth: {    methods: {      email: {        fromField: {          name: "Open SaaS App",          // When using SendGrid, you must use the same email address that you configured your account to send out emails with!          email: "me@example.com"        },        //...      },    }  },  //...  emailSender: {    provider: Dummy,    provider: SendGrid,    defaultFrom: {      name: "Open SaaS App",      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!      email: "me@example.com"    },  },
And that’s it. Wasp will take care of the rest and update your AuthUI components accordingly.
Check out the  Wasp Auth docs for more info.
Google, GitHub, & Discord Auth
We’ve also customized and pre-built the Google and GitHub auth flow for you. To start using them, you just need to uncomment out the methods you want in your main.wasp file and obtain the proper API keys to add to your .env.server file.
To create a Google OAuth app and get your Google API keys, follow the instructions in Wasp’s Google Auth docs.
To create a GitHub OAuth app and get your GitHub API keys, follow the instructions in Wasp’s GitHub Auth docs.
To create a Discord OAuth app and get your Discord API keys, follow the instructions in Wasp’s Discord Auth docs
Again, Wasp will take care of the rest and update your AuthUI components accordingly.     Edit page      Previous  Analytics      Next  Authorization            



=== PAGE: https://docs.opensaas.sh/guides/authorization/ ===

 Authorization | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview     Client-side Authorization    Server-side Authorization      On this page   Overview     Client-side Authorization    Server-side Authorization           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Authorization      This guide will help you get started with authorization in your SaaS app.
Authorization refers to what users can access in your app. This is useful for differentiating between users who have paid for different subscription tiers (e.g. “hobby” vs “pro”), or between users who have admin privileges and those who do not.
Authorization differs from authentication in that authentication refers to the process of verifying that a user is who they say they are (e.g. logging in with a username and password).
To learn more about the different types of user permissions built into this SaaS template, including Stripe subscription tiers and statuses, check out the User Overview Reference.
Also, check out our blog post to learn more about authorization (access control) in web apps.
Client-side Authorization
Open Saas starts with all users having access to the landing page (/), but only authenticated users having access to the rest of the app (e.g. to the /demo-app, or to the /account).
To control which pages require users to be authenticated to access them, you can set the authRequired property of the corresponding page definition in your main.wasp file:
main.wasproute AccountRoute { path: "/account", to: AccountPage }page AccountPage {  authRequired: true,  component: import Account from "@src/user/AccountPage"}
This will automatically redirect users to the login page if they are not logged in while trying to access that page.
Client-side authorization is just for the looksUsers can manipulate the client code as they wish, meaning that client-side access control (authorization) serves the purpose of ergonomics/user experience, not the purpose of restricting access to sensitive data.
This means that authorization in the client code is a nice-to-have: it is here to make sure users don’t get lost in the part of the app they can’t work with because data is missing due to them not having access, not to actually restrict them from doing something.
Actually ensuring they don’t have access to the data, that is on the server to ensure, via server-side logic that you will implement for authorization (access control).
If you want more fine-grained control over what users can access, there are two Wasp-specific options:

When you define the authRequired: true property on the page definition, Wasp automatically passes the User object to the page component. Here you can check for certain user properties before authorizing access:

ExamplePage.tsximport { type User } from "wasp/entities";
export default function Example({ user }: { user: User }) {
  if (user.subscriptionStatus === 'past_due') {    return (<span>Your subscription is past due. Please update your payment information.</span>)  }  if (user.subscriptionStatus === 'cancel_at_period_end') {    return (<span>Your will susbscription end on 01.01.2024</span>)  }  if (user.subscriptionStatus === 'active') {    return (<span>Thanks so much for your support!</span>)  }
}

Or you can take advantage of the useAuth hook and check for certain user properties before authorizing access to certain pages or components:

ExamplePage.tsximport { useAuth } from "wasp/client/auth";
export default function ExampleHomePage() {  const { data: user } = useAuth();
  return (    <h1> Hi {user.email || 'there'} 👋 </h1>  )}
Server-side Authorization
Authorization on the server-side is the core of your access control logic, and determines what users actually can or can’t do (unlike client-side authorization logic which is there merely for UX).
You can authorize access to server-side operations by adding a check for a logged-in user on the context.user object which is passed to all operations in Wasp:
src/server/actions.tsexport const updateCurrentUser: UpdateCurrentUser<...> = async (args, context) => {  if (!context.user) {    throw new HttpError(401); // throw an error if user is not logged in  }
  if (context.user.subscriptionStatus === 'past_due') {    throw new HttpError(403, 'Your subscription is past due. Please update your payment information.');  }  //...}     Edit page      Previous  Authentication      Next  Cookie Consent Modal            



=== PAGE: https://docs.opensaas.sh/guides/cookie-consent/ ===

 Cookie Consent Modal | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Configuration     Google Analytics    Plausible Analytics    Your Terms / Privacy Policy    Allowing Users to Control Certain Cookies (OPTIONAL)      On this page   Overview    Configuration     Google Analytics    Plausible Analytics    Your Terms / Privacy Policy    Allowing Users to Control Certain Cookies (OPTIONAL)           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Cookie Consent Modal      
Cookie consent banners are annoying, we know. But they are legally required in many countries, so we have to deal with them.
This guide will help you dynamically add or remove cookies from your app via the Cookie Consent modal that comes with this template.
This is needed for non-essential cookies that are not necessary for the basic functionality of your app, such as analytics cookies or marketing cookies.
The Modal can be found at app/src/client/components/cookie-consent/ and contains two main files:

Banner.tsx - the component that displays the banner at the bottom of the page.
Config.ts - the configuration file that contains the cookies/scripts that will be dynamically added.

The Banner.tsx component is imported in app/src/client/App.tsx and is rendered at the bottom of the page, while all the changes to the banner itself are done within the Config.ts file, which we explain below.
Configuration
We decided to use the vanilla-cookieconsent library to handle the cookie consent. We’ve set it up to give you some basic functionality, using mostly the default settings. For a full list of options, you can check the official documentation.
Below, we will guide you through the necessary steps to get the cookie consent modal set up for your app.
Google Analytics
What’s impotant to note for this template is that we are simply using the onAccept callbacks to dynamically add or remove our Google Analytics cookies from the page. In order for it to work correctly with your app, you need to add your Google Analytics ID to your .env.client file.
.env.client REACT_APP_GOOGLE_ANALYTICS_ID=G-1234567890
And that’s it! The cookie consent modal will now dynamically add or remove the Google Analytics cookies based on the user’s choice.
To check if it’s working correctly, you can open the browser’s developer tools and check the cookies tab. You should see the following cookies being added or removed based on the user’s choice:
Terminal window_ga_ga... # Google Analytics cookies.cc_cookie # Cookie Consent cookie. The name of this cookie can be changed in the config file.
Plausible Analytics
If you decide to go with Plausible Analytics, you DO NOT need to ask users for their consent to use cookies because Plausible, as a privacy-first analytics provider, does not use cookies. Instead, It collects website usage data anonymously and in aggregate form only, without any personally identifiable information
By avoiding cookies, Plausible Analytics avoids the need for cookie consent banners.
Your Terms / Privacy Policy
You should also add a link to your terms and privacy policy within consentModal section of config.language:
Config.ts    language: {      default: 'en',      translations: {        en: {          consentModal: {            title: 'We use cookies',            // ...            // TODO: Add your own privacy policy and terms and conditions links below.            footer: `            <a href="<your-url-here>" target="_blank">Privacy Policy</a>            <a href="<your-url-here>" target="_blank">Terms and Conditions</a>                    `,          },        },      },    }
Allowing Users to Control Certain Cookies (OPTIONAL)
If you’ve added more than just Google Analytics cookies to your app, you can allow users to control which cookies they want to accept or reject. For example, if you’ve added marketing cookies, you can add a button to the modal that allows users to reject them, while accepting analytics cookies.

To do that, you can change the preferencesModal.sections property in config.language. Any section that you add to preferencesModal.sections must match a linkedCategory in the config.categories property. Make sure you also add a showPreferencesBtn property to consentModal (highlighted below).
Below is an example of what your config might look like if you want to give users the option to control over multiple cookie preferences:
Config.ts    language: {      default: 'en',      translations: {        en: {          consentModal: {            // ...            showPreferencesBtn: 'Manage Individual preferences', // This button will open the preferences modal below.          },          preferencesModal: {            title: 'Manage cookie preferences',            acceptAllBtn: 'Accept all',            acceptNecessaryBtn: 'Reject all',            savePreferencesBtn: 'Accept current selection',            closeIconLabel: 'Close modal',            serviceCounterLabel: 'Service|Services',            sections: [              {                title: 'Your Privacy Choices',                description: `In this panel you can express some preferences related to the processing of your personal information. You may review and change expressed choices at any time by resurfacing this panel via the provided link. To deny your consent to the specific processing activities described below, switch the toggles to off or use the “Reject all” button and confirm you want to save your choices.`,              },              {                title: 'Strictly Necessary',                description:                  'These cookies are essential for the proper functioning of the website and cannot be disabled.',                linkedCategory: 'necessary',              },              {                title: 'Performance and Analytics',                description:                  'These cookies collect information about how you use our website. All of the data is anonymized and cannot be used to identify you.',                linkedCategory: 'analytics',                cookieTable: {                  caption: 'Cookie table',                  headers: {                    name: 'Cookie',                    domain: 'Domain',                    desc: 'Description',                  },                  body: [                    {                      name: '_ga',                      domain: location.hostname,                      desc: 'Description 1',                    },                    {                      name: '_gid',                      domain: location.hostname,                      desc: 'Description 2',                    },                  ],                },              },              {                title: 'YouTube',                description: 'This service is used to display video content on the website.',                linkedCategory: 'youtube',                cookieTable: {                  // ...                }              },              {                title: 'More information',                description:                  'For any queries in relation to my policy on cookies and your choices, please <a href="#contact-page">contact us</a>',              },            ],          },        },      },    }
For more information on how to do that, check the official documentation.     Edit page      Previous  Authorization      Next  Deploying            



=== PAGE: https://docs.opensaas.sh/guides/deploying/ ===

 Deploying | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Deploying your App     Steps for Deploying    Prerequisites    Deploying to Fly.io    Deploying Manually / to Other Providers    Adding Server Redirect URL’s to Social Auth    Setting up your Production Stripe Webhook    Setting up your Production Lemon Squeezy Webhook      Deploying your Blog    On this page   Overview    Deploying your App     Steps for Deploying    Prerequisites    Deploying to Fly.io    Deploying Manually / to Other Providers    Adding Server Redirect URL’s to Social Auth    Setting up your Production Stripe Webhook    Setting up your Production Lemon Squeezy Webhook      Deploying your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Deploying      Because this SaaS app is a React/NodeJS/Postgres app built on top of Wasp, Open SaaS can take advantage of Wasp’s easy, one-command deploy to Fly.io or manual deploy to any provider of your choice.
The simplest and quickest option is to take advantage of Wasp’s one-command deploy to Fly.io.
Or if you prefer to deploy to a different provider, or your frontend and backend separately, you can follow the Deploying Manually section below.
Deploying your App
Steps for Deploying
These are the steps necessary for you to deploy your app. We recommend you follow these steps in order.

 Get your production API keys and environment variables
 Deploy your app easily to Fly.io or manually to any provider.
 Add the correct redirect URL’s to your social auth credentials
 Set up your [production webhooks for either Stripe or Lemon Squeezy
 Set your production environment variables on your deployed apps
 (Optional) Deploy your blog

Each of these steps is covered in more detail below.
Prerequisites
Make sure you’ve got all your API keys and environment variables set up before you deploy.
Env Vars
Payment Processor Vars
In the Payments Processor integration guide, you set up your API keys using test keys and test product ids. You’ll need to get the live/production versions of those keys. To get these, repeat the instructions in the Integration Guide without being in test mode. Add the new keys to your deployed environment secrets.
Other Vars
Many of your other environment variables will probably be the same as in development, but you should double-check that they are set correctly for production.
Here are a list of all of them (some of which you may not be using, e.g. Analytics, Social Auth) in case you need to check:
General Vars

 DATABASE_URL
 JWT_SECRET
 WASP_WEB_CLIENT_URL
 WASP_SERVER_URL

Open AI API Key

 OPENAI_API_KEY

Sendgrid API Key

 SENDGRID_API_KEY

Social Auth Vars

 GOOGLE_CLIENT_ID
 GOOGLE_CLIENT_SECRET
 GITHUB_CLIENT_ID
 GITHUB_CLIENT_SECRET

Analytics Vars

 REACT_APP_PLAUSIBLE_ANALYTICS_ID (for client-side)
 PLAUSIBLE_API_KEY
 PLAUSIBLE_SITE_ID
 PLAUSIBLE_BASE_URL
 REACT_APP_GOOGLE_ANALYTICS_ID (for client-side)
 GOOGLE_ANALYTICS_CLIENT_EMAIL
 GOOGLE_ANALYTICS_PROPERTY_ID
 GOOGLE_ANALYTICS_PRIVATE_KEY
(Make sure you convert the private key within the JSON file to base64 first with echo -n "PRIVATE_KEY" | base64. See the Analytics docs for more info)

AWS S3 Vars

 AWS_S3_IAM_ACCESS_KEY
 AWS_S3_IAM_SECRET_KEY
 AWS_S3_FILES_BUCKET
 AWS_S3_REGION

Deploying to Fly.io
Fly.io is a platform for running your apps globally. It’s a great choice for deploying your SaaS app because it’s free to get started, can host your entire full-stack app in one place, scales well, and has one-command deploy integration with Wasp.
Wasp provides the handy wasp deploy command to deploy your entire full-stack app (DB, server, and client) in one command.
To learn how, please follow the detailed guide for deploying to Fly via the Wasp CLI from the Wasp documentation. We suggest you follow this guide carefully to get your app deployed.
Setting Environment VariablesRemember, because we’ve set certain client-side env variables, make sure to pass them to the wasp deploy commands so that they can be included in the build:Terminal windowREACT_APP_CLIENT_ENV_VAR_1=<...> REACT_APP_CLIENT_ENV_VAR_2=<...> wasp deployThe wasp deploy command will also take care of setting the following server-side environment variables for you so you don’t have to:
DATABASE_URL
PORT
JWT_SECRET
WASP_WEB_CLIENT_URL
WASP_SERVER_URL
For setting the remaining server-side environment variables, please refer to the Deploying with the Wasp CLI Guide.
Deploying Manually / to Other Providers
If you prefer to deploy manually, your frontend and backend separately, or just prefer using your favorite provider you can follow Wasp’s Manual Deployment Guide.
Client-side Environment VariablesRemember to always set additional client-side environment variables, such as REACT_APP_STRIPE_CUSTOMER_PORTAL by appending them to the build command, e.g.Terminal windowREACT_APP_CLIENT_ENV_VAR_1=<...> npm run build
Adding Server Redirect URL’s to Social Auth
After deploying your server, you need to add the correct redirect URIs to the credential settings. For this, refer to the following guides from the Wasp Docs:

Google Auth
Github Auth

Setting up your Production Stripe Webhook
Now you need to set up your stripe webhook for production use. Below are some important steps and considerations you should take as you prepare to deploy your app to production.
Stripe API Versions
When you create your Stripe account, Stripe will automatically assign you to their latest API version at that time. This API version is important because it determines the structure of the responses Stripe sends to your webhook, as well as the structure it expects of the requests you make toward the Stripe API.
Because this template was built with a specific version of the Stripe API in mind, it could be that your Stripe account is set to a different API version.
NotestripeClient.tsexport const stripe = new Stripe(process.env.STRIPE_API_KEY!, {  apiVersion: 'YYYY-MM-DD', // e.g. 2023-08-16});When you specify a specific API version in your Stripe client, the requests you send to Stripe from your server, along with their responses, will match that API version. On the other hand, Stripe will send all other events to your webhook that didn’t originate as a request sent from your server, like those made after a user completes a payment on checkout, using the default API version of the API.This is why it’s important to make sure your Stripe client version also matches the API version in your Stripe account, and to thoroughly test any changes you make to your Stripe client before deploying to production.
To make sure your app is consistent with your Stripe account, here are some steps you can follow:

You can find your default API version in the Stripe dashboard under the Developers section.
Check that the API version in your /src/payment/stripe/stripeClient.ts file matches the default API version in your dashboard:

stripeClient.tsexport const stripe = new Stripe(process.env.STRIPE_KEY!, {  apiVersion: 'YYYY-MM-DD', // e.g. 2023-08-16});

If they don’t match, you can upgrade/downgrade your Stripe NPM package in package.json to match the API version in your dashboard:


If your default version on the Stripe dashboard is also the latest version of the API, you can simply upgrade your Stripe NPM package to the latest version.
If your default version on the Stripe dashboard is not the latest version, and you don’t want to upgrade to the latest version, because e.g. you have other projects that depend on the current version, you can find and install the Stripe NPM package version that matches your default API version by following these steps:

Find and note the date of your default API version in the developer dashboard.
Go to the Stripe NPM package page and hover over Published date column until you find the package release that matches your version. For example, here we find the NPM version that matches the default API version of 2023-08-16 in our dashboard, which is 13.x.x.



Install the correct version of the Stripe NPM package by running, :

Terminal window  npm install stripe@x.x.x # e.g. npm install stripe@13.11.0



Test your app thoroughly to make sure that the changes you made to your Stripe client are working as expected before deploying to production.

Creating Your Production Webhook

go to https://dashboard.stripe.com/webhooks
click on + add endpoint
enter your endpoint url, which will be the url of your deployed server + /payments-webhook, e.g. https://open-saas-wasp-sh-server.fly.dev/payments-webhook



select the events you want to listen to. These should be the same events you’re consuming in your webhook. For example, if you haven’t added any additional events to the webhook and are using the defaults that came with this template, then you’ll need to add:
- account.updated
- checkout.session.completed
- customer.subscription.deleted
- customer.subscription.updated
- invoice.paid



after that, go to the webhook you just created and reveal the new signing secret.
add this secret to your deployed server’s STRIPE_WEBHOOK_SECRET= environment variable. If you’ve deployed to Fly.io, you can do that easily with the following command:

Terminal windowwasp deploy fly cmd --context server secrets set STRIPE_WEBHOOK_SECRET=whsec_...
Setting up your Production Lemon Squeezy Webhook
To set up your Lemon Squeezy webhook, you’ll need the URL of you newly deployed server + /payments-webhook, e.g. https://open-saas-wasp-sh-server.fly.dev/payments-webhook.
With the webhook url ready, go to your Lemon Squeezy Webhooks Dashboard:

click the + button.
add the webhook forwarding url to the Callback URL section.
give your webhook a signing secret (a long, random string).
add this signing secret to your server’s production environment variables under LEMONSQUEEZY_WEBHOOK_SECRET=
make sure to select at least the following updates to be sent:

order_created
subscription_created
subscription_updated
subscription_cancelled


click save

Deploying your Blog
Deploying your Astro Starlight blog is a bit different than deploying your SaaS app. As an example, we will show you how to deploy your blog for free to Netlify. You will need a Netlify account and Netlify CLI installed to follow these instructions.
Make sure you are logged in with Netlify CLI.

You can check if you are logged in with netlify status,
you can log in with netlify login.

Position yourself in the blog directory and run the following command:
Terminal windownpm run build
This will build your blog into the blog/dist directory. Now you can deploy your blog to Netlify with the following command:
Terminal windownetlify deploy
Select the dist directory as the deploy path.
Finally, if the deployment looks good, you can deploy your blog to production with the following command:
Terminal windownetlify deploy --prod     Edit page      Previous  Cookie Consent Modal      Next  Email Sending            



=== PAGE: https://docs.opensaas.sh/guides/email-sending/ ===

 Email Sending | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender    On this page   Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Email Sending      This guide explains how to use the integrated email sender and how you can integrate your own account in this template.
Sending Emails
The Dummy Email Provider (for Local Dev Only)
By default we’ve set up the email sender to use the Dummy provider. This is for local development only and no emails will actually be sent out!
To obtain an email verification token/link, you must check the server logs on initial sign up. You can click this link to verify your email and continue with the sign up process.
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: Dummy,    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },
Note that your app will not build if using the Dummy provider and you must switch to a production-ready provider in order to do so.
Using a Production-Ready Email Provider (e.g. SendGrid)
To change your email provider to a production-ready one, such as SendGrid, you’ll want to configure your emailSender like so:
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: SendGrid,    defaultFrom: {      name: "Open SaaS App",      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!      email: "me@example.com"    },  },
This means that you can send emails from your app using the send function from the email modul provided by Wasp:
src/server/webhooks.tsimport { emailSender } from "wasp/server/email";
//...
  if (subscription.cancel_at_period_end) {    await emailSender.send({      to: customer.email,      subject: 'We hate to see you go :(',      text: 'We hate to see you go. Here is a sweet offer...',      html: 'We hate to see you go. Here is a sweet offer...',    });  }
In the example above, you can see that we’re sending an email to the customer when we receive a cancel subscription event within the Stripe webhook.
This is a powerful feature and super simple to use.
Integrate your email sender
To set up your email sender, you first need an account with one of the supported email providers.
      SendGrid     Mailgun      
Register at SendGrid.com and then get your API KEYS.
Copy yours to the .env.server file under the SENDGRID_API_KEY variable.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: SendGrid,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your SendGrid account to send emails with!  },  
Go to Mailgun and create an account.
Go to API Keys and create a new API key.
Copy the API key and add it to your .env.server file under the MAILGUN_API_KEY= variable.
Go to Domains and create a new domain.
Copy the domain and add it to your .env.server file as MAILGUN_DOMAIN=.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: Mailgun,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your Mailgun account to send emails with!  },  
If you want more detailed info, or would like to use SMTP, check out the Wasp docs.     Edit page      Previous  Deploying      Next  File Uploading            



=== PAGE: https://docs.opensaas.sh/guides/file-uploading/ ===

 File Uploading | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Using AWS S3     How presigned URLs work    Create an AWS Account    Create an AWS S3 Bucket    Change the CORS settings    Get your AWS S3 credentials    Using and Customizing File Uploads with S3 in your App      Using Multer to upload files to your server     Wasp version 0.12 & higher      On this page   Overview    Using AWS S3     How presigned URLs work    Create an AWS Account    Create an AWS S3 Bucket    Change the CORS settings    Get your AWS S3 credentials    Using and Customizing File Uploads with S3 in your App      Using Multer to upload files to your server     Wasp version 0.12 & higher           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   File Uploading      This guide will show you how to set up file uploading in your SaaS app.
There are two options we recommend:

Using AWS S3 with presigned URLS for secure file storage
Using Multer middleware to upload files to your own server

We recommend using AWS S3 as it’s a scalable, secure option, that can handle a large amount of storage.
If you’re just looking to upload small files and don’t expect your app to grow to a large scale, you can use Multer to upload files to your app’s server.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Using AWS S3
How presigned URLs work
Presigned URLs are URLs that have been signed with your AWS credentials and can be used to upload files to your S3 bucket. They are time-limited and can be generated on the server and sent to the client to upload files directly to S3.
The process of generating a presigned URL is as follows:

The client sends a request to the server to upload a file
The server generates a presigned URL using its AWS credentials
The server sends the presigned URL to the client
The client uses the presigned URL to upload the file directly to S3 before the URL expires

We use this method to upload files to S3 because it is more secure than uploading files directly from the client to S3. It also allows us to keep our AWS credentials private and not expose them to the client.
To use presigned URLs, we’ll need to set up an S3 bucket and get our AWS credentials.
Create an AWS Account
Before you begin, you’ll need to create an AWS account. AWS accounts are free to create and are split up into:

Root account
IAM users

You’ll need to first create a root account, and then an IAM user for your SaaS app before you can start uploading files to S3.
To do so, follow the steps in this external guide: Creating IAM users and S3 buckets in AWS
Create an AWS S3 Bucket
Once you are logged in with your IAM user, you’ll need to create an S3 bucket to store your files.

Navigate to the S3 service in the AWS console



Click on the Create bucket button



Fill in the bucket name and region
Leave all the settings as default and click Create bucket


Change the CORS settings
Now we need to change some permissions on the bucket to allow for file uploads from your app.

Click on the bucket you just created



Click on the Permissions tab



Scroll down to the Cross-origin resource sharing (CORS) section and click Edit



Paste the following CORS configuration and click Save changes:

[    {        "AllowedHeaders": [            "*"        ],        "AllowedMethods": [            "PUT",            "GET"        ],        "AllowedOrigins": [            "*"        ],        "ExposeHeaders": []    }]
Get your AWS S3 credentials
Now that you have your S3 bucket set up, you’ll need to get your S3 credentials to use in your app.

Click on your username in the top right corner of the AWS console and select Security Credentials



Scroll down to the Access keys section
Click on Create Access Key
Select the Application running on an AWS service option and create the access key



Copy the Access key ID and Secret access key and paste them in your src/app/.env.server file:

Terminal window  AWS_S3_IAM_ACCESS_KEY=ACK...  AWS_S3_IAM_SECRET_KEY=t+33a...  AWS_S3_FILES_BUCKET=your-bucket-name  AWS_S3_REGION=your-region // (e.g. us-west-2)
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Using and Customizing File Uploads with S3 in your App
With your S3 bucket set up and your AWS credentials in place, you can now start uploading files in your app using presigned URLs by navigating to localhost:3000/file-upload and uploading a file.
To begin customizing file uploads, is important to know where everything lives in your app. Here’s a quick overview:

main.wasp:

The File entity can be found here. Here you can modify the fields to suit your needs.


src/file-upload/FileUploadPage.tsx:

The FileUploadPage component is where the file upload form lives. It also allows you to download the file from S3 by calling the getDownloadFileSignedURL based on that files key in the app DB.


src/file-upload/operations.ts:

The createFile action lives here and calls the getUploadFileSignedURLFromS3 within it using your AWS credentials before passing it to the client. This function stores the files in the S3 bucket within folders named after the user’s ID, so that each user’s files are stored separately.
The getAllFilesByUser fetches all File information uploaded by the user. Note that the files do not exist in the app database, but rather the file data, its name and its key, which is used to fetch the file from S3.
The getDownloadFileSignedURL query fetches the presigned URL for a file to be downloaded from S3 using the file’s key stored in the app’s database.



Using Multer to upload files to your server
If you’re looking to upload files to the app server, you can use the Multer middleware to handle file uploads. This will allow you to store files on your server and is a good option if you need a quick and dirty, free solution for simple file uploads.
Below are GitHub Gists that show you how to set up file uploads using Multer in your app:
Wasp version 0.12 & higher
     Edit page      Previous  Email Sending      Next  Payments Integration            



=== PAGE: https://docs.opensaas.sh/guides/seo/ ===

 SEO | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Landing Page Meta Tags    Docs & Blog Meta Tags    A Word on SSR & SEO    On this page   Overview    Landing Page Meta Tags    Docs & Blog Meta Tags    A Word on SSR & SEO         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   SEO      This guides explains how to improve SEO for of your app
Landing Page Meta Tags
Wasp gives you the ability to add meta tags to your landing page HTML via the main.wasp file’s head property:
app SaaSTemplate {  wasp: {    version: "^0.13.0"  },  title: "Open SaaS",  head: [        "<meta property='og:type' content='website' />",        "<meta property='og:url' content='https://opensaas.sh' />",        "<meta property='og:title' content='Open SaaS' />",        "<meta property='og:description' content='Free, open-source SaaS boilerplate starter for React & NodeJS.' />",        "<meta property='og:image' content='https://opensaas.sh/public-banner.webp' />",        //...  ],  //...
Change the above highlighted meta tags to match your app. Wasp will inject these tags into the HTML of your index.html file, which is the Landing Page (app/src/client/landing-page/LandingPage.tsx), in this case.
This means you do not need to rely on a separate app or framework to serve your landing page for SEO purposes.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Docs & Blog Meta Tags
Astro, being a static-site generator, will automatically inject relevant information provided in the blog/astro.config.mjs file, as well as in the frontmatter of .md files into the pages HTML:
---title: 'My First Blog Post'pubDate: 2022-07-01description: 'This is the first post of my new Astro blog.'author: 'Astro Learner'image:    url: 'https://docs.astro.build/assets/full-logo-light.png'    alt: 'The full Astro logo.'tags: ["astro", "blogging", "learning in public"]---
Improving your SEO is as simple as adding these properties to your docs and blog content!
A Word on SSR & SEO
Open SaaS and Wasp do not currently have a SSR option (although it is coming soon!), but that does not mean that Open SaaS apps are at a disadvantage with regards to SEO.
That’s because the meta tags for the landing page (described above), plus the Astro docs/blog provided with Open SaaS are more than enough! Not to mention, Google is also able to crawl websites with JavaScript activated, making SSR unnecessary.
For example, try searching “Open SaaS” on Google and you’ll see this App, which was built with this template, as the first result!
     Edit page      Previous  Payments Integration      Next  Tests            



=== PAGE: https://docs.opensaas.sh/guides/tests/ ===

 Tests | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    The Tests Directory    Using Tests in CI with GitHub Actions    On this page   Overview    The Tests Directory    Using Tests in CI with GitHub Actions         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Tests      This guide will show you how to use the included end-to-end (e2e) tests for your Open SaaS application.
The Tests Directory
In the root of your project, you’ll find an e2e-tests directory which contains the Playwright tests for your Open SaaS application.:
.├── e2e-tests/│   ├── tests/                  # Directory containing the test files│   ├── README.md               # Instructions on how to run the tests│   ├── ci-start-app-and-db.js  # Script to start the app and db for CI│   ├── playwright.config.ts    # Playwright configuration│   ├── package.json│   ├── ...
To run the tests locally, or in a CI pipeline, follow the instructions in the README.md file in the e2e-tests directory.
Using Tests in CI with GitHub Actions
Although the Open SaaS template does not come with an example workflow, you can find one at .github/workflows/e2e-tests.yml of the remote repo.
You can copy and paste the .github/ directory containing the e2e-tests.yml workflow into the root of your own repository to run the tests as part of your CI pipeline.
WASP_VERSIONPlease make sure to update the WASP_VERSION environment variable in the e2e-tests.yml file to match the version of Wasp you are using in your project.
In order for these tests to run correctly on GitHub, you need to provide the environment variables mentioned in the e2e-tests.yml file within your GitHub repository’s “Actions” secrets so that they can be accessed by the tests.     Edit page      Previous  SEO      Next  Admin Dashboard            



=== PAGE: https://docs.opensaas.sh/general/admin-dashboard/ ===

 Admin Dashboard | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users      On this page   Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Admin Dashboard      This is a reference on how the Admin dashboard, available at /admin, is set up.

Permissions
The Admin dashboard is only accessible to users with the isAdmin field set to true.
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  isAdmin                   Boolean         @default(false)  //...
To give yourself administrator priveledges, make sure you add your email addresses to the ADMIN_EMAILS environment variable in .env.server file before registering/logging in with that email address:
.env.serverADMIN_EMAILS=me@example.com
// or add many admins with a comma-separated list
ADMIN_EMAILS=me@example.com,you@example.com,them@example.com
Or if you’ve already logged in with an email address that you want to give admin priveledges to, you can run the following command in a separate terminal window to update the user’s isAdmin field manually:
Terminal windowwasp db studio


Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Admin Dashboard Pages
Analytics Dashboard
The Admin analytics dashboard is a single place for you to view your most important metrics and perform some admin tasks. At the moment, it pulls data from:

Payments Processor:

total revenue
revenue for each day of the past week


Google or Plausible:

total number of page views (non-unique)
percentage change in page views from the previous day
top sources/referrers with unique visitor count (i.e. how many people came from that source to your app)


Database:

total number of registered users
daily change in number of registered users
total number of paying users
daily change in number of paying users



These metrics are aggregated within the background job dailyStatsJob, which by default is run every hour. You can change the frequency of this job by modifying its cron field:
main.waspjob dailyStatsJob {  executor: PgBoss,  perform: {    fn: import { calculateDailyStats } from "@src/analytics/stats"  },  schedule: {    cron: "0 * * * *" // every hour. useful in production    // cron: "* * * * *" // every minute. useful for debugging  },  entities: [User, DailyStats, Logs, PageViewSource]}
For more info on Wasp’s recurring background jobs, check out the Wasp Jobs docs.
For a guide on how to integrate these services so that you can view your analytics via the dashboard, check out the Payments Integration and Analytics guide of the docs.
Help us improveWe’re always looking to improve the Admin dashboard. If you feel something is missing or could be improved, consider opening an issue or submitting a pull request
Users
The Users page is where you can view all your users and their most important details. You can also search and filter users by:

email address
subscription/payment status
admin status
     Edit page      Previous  Tests      Next  User Overview            



=== PAGE: https://docs.opensaas.sh/general/user-overview/ ===

 User Overview | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    User Entity    Stripe and Subscriptions     Subscription Statuses    Subscription Plans      User Roles    On this page   Overview    User Entity    Stripe and Subscriptions     Subscription Statuses    Subscription Plans      User Roles         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   User Overview      This reference will help you understand how the User entity works in this template.
This includes the user roles, subscription plans and statuses, and how to authorize access to certain pages and components.
User Entity
The User entity within your app is defined in the main.wasp file:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  createdAt                 DateTime        @default(now())  lastActiveTimestamp       DateTime        @default(now())  isAdmin                   Boolean         @default(false)  paymentProcessorUserId    String?         @unique  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.  subscriptionPlan          String?  subscriptionStatus        String?  sendEmail                 Boolean         @default(false)  datePaid                  DateTime?  credits                   Int             @default(3)  gptResponses              GptResponse[]  contactFormMessages       ContactFormMessage[]  tasks                     Task[]  files                     File[]psl=}
We store all pertinent information to the user, including identification, subscription, and payment processor information. Meanwhile, Wasp abstracts away all the Auth related entities dealing with passwords, sessions, and socialLogins, so you don’t have to worry about these at all in your Prisma schema (if you want to learn more about this process, check out the Wasp Auth Docs).
Stripe and Subscriptions
We use Stripe to handle all of our subscription payments. The User entity has a number of fields that are related to Stripe and their ability to access features behind the paywall:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  //...  paymentProcessorUserId    String?         @unique  subscriptionPlan          String?  subscriptionStatus        String?  datePaid                  DateTime?  credits                   Int             @default(3)  //...psl=}

paymentProcessorUserId: The payment processor customer ID. This is created on checkout and used to identify the customer.
subscriptionPlan: The subscription plan the user is on. This is set by the app and is used to determine what features the user has access to. By default, we have three plans: hobby and pro subscription plans, as well as a credits10 one-time purchase plan.
subscriptionStatus: The subscription status of the user. This is set by the payment processor and is used to determine whether the user has access to the app or not. By default, we have four statuses: active, past_due, cancel_at_period_end, and deleted.
credits (optional): By default, a user is given 3 credits to trial your product before they have to pay. You can create a one-time purchase product in Stripe to allow users to purchase more credits if they run out, e.g. the credits10 plan in the template.

Subscription Statuses
In general, we determine if a user has paid for an initial subscription by checking if the subscriptionStatus field is set. This field is set by Stripe within your webhook handler and is used to signify more detailed information on the user’s current status. By default, the template handles four statuses: active, past_due, cancel_at_period_end, and deleted.


When active the user has paid for a subscription and has full access to the app.


When cancel_at_period_end, the user has canceled their subscription and has access to the app until the end of their billing period.


When deleted, the user has reached the end of their subscription period after canceling and no longer has access to the app.


When past_due, the user’s automatic subscription renewal payment was declined (e.g. their credit card expired). You can choose how to handle this status within your app. For example, you can send the user an email to update their payment information:


src/payment/stripe/webhook.tsimport { emailSender } from "wasp/server/email";//...
if (subscription.status === 'past_due') {  const updatedCustomer = await context.entities.User.update({    where: {      id: customer.id,    },    data: {      subscriptionStatus: 'past_due',    },  });
  if (updatedCustomer.email) {    await emailSender.send({      to: updatedCustomer.email,      subject: 'Your Payment is Past Due',      text: 'Please update your payment information to continue using our service.',      html: '...',    });  }}
See the client-side authorization section below for more info on how to handle these statuses within your app.
Subscription Plans
The subscriptionPlan field is used to determine what features the user has access to.
By default, we have three plans: hobby and pro subscription plans, as well as a credits10 one-time purchase plan.
You can add more plans by adding more products and price IDs to your Stripe product and updating environment variables in your .env.server file as well as the relevant code in your app.
See the Payments Integration Guide for more info on how to do this.
User Roles
At the moment, we have two user roles: admin and user. This is defined within the isAdmin field in the User entity:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  createdAt                 DateTime        @default(now())  lastActiveTimestamp       DateTime        @default(now())  isAdmin                   Boolean         @default(false)//...psl=}
As an Admin, a user has access to the Admin dashboard, along with the user table where they can view and search for users, and edit and update information manually if necessary.
Admin PrivilegesIf you’d like to give yourself and/or certain users admin privileges, follow the instructions in the Admin Dashboard section.
As a general User, a user has access to the user-facing app that sits behind the login, but not the Admin dashboard. You can further restrict access to certain features within the app by following the authorization guide.     Edit page      Previous  Admin Dashboard            



=== PAGE: https://docs.opensaas.sh/#user-entity ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#welcome-to-your-new-saas-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#whats-inside ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/general/admin-dashboard ===

 Admin Dashboard | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users      On this page   Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Admin Dashboard      This is a reference on how the Admin dashboard, available at /admin, is set up.

Permissions
The Admin dashboard is only accessible to users with the isAdmin field set to true.
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  isAdmin                   Boolean         @default(false)  //...
To give yourself administrator priveledges, make sure you add your email addresses to the ADMIN_EMAILS environment variable in .env.server file before registering/logging in with that email address:
.env.serverADMIN_EMAILS=me@example.com
// or add many admins with a comma-separated list
ADMIN_EMAILS=me@example.com,you@example.com,them@example.com
Or if you’ve already logged in with an email address that you want to give admin priveledges to, you can run the following command in a separate terminal window to update the user’s isAdmin field manually:
Terminal windowwasp db studio


Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Admin Dashboard Pages
Analytics Dashboard
The Admin analytics dashboard is a single place for you to view your most important metrics and perform some admin tasks. At the moment, it pulls data from:

Payments Processor:

total revenue
revenue for each day of the past week


Google or Plausible:

total number of page views (non-unique)
percentage change in page views from the previous day
top sources/referrers with unique visitor count (i.e. how many people came from that source to your app)


Database:

total number of registered users
daily change in number of registered users
total number of paying users
daily change in number of paying users



These metrics are aggregated within the background job dailyStatsJob, which by default is run every hour. You can change the frequency of this job by modifying its cron field:
main.waspjob dailyStatsJob {  executor: PgBoss,  perform: {    fn: import { calculateDailyStats } from "@src/analytics/stats"  },  schedule: {    cron: "0 * * * *" // every hour. useful in production    // cron: "* * * * *" // every minute. useful for debugging  },  entities: [User, DailyStats, Logs, PageViewSource]}
For more info on Wasp’s recurring background jobs, check out the Wasp Jobs docs.
For a guide on how to integrate these services so that you can view your analytics via the dashboard, check out the Payments Integration and Analytics guide of the docs.
Help us improveWe’re always looking to improve the Admin dashboard. If you feel something is missing or could be improved, consider opening an issue or submitting a pull request
Users
The Users page is where you can view all your users and their most important details. You can also search and filter users by:

email address
subscription/payment status
admin status
     Edit page      Previous  Tests      Next  User Overview            



=== PAGE: https://docs.opensaas.sh/#permissions ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/general/user-overview ===

 User Overview | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    User Entity    Stripe and Subscriptions     Subscription Statuses    Subscription Plans      User Roles    On this page   Overview    User Entity    Stripe and Subscriptions     Subscription Statuses    Subscription Plans      User Roles         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   User Overview      This reference will help you understand how the User entity works in this template.
This includes the user roles, subscription plans and statuses, and how to authorize access to certain pages and components.
User Entity
The User entity within your app is defined in the main.wasp file:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  createdAt                 DateTime        @default(now())  lastActiveTimestamp       DateTime        @default(now())  isAdmin                   Boolean         @default(false)  paymentProcessorUserId    String?         @unique  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.  subscriptionPlan          String?  subscriptionStatus        String?  sendEmail                 Boolean         @default(false)  datePaid                  DateTime?  credits                   Int             @default(3)  gptResponses              GptResponse[]  contactFormMessages       ContactFormMessage[]  tasks                     Task[]  files                     File[]psl=}
We store all pertinent information to the user, including identification, subscription, and payment processor information. Meanwhile, Wasp abstracts away all the Auth related entities dealing with passwords, sessions, and socialLogins, so you don’t have to worry about these at all in your Prisma schema (if you want to learn more about this process, check out the Wasp Auth Docs).
Stripe and Subscriptions
We use Stripe to handle all of our subscription payments. The User entity has a number of fields that are related to Stripe and their ability to access features behind the paywall:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  //...  paymentProcessorUserId    String?         @unique  subscriptionPlan          String?  subscriptionStatus        String?  datePaid                  DateTime?  credits                   Int             @default(3)  //...psl=}

paymentProcessorUserId: The payment processor customer ID. This is created on checkout and used to identify the customer.
subscriptionPlan: The subscription plan the user is on. This is set by the app and is used to determine what features the user has access to. By default, we have three plans: hobby and pro subscription plans, as well as a credits10 one-time purchase plan.
subscriptionStatus: The subscription status of the user. This is set by the payment processor and is used to determine whether the user has access to the app or not. By default, we have four statuses: active, past_due, cancel_at_period_end, and deleted.
credits (optional): By default, a user is given 3 credits to trial your product before they have to pay. You can create a one-time purchase product in Stripe to allow users to purchase more credits if they run out, e.g. the credits10 plan in the template.

Subscription Statuses
In general, we determine if a user has paid for an initial subscription by checking if the subscriptionStatus field is set. This field is set by Stripe within your webhook handler and is used to signify more detailed information on the user’s current status. By default, the template handles four statuses: active, past_due, cancel_at_period_end, and deleted.


When active the user has paid for a subscription and has full access to the app.


When cancel_at_period_end, the user has canceled their subscription and has access to the app until the end of their billing period.


When deleted, the user has reached the end of their subscription period after canceling and no longer has access to the app.


When past_due, the user’s automatic subscription renewal payment was declined (e.g. their credit card expired). You can choose how to handle this status within your app. For example, you can send the user an email to update their payment information:


src/payment/stripe/webhook.tsimport { emailSender } from "wasp/server/email";//...
if (subscription.status === 'past_due') {  const updatedCustomer = await context.entities.User.update({    where: {      id: customer.id,    },    data: {      subscriptionStatus: 'past_due',    },  });
  if (updatedCustomer.email) {    await emailSender.send({      to: updatedCustomer.email,      subject: 'Your Payment is Past Due',      text: 'Please update your payment information to continue using our service.',      html: '...',    });  }}
See the client-side authorization section below for more info on how to handle these statuses within your app.
Subscription Plans
The subscriptionPlan field is used to determine what features the user has access to.
By default, we have three plans: hobby and pro subscription plans, as well as a credits10 one-time purchase plan.
You can add more plans by adding more products and price IDs to your Stripe product and updating environment variables in your .env.server file as well as the relevant code in your app.
See the Payments Integration Guide for more info on how to do this.
User Roles
At the moment, we have two user roles: admin and user. This is defined within the isAdmin field in the User entity:
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  createdAt                 DateTime        @default(now())  lastActiveTimestamp       DateTime        @default(now())  isAdmin                   Boolean         @default(false)//...psl=}
As an Admin, a user has access to the Admin dashboard, along with the user table where they can view and search for users, and edit and update information manually if necessary.
Admin PrivilegesIf you’d like to give yourself and/or certain users admin privileges, follow the instructions in the Admin Dashboard section.
As a general User, a user has access to the user-facing app that sits behind the login, but not the Admin dashboard. You can further restrict access to certain features within the app by following the authorization guide.     Edit page      Previous  Admin Dashboard            



=== PAGE: https://docs.opensaas.sh/#stripe-and-subscriptions ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/analytics ===

 Analytics | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog    On this page   Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Analytics      This guide will show you how to integrate analytics for your app. You can choose between Google Analytics and Plausible.
Google Analytics is free, but uses cookies, so you’ll probably want/need to implement the Cookie Consent Modal when using it.
Plausible is an open-source, privacy-friendly alternative to Google Analytics. You DO NOT have to use the cookie consent modal with Plausible, as it does not use cookies. It’s also easier to use than Google if you use their hosted service, but be aware it is a paid feature. It is completely free if you want to self-host it, although this comes with some additional setup steps.
If you’re looking to add analytics to your blog, you can follow the Adding Analytics to your Blog section at the end of this guide.
Plausible
Hosted Plausible
Sign up for a hosted Plausible account here.
Once you’ve signed up, you’ll be taken to your dashboard. Create your site by adding your domain. Your domain is also your PLAUSIBLE_SITE_ID in your .env.server file. Make sure to add it.
Terminal windowPLAUSIBLE_SITE_ID=<your domain without www>
After adding your domain, you’ll be taken to a page with your Plausible script tag. Copy and paste this script tag into the main.wasp file’s head section.
app OpenSaaS {  wasp: {    version: "^0.13.0"  },  title: "My SaaS App",  head: [        "<your plausible script tag here>",  ],  //...
Go back to your Plausible dashboard, click on your username in the top right, and click on the Settings tab. Scroll down, find your API key and paste it into your .env.server file under the PLAUSIBLE_API_KEY variable.
No CookiesPlausible does not use cookies, so you don’t need to add it to your Cookie Consent Modal, hence the script can be added directly to app.head in your main.wasp file.
Self-hosted Plausible
Plausible, being an open-source project, allows you to self-host your analytics. This is a great option if you want to keep your data private and not pay for the hosted service.
coming soon…
until then, check out the official documentation
Contribute!If you’d like to help us write this guide, click the “Edit page” button at the bottom of this pageAs a completely free, open-source project, we appreciate any help 🙏
Google Analytics
First off, head over to src/analytics/stats.ts and switch out the Plausible Provider for Google Analytics so that your background (cron) job fetches the data from Google Analytics for your Admin Dashboard:
stats.ts//...import { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';
export const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {  //...}
Next, make sure you sign up for Google analytics, then go to your Admin panel in the bottom of the left sidebar and then create a “Property” for your app.
Once you’ve created a new Property, some Installation Instructions will pop up. Select install manually where you should see a string that looks like this:
<your-google-analytics-id> https://www.googletagmanager.com/gtag/js?id=<your-google-analytics-id>
and copy and paste the Google Analytics ID into your .env.client file to get it working with the Cookie Consent Modal provided with this template:
.env.clientREACT_APP_GOOGLE_ANALYTICS_ID=<your-google-analytics-id> # e.g. G-1234567890
noscriptIn the Installation Instructions, Google Tag Manager might also instruct you to paste the noscript code snippet immediately after the opening <body> tag.
You should skip this step because this snippet is activated only if users try to browse your app without JavaScript enabled, which is very rare and Wasp needs JS anyway.
Then, set up the Google Analytics API access by following these steps:


Set up a Google Cloud project: If you haven’t already, start by setting up a project in the Google Cloud Console.


Enable the Google Analytics API for your project: Navigate to the “Library” in the Google Cloud Console and search for the “Google Analytics Data API” (for Google Analytics 4 properties) and enable it.


Create credentials: Now go to the “Credentials” tab within your Google Cloud project, click on + credentials, and create a new service account key. First, give it a name. Then, under “Grant this service account access to project”, choose viewer.


Create Credentials: When you go back to Credentials page, you should see a new service account listed under “Service Accounts”. It will be a long email address to ends with @your-project-id.iam.gserviceaccount.com. Click on the service account name to go to the service account details page.


Under “Keys” in the service account details page, click “Add Key” and choose Create new key.


Select “JSON”, then click “Create” to download your new service account’s JSON key file. Keep this file secure and don’t add it to your git repo – it grants access to your Google Analytics data.




Update your Google Anayltics Settings: Go back to your Google Analytics dashboard, and click on the Admin section in the left sidebar. Under Property Settings > Property > Property Access Management Add the service account email address (the one that ends with @your-project-id.iam.gserviceaccount.com) and give it Viewer permissions.


Encode and add the Credentials: Add the client_email and the private_key from your JSON Key file into your .env.server file. But be careful! Because Google uses a special PEM private key, you need to first convert the key to base64, otherwise you will run into errors parsing the key. To do this, in a terminal window, run the command below and paste the output into your .env.server file under the GOOGLE_ANALYTICS_PRIVATE_KEY variable:
Terminal windowecho -n "-----BEGIN PRIVATE KEY-----\nMI...A++eK\n-----END PRIVATE KEY-----\n" | base64


Add your Google Analytics Property ID: You will find the Property ID in your Google Analytics dashboard in the Admin > Property > Property Settings > Property Details section of your Google Analytics property (not your Google Cloud console). Add this 9-digit number to your .env.server file under the GOOGLE_ANALYTICS_PROPERTY_ID variable.


Adding Analytics to your Blog
To add your analytics script to your Astro Starlight blog, all you need to do is modify the head property in your blog/astro.config.mjs file.
Below is an example of how to add Google Analytics to your blog:
export default defineConfig({  site: 'https://opensaas.sh',  integrations: [    starlightBlog({      // ...    }),    starlight({      //...       head: [        {          tag: 'script',          attrs: {            src: 'https://www.googletagmanager.com/gtag/js?id=<YOUR-GOOGLE-ANALYTICS-ID>',          },        },        {          tag: 'script',          content: `          window.dataLayer = window.dataLayer || [];          function gtag(){dataLayer.push(arguments);}          gtag('js', new Date());
          gtag('config', '<YOUR-GOOGLE-ANALYTICS-ID>');          `,        },      ],     Edit page      Previous  Guided Tour      Next  Authentication            



=== PAGE: https://docs.opensaas.sh/#plausible ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/authentication ===

 Authentication | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Email Verified Auth    Google, GitHub, & Discord Auth    On this page   Overview    Email Verified Auth    Google, GitHub, & Discord Auth         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Authentication      Setting up your app’s authentication is easy with Wasp. In fact, it’s already set up for you in the main.wasp file:
main.wasp  auth: {    userEntity: User,    methods: {      email: {},      google: {},      gitHub: {},      discord: {}    },    onAuthFailedRedirectTo: "/",  },
The great part is, by defining your auth config in the main.wasp file, Wasp manages most of the Auth process for you, including the auth-related database entities for user credentials and sessions, as well as auto-generated client components for your app on the fly (aka AuthUI — you can see them in use in the src/auth folder).
Email Verified Auth
email method is the default auth method in Open Saas.
Since it needs to send emails to verify users and reset passwords, it requires an email sender provider: a service it can use to send emails.
“email sender” provider is configured via app.emailSender field in the main.wasp file.
Dummy Email ProviderTo make it easy for you to get started, Open SaaS initially comes with the Dummy “email sender” provider, which does not send any emails, but instead logs all email verification links/tokens to the server’s console!
You can then follow these links to verify the user and continue with the sign-up process.main.wasp  emailSender: {    provider: Dummy, // logs all email verification links/tokens to the server's console    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },You can not use the Dummy provider in production and your app will not build until you move to a production-ready provider, such as SendGrid. We outline the process of migrating to SendGrid below.
In order to use the email auth method in production, you’ll need to switch from the Dummy “email sender” provider to a production-ready provider like SendGrid:

First, set up your app’s emailSender in the main.wasp file by following this guide.
Add your SENDGRID_API_KEY to the .env.server file.
Make sure the email address you use in the fromField object is the same email address that you configured your SendGrid account to send out emails with. In the end, your main.wasp file should look something like this:

main.wasp  auth: {    methods: {      email: {        fromField: {          name: "Open SaaS App",          // When using SendGrid, you must use the same email address that you configured your account to send out emails with!          email: "me@example.com"        },        //...      },    }  },  //...  emailSender: {    provider: Dummy,    provider: SendGrid,    defaultFrom: {      name: "Open SaaS App",      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!      email: "me@example.com"    },  },
And that’s it. Wasp will take care of the rest and update your AuthUI components accordingly.
Check out the  Wasp Auth docs for more info.
Google, GitHub, & Discord Auth
We’ve also customized and pre-built the Google and GitHub auth flow for you. To start using them, you just need to uncomment out the methods you want in your main.wasp file and obtain the proper API keys to add to your .env.server file.
To create a Google OAuth app and get your Google API keys, follow the instructions in Wasp’s Google Auth docs.
To create a GitHub OAuth app and get your GitHub API keys, follow the instructions in Wasp’s GitHub Auth docs.
To create a Discord OAuth app and get your Discord API keys, follow the instructions in Wasp’s Discord Auth docs
Again, Wasp will take care of the rest and update your AuthUI components accordingly.     Edit page      Previous  Analytics      Next  Authorization            



=== PAGE: https://docs.opensaas.sh/#email-verified-auth ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/authorization ===

 Authorization | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview     Client-side Authorization    Server-side Authorization      On this page   Overview     Client-side Authorization    Server-side Authorization           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Authorization      This guide will help you get started with authorization in your SaaS app.
Authorization refers to what users can access in your app. This is useful for differentiating between users who have paid for different subscription tiers (e.g. “hobby” vs “pro”), or between users who have admin privileges and those who do not.
Authorization differs from authentication in that authentication refers to the process of verifying that a user is who they say they are (e.g. logging in with a username and password).
To learn more about the different types of user permissions built into this SaaS template, including Stripe subscription tiers and statuses, check out the User Overview Reference.
Also, check out our blog post to learn more about authorization (access control) in web apps.
Client-side Authorization
Open Saas starts with all users having access to the landing page (/), but only authenticated users having access to the rest of the app (e.g. to the /demo-app, or to the /account).
To control which pages require users to be authenticated to access them, you can set the authRequired property of the corresponding page definition in your main.wasp file:
main.wasproute AccountRoute { path: "/account", to: AccountPage }page AccountPage {  authRequired: true,  component: import Account from "@src/user/AccountPage"}
This will automatically redirect users to the login page if they are not logged in while trying to access that page.
Client-side authorization is just for the looksUsers can manipulate the client code as they wish, meaning that client-side access control (authorization) serves the purpose of ergonomics/user experience, not the purpose of restricting access to sensitive data.
This means that authorization in the client code is a nice-to-have: it is here to make sure users don’t get lost in the part of the app they can’t work with because data is missing due to them not having access, not to actually restrict them from doing something.
Actually ensuring they don’t have access to the data, that is on the server to ensure, via server-side logic that you will implement for authorization (access control).
If you want more fine-grained control over what users can access, there are two Wasp-specific options:

When you define the authRequired: true property on the page definition, Wasp automatically passes the User object to the page component. Here you can check for certain user properties before authorizing access:

ExamplePage.tsximport { type User } from "wasp/entities";
export default function Example({ user }: { user: User }) {
  if (user.subscriptionStatus === 'past_due') {    return (<span>Your subscription is past due. Please update your payment information.</span>)  }  if (user.subscriptionStatus === 'cancel_at_period_end') {    return (<span>Your will susbscription end on 01.01.2024</span>)  }  if (user.subscriptionStatus === 'active') {    return (<span>Thanks so much for your support!</span>)  }
}

Or you can take advantage of the useAuth hook and check for certain user properties before authorizing access to certain pages or components:

ExamplePage.tsximport { useAuth } from "wasp/client/auth";
export default function ExampleHomePage() {  const { data: user } = useAuth();
  return (    <h1> Hi {user.email || 'there'} 👋 </h1>  )}
Server-side Authorization
Authorization on the server-side is the core of your access control logic, and determines what users actually can or can’t do (unlike client-side authorization logic which is there merely for UX).
You can authorize access to server-side operations by adding a check for a logged-in user on the context.user object which is passed to all operations in Wasp:
src/server/actions.tsexport const updateCurrentUser: UpdateCurrentUser<...> = async (args, context) => {  if (!context.user) {    throw new HttpError(401); // throw an error if user is not logged in  }
  if (context.user.subscriptionStatus === 'past_due') {    throw new HttpError(403, 'Your subscription is past due. Please update your payment information.');  }  //...}     Edit page      Previous  Authentication      Next  Cookie Consent Modal            



=== PAGE: https://docs.opensaas.sh/#client-side-authorization ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/cookie-consent ===

 Cookie Consent Modal | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Configuration     Google Analytics    Plausible Analytics    Your Terms / Privacy Policy    Allowing Users to Control Certain Cookies (OPTIONAL)      On this page   Overview    Configuration     Google Analytics    Plausible Analytics    Your Terms / Privacy Policy    Allowing Users to Control Certain Cookies (OPTIONAL)           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Cookie Consent Modal      
Cookie consent banners are annoying, we know. But they are legally required in many countries, so we have to deal with them.
This guide will help you dynamically add or remove cookies from your app via the Cookie Consent modal that comes with this template.
This is needed for non-essential cookies that are not necessary for the basic functionality of your app, such as analytics cookies or marketing cookies.
The Modal can be found at app/src/client/components/cookie-consent/ and contains two main files:

Banner.tsx - the component that displays the banner at the bottom of the page.
Config.ts - the configuration file that contains the cookies/scripts that will be dynamically added.

The Banner.tsx component is imported in app/src/client/App.tsx and is rendered at the bottom of the page, while all the changes to the banner itself are done within the Config.ts file, which we explain below.
Configuration
We decided to use the vanilla-cookieconsent library to handle the cookie consent. We’ve set it up to give you some basic functionality, using mostly the default settings. For a full list of options, you can check the official documentation.
Below, we will guide you through the necessary steps to get the cookie consent modal set up for your app.
Google Analytics
What’s impotant to note for this template is that we are simply using the onAccept callbacks to dynamically add or remove our Google Analytics cookies from the page. In order for it to work correctly with your app, you need to add your Google Analytics ID to your .env.client file.
.env.client REACT_APP_GOOGLE_ANALYTICS_ID=G-1234567890
And that’s it! The cookie consent modal will now dynamically add or remove the Google Analytics cookies based on the user’s choice.
To check if it’s working correctly, you can open the browser’s developer tools and check the cookies tab. You should see the following cookies being added or removed based on the user’s choice:
Terminal window_ga_ga... # Google Analytics cookies.cc_cookie # Cookie Consent cookie. The name of this cookie can be changed in the config file.
Plausible Analytics
If you decide to go with Plausible Analytics, you DO NOT need to ask users for their consent to use cookies because Plausible, as a privacy-first analytics provider, does not use cookies. Instead, It collects website usage data anonymously and in aggregate form only, without any personally identifiable information
By avoiding cookies, Plausible Analytics avoids the need for cookie consent banners.
Your Terms / Privacy Policy
You should also add a link to your terms and privacy policy within consentModal section of config.language:
Config.ts    language: {      default: 'en',      translations: {        en: {          consentModal: {            title: 'We use cookies',            // ...            // TODO: Add your own privacy policy and terms and conditions links below.            footer: `            <a href="<your-url-here>" target="_blank">Privacy Policy</a>            <a href="<your-url-here>" target="_blank">Terms and Conditions</a>                    `,          },        },      },    }
Allowing Users to Control Certain Cookies (OPTIONAL)
If you’ve added more than just Google Analytics cookies to your app, you can allow users to control which cookies they want to accept or reject. For example, if you’ve added marketing cookies, you can add a button to the modal that allows users to reject them, while accepting analytics cookies.

To do that, you can change the preferencesModal.sections property in config.language. Any section that you add to preferencesModal.sections must match a linkedCategory in the config.categories property. Make sure you also add a showPreferencesBtn property to consentModal (highlighted below).
Below is an example of what your config might look like if you want to give users the option to control over multiple cookie preferences:
Config.ts    language: {      default: 'en',      translations: {        en: {          consentModal: {            // ...            showPreferencesBtn: 'Manage Individual preferences', // This button will open the preferences modal below.          },          preferencesModal: {            title: 'Manage cookie preferences',            acceptAllBtn: 'Accept all',            acceptNecessaryBtn: 'Reject all',            savePreferencesBtn: 'Accept current selection',            closeIconLabel: 'Close modal',            serviceCounterLabel: 'Service|Services',            sections: [              {                title: 'Your Privacy Choices',                description: `In this panel you can express some preferences related to the processing of your personal information. You may review and change expressed choices at any time by resurfacing this panel via the provided link. To deny your consent to the specific processing activities described below, switch the toggles to off or use the “Reject all” button and confirm you want to save your choices.`,              },              {                title: 'Strictly Necessary',                description:                  'These cookies are essential for the proper functioning of the website and cannot be disabled.',                linkedCategory: 'necessary',              },              {                title: 'Performance and Analytics',                description:                  'These cookies collect information about how you use our website. All of the data is anonymized and cannot be used to identify you.',                linkedCategory: 'analytics',                cookieTable: {                  caption: 'Cookie table',                  headers: {                    name: 'Cookie',                    domain: 'Domain',                    desc: 'Description',                  },                  body: [                    {                      name: '_ga',                      domain: location.hostname,                      desc: 'Description 1',                    },                    {                      name: '_gid',                      domain: location.hostname,                      desc: 'Description 2',                    },                  ],                },              },              {                title: 'YouTube',                description: 'This service is used to display video content on the website.',                linkedCategory: 'youtube',                cookieTable: {                  // ...                }              },              {                title: 'More information',                description:                  'For any queries in relation to my policy on cookies and your choices, please <a href="#contact-page">contact us</a>',              },            ],          },        },      },    }
For more information on how to do that, check the official documentation.     Edit page      Previous  Authorization      Next  Deploying            



=== PAGE: https://docs.opensaas.sh/#configuration ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/deploying ===

 Deploying | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Deploying your App     Steps for Deploying    Prerequisites    Deploying to Fly.io    Deploying Manually / to Other Providers    Adding Server Redirect URL’s to Social Auth    Setting up your Production Stripe Webhook    Setting up your Production Lemon Squeezy Webhook      Deploying your Blog    On this page   Overview    Deploying your App     Steps for Deploying    Prerequisites    Deploying to Fly.io    Deploying Manually / to Other Providers    Adding Server Redirect URL’s to Social Auth    Setting up your Production Stripe Webhook    Setting up your Production Lemon Squeezy Webhook      Deploying your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Deploying      Because this SaaS app is a React/NodeJS/Postgres app built on top of Wasp, Open SaaS can take advantage of Wasp’s easy, one-command deploy to Fly.io or manual deploy to any provider of your choice.
The simplest and quickest option is to take advantage of Wasp’s one-command deploy to Fly.io.
Or if you prefer to deploy to a different provider, or your frontend and backend separately, you can follow the Deploying Manually section below.
Deploying your App
Steps for Deploying
These are the steps necessary for you to deploy your app. We recommend you follow these steps in order.

 Get your production API keys and environment variables
 Deploy your app easily to Fly.io or manually to any provider.
 Add the correct redirect URL’s to your social auth credentials
 Set up your [production webhooks for either Stripe or Lemon Squeezy
 Set your production environment variables on your deployed apps
 (Optional) Deploy your blog

Each of these steps is covered in more detail below.
Prerequisites
Make sure you’ve got all your API keys and environment variables set up before you deploy.
Env Vars
Payment Processor Vars
In the Payments Processor integration guide, you set up your API keys using test keys and test product ids. You’ll need to get the live/production versions of those keys. To get these, repeat the instructions in the Integration Guide without being in test mode. Add the new keys to your deployed environment secrets.
Other Vars
Many of your other environment variables will probably be the same as in development, but you should double-check that they are set correctly for production.
Here are a list of all of them (some of which you may not be using, e.g. Analytics, Social Auth) in case you need to check:
General Vars

 DATABASE_URL
 JWT_SECRET
 WASP_WEB_CLIENT_URL
 WASP_SERVER_URL

Open AI API Key

 OPENAI_API_KEY

Sendgrid API Key

 SENDGRID_API_KEY

Social Auth Vars

 GOOGLE_CLIENT_ID
 GOOGLE_CLIENT_SECRET
 GITHUB_CLIENT_ID
 GITHUB_CLIENT_SECRET

Analytics Vars

 REACT_APP_PLAUSIBLE_ANALYTICS_ID (for client-side)
 PLAUSIBLE_API_KEY
 PLAUSIBLE_SITE_ID
 PLAUSIBLE_BASE_URL
 REACT_APP_GOOGLE_ANALYTICS_ID (for client-side)
 GOOGLE_ANALYTICS_CLIENT_EMAIL
 GOOGLE_ANALYTICS_PROPERTY_ID
 GOOGLE_ANALYTICS_PRIVATE_KEY
(Make sure you convert the private key within the JSON file to base64 first with echo -n "PRIVATE_KEY" | base64. See the Analytics docs for more info)

AWS S3 Vars

 AWS_S3_IAM_ACCESS_KEY
 AWS_S3_IAM_SECRET_KEY
 AWS_S3_FILES_BUCKET
 AWS_S3_REGION

Deploying to Fly.io
Fly.io is a platform for running your apps globally. It’s a great choice for deploying your SaaS app because it’s free to get started, can host your entire full-stack app in one place, scales well, and has one-command deploy integration with Wasp.
Wasp provides the handy wasp deploy command to deploy your entire full-stack app (DB, server, and client) in one command.
To learn how, please follow the detailed guide for deploying to Fly via the Wasp CLI from the Wasp documentation. We suggest you follow this guide carefully to get your app deployed.
Setting Environment VariablesRemember, because we’ve set certain client-side env variables, make sure to pass them to the wasp deploy commands so that they can be included in the build:Terminal windowREACT_APP_CLIENT_ENV_VAR_1=<...> REACT_APP_CLIENT_ENV_VAR_2=<...> wasp deployThe wasp deploy command will also take care of setting the following server-side environment variables for you so you don’t have to:
DATABASE_URL
PORT
JWT_SECRET
WASP_WEB_CLIENT_URL
WASP_SERVER_URL
For setting the remaining server-side environment variables, please refer to the Deploying with the Wasp CLI Guide.
Deploying Manually / to Other Providers
If you prefer to deploy manually, your frontend and backend separately, or just prefer using your favorite provider you can follow Wasp’s Manual Deployment Guide.
Client-side Environment VariablesRemember to always set additional client-side environment variables, such as REACT_APP_STRIPE_CUSTOMER_PORTAL by appending them to the build command, e.g.Terminal windowREACT_APP_CLIENT_ENV_VAR_1=<...> npm run build
Adding Server Redirect URL’s to Social Auth
After deploying your server, you need to add the correct redirect URIs to the credential settings. For this, refer to the following guides from the Wasp Docs:

Google Auth
Github Auth

Setting up your Production Stripe Webhook
Now you need to set up your stripe webhook for production use. Below are some important steps and considerations you should take as you prepare to deploy your app to production.
Stripe API Versions
When you create your Stripe account, Stripe will automatically assign you to their latest API version at that time. This API version is important because it determines the structure of the responses Stripe sends to your webhook, as well as the structure it expects of the requests you make toward the Stripe API.
Because this template was built with a specific version of the Stripe API in mind, it could be that your Stripe account is set to a different API version.
NotestripeClient.tsexport const stripe = new Stripe(process.env.STRIPE_API_KEY!, {  apiVersion: 'YYYY-MM-DD', // e.g. 2023-08-16});When you specify a specific API version in your Stripe client, the requests you send to Stripe from your server, along with their responses, will match that API version. On the other hand, Stripe will send all other events to your webhook that didn’t originate as a request sent from your server, like those made after a user completes a payment on checkout, using the default API version of the API.This is why it’s important to make sure your Stripe client version also matches the API version in your Stripe account, and to thoroughly test any changes you make to your Stripe client before deploying to production.
To make sure your app is consistent with your Stripe account, here are some steps you can follow:

You can find your default API version in the Stripe dashboard under the Developers section.
Check that the API version in your /src/payment/stripe/stripeClient.ts file matches the default API version in your dashboard:

stripeClient.tsexport const stripe = new Stripe(process.env.STRIPE_KEY!, {  apiVersion: 'YYYY-MM-DD', // e.g. 2023-08-16});

If they don’t match, you can upgrade/downgrade your Stripe NPM package in package.json to match the API version in your dashboard:


If your default version on the Stripe dashboard is also the latest version of the API, you can simply upgrade your Stripe NPM package to the latest version.
If your default version on the Stripe dashboard is not the latest version, and you don’t want to upgrade to the latest version, because e.g. you have other projects that depend on the current version, you can find and install the Stripe NPM package version that matches your default API version by following these steps:

Find and note the date of your default API version in the developer dashboard.
Go to the Stripe NPM package page and hover over Published date column until you find the package release that matches your version. For example, here we find the NPM version that matches the default API version of 2023-08-16 in our dashboard, which is 13.x.x.



Install the correct version of the Stripe NPM package by running, :

Terminal window  npm install stripe@x.x.x # e.g. npm install stripe@13.11.0



Test your app thoroughly to make sure that the changes you made to your Stripe client are working as expected before deploying to production.

Creating Your Production Webhook

go to https://dashboard.stripe.com/webhooks
click on + add endpoint
enter your endpoint url, which will be the url of your deployed server + /payments-webhook, e.g. https://open-saas-wasp-sh-server.fly.dev/payments-webhook



select the events you want to listen to. These should be the same events you’re consuming in your webhook. For example, if you haven’t added any additional events to the webhook and are using the defaults that came with this template, then you’ll need to add:
- account.updated
- checkout.session.completed
- customer.subscription.deleted
- customer.subscription.updated
- invoice.paid



after that, go to the webhook you just created and reveal the new signing secret.
add this secret to your deployed server’s STRIPE_WEBHOOK_SECRET= environment variable. If you’ve deployed to Fly.io, you can do that easily with the following command:

Terminal windowwasp deploy fly cmd --context server secrets set STRIPE_WEBHOOK_SECRET=whsec_...
Setting up your Production Lemon Squeezy Webhook
To set up your Lemon Squeezy webhook, you’ll need the URL of you newly deployed server + /payments-webhook, e.g. https://open-saas-wasp-sh-server.fly.dev/payments-webhook.
With the webhook url ready, go to your Lemon Squeezy Webhooks Dashboard:

click the + button.
add the webhook forwarding url to the Callback URL section.
give your webhook a signing secret (a long, random string).
add this signing secret to your server’s production environment variables under LEMONSQUEEZY_WEBHOOK_SECRET=
make sure to select at least the following updates to be sent:

order_created
subscription_created
subscription_updated
subscription_cancelled


click save

Deploying your Blog
Deploying your Astro Starlight blog is a bit different than deploying your SaaS app. As an example, we will show you how to deploy your blog for free to Netlify. You will need a Netlify account and Netlify CLI installed to follow these instructions.
Make sure you are logged in with Netlify CLI.

You can check if you are logged in with netlify status,
you can log in with netlify login.

Position yourself in the blog directory and run the following command:
Terminal windownpm run build
This will build your blog into the blog/dist directory. Now you can deploy your blog to Netlify with the following command:
Terminal windownetlify deploy
Select the dist directory as the deploy path.
Finally, if the deployment looks good, you can deploy your blog to production with the following command:
Terminal windownetlify deploy --prod     Edit page      Previous  Cookie Consent Modal      Next  Email Sending            



=== PAGE: https://docs.opensaas.sh/#deploying-your-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/email-sending ===

 Email Sending | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender    On this page   Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Email Sending      This guide explains how to use the integrated email sender and how you can integrate your own account in this template.
Sending Emails
The Dummy Email Provider (for Local Dev Only)
By default we’ve set up the email sender to use the Dummy provider. This is for local development only and no emails will actually be sent out!
To obtain an email verification token/link, you must check the server logs on initial sign up. You can click this link to verify your email and continue with the sign up process.
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: Dummy,    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },
Note that your app will not build if using the Dummy provider and you must switch to a production-ready provider in order to do so.
Using a Production-Ready Email Provider (e.g. SendGrid)
To change your email provider to a production-ready one, such as SendGrid, you’ll want to configure your emailSender like so:
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: SendGrid,    defaultFrom: {      name: "Open SaaS App",      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!      email: "me@example.com"    },  },
This means that you can send emails from your app using the send function from the email modul provided by Wasp:
src/server/webhooks.tsimport { emailSender } from "wasp/server/email";
//...
  if (subscription.cancel_at_period_end) {    await emailSender.send({      to: customer.email,      subject: 'We hate to see you go :(',      text: 'We hate to see you go. Here is a sweet offer...',      html: 'We hate to see you go. Here is a sweet offer...',    });  }
In the example above, you can see that we’re sending an email to the customer when we receive a cancel subscription event within the Stripe webhook.
This is a powerful feature and super simple to use.
Integrate your email sender
To set up your email sender, you first need an account with one of the supported email providers.
      SendGrid     Mailgun      
Register at SendGrid.com and then get your API KEYS.
Copy yours to the .env.server file under the SENDGRID_API_KEY variable.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: SendGrid,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your SendGrid account to send emails with!  },  
Go to Mailgun and create an account.
Go to API Keys and create a new API key.
Copy the API key and add it to your .env.server file under the MAILGUN_API_KEY= variable.
Go to Domains and create a new domain.
Copy the domain and add it to your .env.server file as MAILGUN_DOMAIN=.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: Mailgun,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your Mailgun account to send emails with!  },  
If you want more detailed info, or would like to use SMTP, check out the Wasp docs.     Edit page      Previous  Deploying      Next  File Uploading            



=== PAGE: https://docs.opensaas.sh/#sending-emails ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/file-uploading ===

 File Uploading | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Using AWS S3     How presigned URLs work    Create an AWS Account    Create an AWS S3 Bucket    Change the CORS settings    Get your AWS S3 credentials    Using and Customizing File Uploads with S3 in your App      Using Multer to upload files to your server     Wasp version 0.12 & higher      On this page   Overview    Using AWS S3     How presigned URLs work    Create an AWS Account    Create an AWS S3 Bucket    Change the CORS settings    Get your AWS S3 credentials    Using and Customizing File Uploads with S3 in your App      Using Multer to upload files to your server     Wasp version 0.12 & higher           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   File Uploading      This guide will show you how to set up file uploading in your SaaS app.
There are two options we recommend:

Using AWS S3 with presigned URLS for secure file storage
Using Multer middleware to upload files to your own server

We recommend using AWS S3 as it’s a scalable, secure option, that can handle a large amount of storage.
If you’re just looking to upload small files and don’t expect your app to grow to a large scale, you can use Multer to upload files to your app’s server.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Using AWS S3
How presigned URLs work
Presigned URLs are URLs that have been signed with your AWS credentials and can be used to upload files to your S3 bucket. They are time-limited and can be generated on the server and sent to the client to upload files directly to S3.
The process of generating a presigned URL is as follows:

The client sends a request to the server to upload a file
The server generates a presigned URL using its AWS credentials
The server sends the presigned URL to the client
The client uses the presigned URL to upload the file directly to S3 before the URL expires

We use this method to upload files to S3 because it is more secure than uploading files directly from the client to S3. It also allows us to keep our AWS credentials private and not expose them to the client.
To use presigned URLs, we’ll need to set up an S3 bucket and get our AWS credentials.
Create an AWS Account
Before you begin, you’ll need to create an AWS account. AWS accounts are free to create and are split up into:

Root account
IAM users

You’ll need to first create a root account, and then an IAM user for your SaaS app before you can start uploading files to S3.
To do so, follow the steps in this external guide: Creating IAM users and S3 buckets in AWS
Create an AWS S3 Bucket
Once you are logged in with your IAM user, you’ll need to create an S3 bucket to store your files.

Navigate to the S3 service in the AWS console



Click on the Create bucket button



Fill in the bucket name and region
Leave all the settings as default and click Create bucket


Change the CORS settings
Now we need to change some permissions on the bucket to allow for file uploads from your app.

Click on the bucket you just created



Click on the Permissions tab



Scroll down to the Cross-origin resource sharing (CORS) section and click Edit



Paste the following CORS configuration and click Save changes:

[    {        "AllowedHeaders": [            "*"        ],        "AllowedMethods": [            "PUT",            "GET"        ],        "AllowedOrigins": [            "*"        ],        "ExposeHeaders": []    }]
Get your AWS S3 credentials
Now that you have your S3 bucket set up, you’ll need to get your S3 credentials to use in your app.

Click on your username in the top right corner of the AWS console and select Security Credentials



Scroll down to the Access keys section
Click on Create Access Key
Select the Application running on an AWS service option and create the access key



Copy the Access key ID and Secret access key and paste them in your src/app/.env.server file:

Terminal window  AWS_S3_IAM_ACCESS_KEY=ACK...  AWS_S3_IAM_SECRET_KEY=t+33a...  AWS_S3_FILES_BUCKET=your-bucket-name  AWS_S3_REGION=your-region // (e.g. us-west-2)
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Using and Customizing File Uploads with S3 in your App
With your S3 bucket set up and your AWS credentials in place, you can now start uploading files in your app using presigned URLs by navigating to localhost:3000/file-upload and uploading a file.
To begin customizing file uploads, is important to know where everything lives in your app. Here’s a quick overview:

main.wasp:

The File entity can be found here. Here you can modify the fields to suit your needs.


src/file-upload/FileUploadPage.tsx:

The FileUploadPage component is where the file upload form lives. It also allows you to download the file from S3 by calling the getDownloadFileSignedURL based on that files key in the app DB.


src/file-upload/operations.ts:

The createFile action lives here and calls the getUploadFileSignedURLFromS3 within it using your AWS credentials before passing it to the client. This function stores the files in the S3 bucket within folders named after the user’s ID, so that each user’s files are stored separately.
The getAllFilesByUser fetches all File information uploaded by the user. Note that the files do not exist in the app database, but rather the file data, its name and its key, which is used to fetch the file from S3.
The getDownloadFileSignedURL query fetches the presigned URL for a file to be downloaded from S3 using the file’s key stored in the app’s database.



Using Multer to upload files to your server
If you’re looking to upload files to the app server, you can use the Multer middleware to handle file uploads. This will allow you to store files on your server and is a good option if you need a quick and dirty, free solution for simple file uploads.
Below are GitHub Gists that show you how to set up file uploads using Multer in your app:
Wasp version 0.12 & higher
     Edit page      Previous  Email Sending      Next  Payments Integration            



=== PAGE: https://docs.opensaas.sh/#using-aws-s3 ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/payments-integration ===

 Payments Integration | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Important First Steps    Stripe     Get your test Stripe API Keys    Create Test Products    Create a Test Customer    Set up the Customer Portal    Install the Stripe CLI    Testing Webhooks via the Stripe CLI    Testing Checkout and Payments via the Client      Lemon Squeezy     Get your test Lemon Squeezy API Keys    Get your Lemon Squeezy Store ID    Create Test Products    Create and Use the Lemon Squeezy Webhook in Local Development      Deploying    On this page   Overview    Important First Steps    Stripe     Get your test Stripe API Keys    Create Test Products    Create a Test Customer    Set up the Customer Portal    Install the Stripe CLI    Testing Webhooks via the Stripe CLI    Testing Checkout and Payments via the Client      Lemon Squeezy     Get your test Lemon Squeezy API Keys    Get your Lemon Squeezy Store ID    Create Test Products    Create and Use the Lemon Squeezy Webhook in Local Development      Deploying         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Payments Integration      This guide will show you how to set up Payments for testing and local development with the following payment processors:

Stripe
Lemon Squeezy

Which should I choose?Stripe is the industry standard, is more configurable, and has cheaper fees.
Lemon Squeezy acts a Merchant of Record. This means they take care of paying taxes in multiple countries for you, but charge higher fees per transaction.
Important First Steps
First, go to /src/payment/paymentProcessor.ts and choose which payment processor you’d like to use, e.g. Stripe or Lemon Squeezy:
src/payment/paymentProcessor.tsimport { stripePaymentProcessor } from './stripe/paymentProcessor';import { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';//...
export const paymentProcessor: PaymentProcessor = stripePaymentProcessor;// or...export const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;
At this point, you can delete:

the unused payment processor code within the /src/payment/<unused-provider> directory,
any unused environment variables from .env.server (they will be prefixed with the name of the provider your are not using):

e.g. STRIPE_API_KEY, STRIPE_CUSTOMER_PORTAL_URL, LEMONSQUEEZY_API_KEY, LEMONSQUEEZY_WEBHOOK_SECRET


Make sure to also uninstall the unused dependencies:

npm uninstall @lemonsqueezy/lemonsqueezy.js
or
npm uninstall stripe


Remove any unused fields from the User model in the schema.prisma file if they exist:

e.g. lemonSqueezyCustomerPortalUrl



Now your code is ready to go with your preferred payment processor and it’s time to configure your payment processor’s API keys, products, and other settings.
Stripe
First, you’ll need to create a Stripe account. You can do that here.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Get your test Stripe API Keys
Once you’ve created your account, you’ll need to get your test API keys. You can do that by navigating to https://dashboard.stripe.com/test/apikeys or by going to the Stripe Dashboard and clicking on the Developers.


Click on the Reveal test key token button and copy the Secret key.
Paste it in your .env.server file under STRIPE_API_KEY=

Create Test Products
To create a test product, go to the test products url https://dashboard.stripe.com/test/products, or after navigating to your dashboard, click the test mode toggle.


Click on the Add a product button and fill in the relevant information for your product.
Make sure you select Software as a service (SaaS) as the product type.
For Subscription products, make sure you select Recurring as the billing type.
For One-time payment products, make sure you select One-time as the billing type.
If you intend to let your users switch between two subscription plans, e.g. upgrade from hobby to pro, you’ll need to create two separate products and with their own price IDs. The ability for users to swich plans can then be configured later in the Customer Portal.
If you want to add different price tiers for the same product (e.g. monthly and yearly), click the Add another price button at the buttom.



After you save the product, you’ll be directed to the product page.
Copy the price IDs and paste them in the .env.server file

We’ve set you up with two example subscription product environment variables, PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID= and PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID=.
As well as a one-time payment product/credits-based environment variable, PAYMENTS_CREDITS_10_PLAN_ID=.


Note that if you change the names of the price IDs, you’ll need to update your server code to match these names as well

Create a Test Customer
To create a test customer, go to the test customers url https://dashboard.stripe.com/test/customers.

Click on the Add a customer button and fill in the relevant information for your test customer.

NoteWhen filling in the test customer email address, use an address you have access to and will use when logging into your SaaS app. This is important because the email address is used to identify the customer when creating a subscription and allows you to manage your test user’s payments/subscriptions via the test customer portal
Set up the Customer Portal
Go to https://dashboard.stripe.com/test/settings/billing/portal in the Stripe Dashboard and activate and copy the Customer portal link. Paste it in your .env.server file:
.env.serverSTRIPE_CUSTOMER_PORTAL_URL=<your-test-customer-portal-link>
If you’d like to give users the ability to switch between different plans, e.g. upgrade from a hobby to a pro subscription, go down to the Subscriptions dropdown and select customers can switch plans.

Then select the products you’d like them to be able to switch between.
Now, after your users have paid, they can click on Manage Subscription in the client and will be taken to the customer portal where they can update their current plan.
Install the Stripe CLI
To install the Stripe CLI with homebrew, run the following command in your terminal:
Terminal windowbrew install stripe/stripe-cli/stripe
or for other install scripts or OSes, follow the instructions here.
Now, let’s start the webhook server and get our webhook signing secret.
First, login:
Terminal windowstripe login
Errors running the Stripe CLIIf you’re seeing errors, consider appending sudo to the stripe commands.
See this GitHuh issue for more details.
Terminal windowstripe listen --forward-to localhost:3001/payments-webhook
You should see a message like this:
Terminal window> Ready! You are using Stripe API Version [2023-08-16]. Your webhook signing secret is whsec_8a... (^C to quit)
copy this secret to your .env.server file under STRIPE_WEBHOOK_SECRET=.
Testing Webhooks via the Stripe CLI

In a new terminal window, run the following command:

Terminal windowstripe login

start the Stripe CLI webhook forwarding on port 3001 where your Node server is running.

Terminal windowstripe listen --forward-to localhost:3001/payments-webhook
Webhook URLIn older versions of this template, the webhook URL was http://localhost:3001/stripe-webhook.
If you’re using an older version, make sure to use the url that matches the webhook url in your main.wasp file payemnts API definition.
remember to copy and paste the outputted webhook signing secret (whsec_...) into your .env.server file under STRIPE_WEBHOOK_SECRET= if you haven’t already.

In another terminal window, trigger a test event:

Terminal windowstripe trigger payment_intent.succeeded
The results of the event firing will be visible in the initial terminal window. You should see messages like this:
Terminal window...2023-11-21 09:31:09   --> invoice.paid [evt_1OEpMPILOQf67J5TjrUgRpk4]2023-11-21 09:31:09  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMPILOQf67J5TjrUgRpk4]2023-11-21 09:31:10   --> invoice.payment_succeeded [evt_1OEpMPILOQf67J5T3MFBr1bq]2023-11-21 09:31:10  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMPILOQf67J5T3MFBr1bq]2023-11-21 09:31:10   --> checkout.session.completed [evt_1OEpMQILOQf67J5ThTZ0999r]2023-11-21 09:31:11  <--  [200] POST http://localhost:3001/payments-webhook [evt_1OEpMQILOQf67J5ThTZ0999r]
For more info on testing webhooks, check out https://stripe.com/docs/webhooks#test-webhook
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Testing Checkout and Payments via the Client
Make sure the Stripe CLI is running by following the steps above.
You can then test the payment flow via the client by doing the following:


Click on a Buy button on the for any of the products on the homepage. You should be redirected to the checkout page.


Fill in the form with the following test credit card number 4242 4242 4242 4242 and any future date for the expiration date and any 3 digits for the CVC.


Click on the “Pay” button. You should be redirected to the success page.


Check your terminal window for status messages and logs


You can also check your Database via the DB Studio to see if the user entity has been updated by running:


Terminal windowwasp db studio


Navigate to localhost:5555 and click on the users table. You should see the subscriptionStatus is active for the user that just made the purchase.

NoteIf you want to learn more about how a user’s payment status, subscription status, and subscription tier affect a user’s priveledges within the app, check out the User Overview reference.
Lemon Squeezy
First, make sure you’ve defined your payment processor in src/payment/paymentProcessor.ts, as described in the important first steps.
Next, you’ll need to create a Lemon Squeezy account in test mode. You can do that here.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Get your test Lemon Squeezy API Keys
Once you’ve created your account, you’ll need to get your test API keys. You can do that by navigating to https://app.lemonsqueezy.com/settings/api and creating a new API key.

Click on the + button
Give your API key a name
Copy and paste it in your .env.server file under LEMONSQUEEZY_API_KEY=

Get your Lemon Squeezy Store ID

To get your store ID, go to the Lemon Squeezy Dashboard and copy the Store ID from the top right corner.
Copy and paste this number in your .env.server file under LEMONSQUEEZY_STORE_ID=
Create Test Products
To create a test product, go to the test products url https://app.lemonsqueezy.com/products.

Click on the + New Product button and fill in the relevant information for your product.
Fill in the general information.
For pricing, select the type of product you’d like to create, e.g. Subscription for a recurring monthly payment product or  Single Payment for credits-based product.



Make sure you select Software as a service (SaaS) as the Tax category type.
If you want to add different price tiers for Subscription products, click on add variant under the variants tab. Here you can input the name of the variant (e.g. “Hobby”, “Pro”), and that variant’s price.



For a product with no variants, on the product page, click the ... menu button and select Copy variant ID



For a product with variants, on the product page, click on the product, go to the variants tab and select Copy ID for each variant.



Paste these IDs in the .env.server file:

We’ve set you up with two example subscription product environment variables, PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID= and PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID=.
As well as a one-time payment product/credits-based environment variable, PAYMENTS_CREDITS__10_PLAN_ID=.


Note that if you change the names of the these environment variables, you’ll need to update your app code to match these names as well.

Create and Use the Lemon Squeezy Webhook in Local Development
Lemon Squeezy sends messages/updates to your Wasp app via its webhook, e.g. when a payment is successful. For that to work during development, we need to expose our locally running (via wasp start) Wasp app and make it available online, specifically the server part of it. Since the Wasp server runs on port 3001, you should run ngrok on port 3001, which will provide you with a public URL that you can use to configure Lemon Squeezy with.
To do this, first make sure you have installed ngrok.
Once installed, and with your wasp app running, run:
Terminal windowngrok http 3001

Ngrok will output a forwarding address for you. Copy and paste this address and add /payments-webhook to the end (this URL path has been configured for you already in main.wasp under the api paymentsWebhook definition). It should look something like this:
Callback URLhttps://89e5-2003-c7-153c-72a5-f837.ngrok-free.app/payments-webhook
Now go to your Lemon Squeezy Webhooks Dashboard:

click the + button.
add the newly created webhook forwarding url to the Callback URL section.
give your webhook a signing secret (a long, random string).
copy and paste this same signing secret into your .env.server file under LEMONSQUEEZY_WEBHOOK_SECRET=
make sure to select at least the following updates to be sent:

order_created
subscription_created
subscription_updated
subscription_cancelled


click save

You’re now ready to start consuming Lemon Squeezy webhook events in local development.
Deploying
Once you deploy your app, you can follow the same steps, just make sure that you are no longer in test mode within the Stripe or Lemon Squeezy Dashboards. After you’ve repeated the steps in live mode, add the new API keys and price/variant IDs to your environment variables in your deployed environment.     Edit page      Previous  File Uploading      Next  SEO            



=== PAGE: https://docs.opensaas.sh/#important-first-steps ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/seo ===

 SEO | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Landing Page Meta Tags    Docs & Blog Meta Tags    A Word on SSR & SEO    On this page   Overview    Landing Page Meta Tags    Docs & Blog Meta Tags    A Word on SSR & SEO         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   SEO      This guides explains how to improve SEO for of your app
Landing Page Meta Tags
Wasp gives you the ability to add meta tags to your landing page HTML via the main.wasp file’s head property:
app SaaSTemplate {  wasp: {    version: "^0.13.0"  },  title: "Open SaaS",  head: [        "<meta property='og:type' content='website' />",        "<meta property='og:url' content='https://opensaas.sh' />",        "<meta property='og:title' content='Open SaaS' />",        "<meta property='og:description' content='Free, open-source SaaS boilerplate starter for React & NodeJS.' />",        "<meta property='og:image' content='https://opensaas.sh/public-banner.webp' />",        //...  ],  //...
Change the above highlighted meta tags to match your app. Wasp will inject these tags into the HTML of your index.html file, which is the Landing Page (app/src/client/landing-page/LandingPage.tsx), in this case.
This means you do not need to rely on a separate app or framework to serve your landing page for SEO purposes.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Docs & Blog Meta Tags
Astro, being a static-site generator, will automatically inject relevant information provided in the blog/astro.config.mjs file, as well as in the frontmatter of .md files into the pages HTML:
---title: 'My First Blog Post'pubDate: 2022-07-01description: 'This is the first post of my new Astro blog.'author: 'Astro Learner'image:    url: 'https://docs.astro.build/assets/full-logo-light.png'    alt: 'The full Astro logo.'tags: ["astro", "blogging", "learning in public"]---
Improving your SEO is as simple as adding these properties to your docs and blog content!
A Word on SSR & SEO
Open SaaS and Wasp do not currently have a SSR option (although it is coming soon!), but that does not mean that Open SaaS apps are at a disadvantage with regards to SEO.
That’s because the meta tags for the landing page (described above), plus the Astro docs/blog provided with Open SaaS are more than enough! Not to mention, Google is also able to crawl websites with JavaScript activated, making SSR unnecessary.
For example, try searching “Open SaaS” on Google and you’ll see this App, which was built with this template, as the first result!
     Edit page      Previous  Payments Integration      Next  Tests            



=== PAGE: https://docs.opensaas.sh/#landing-page-meta-tags ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/tests ===

 Tests | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    The Tests Directory    Using Tests in CI with GitHub Actions    On this page   Overview    The Tests Directory    Using Tests in CI with GitHub Actions         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Tests      This guide will show you how to use the included end-to-end (e2e) tests for your Open SaaS application.
The Tests Directory
In the root of your project, you’ll find an e2e-tests directory which contains the Playwright tests for your Open SaaS application.:
.├── e2e-tests/│   ├── tests/                  # Directory containing the test files│   ├── README.md               # Instructions on how to run the tests│   ├── ci-start-app-and-db.js  # Script to start the app and db for CI│   ├── playwright.config.ts    # Playwright configuration│   ├── package.json│   ├── ...
To run the tests locally, or in a CI pipeline, follow the instructions in the README.md file in the e2e-tests directory.
Using Tests in CI with GitHub Actions
Although the Open SaaS template does not come with an example workflow, you can find one at .github/workflows/e2e-tests.yml of the remote repo.
You can copy and paste the .github/ directory containing the e2e-tests.yml workflow into the root of your own repository to run the tests as part of your CI pipeline.
WASP_VERSIONPlease make sure to update the WASP_VERSION environment variable in the e2e-tests.yml file to match the version of Wasp you are using in your project.
In order for these tests to run correctly on GitHub, you need to provide the environment variables mentioned in the e2e-tests.yml file within your GitHub repository’s “Actions” secrets so that they can be accessed by the tests.     Edit page      Previous  SEO      Next  Admin Dashboard            



=== PAGE: https://docs.opensaas.sh/#the-tests-directory ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/index ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/start/getting-started ===

 Getting Started | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Install Wasp     Pre-requisites    Linux and macOS    Windows    Finalize Installation      Setting up your SaaS app     Cloning the OpenSaaS template    Start your DB    Start your app      What’s next?    On this page   Overview    Install Wasp     Pre-requisites    Linux and macOS    Windows    Finalize Installation      Setting up your SaaS app     Cloning the OpenSaaS template    Start your DB    Start your app      What’s next?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Getting Started      This guide will help you get your new SaaS app up and running.
If you prefer video tutorials, you can watch this walkthrough below which will guide you through most of the setup (installation, authentication, payments, etc.). If you get stuck at any point, you can refer back to these docs for more information.


Install Wasp
Pre-requisites
You must have Node.js (and NPM) installed on your machine and available in PATH to use Wasp.
Your version of Node.js must be >= 18.
To switch easily between Node.js versions, we recommend using nvm.
Installing and using nvmNeed help with nvm?Install nvm via your OS package manager (apt, pacman, homebrew, …) or via the nvm install script.Then, install a version of Node.js that you need:Terminal windownvm install 20Finally, whenever you need to ensure a specific version of Node.js is used, run:Terminal windownvm use 20to set the Node.js version for the current shell session.You can runTerminal windownode -vto check the version of Node.js currently being used in this shell session.Check NVM repo for more details: https://github.com/nvm-sh/nvm.
Linux and macOS
Open your terminal and run:
Terminal windowcurl -sSL https://get.wasp-lang.dev/installer.sh | sh
Bad CPU type in executableAre you getting this error on a Mac (Apple Silicon)?Given that the wasp binary is built for x86 and not for arm64 (Apple Silicon), you’ll need to install Rosetta on your Mac if you are using a Mac with Mx (M1, M2, …). Rosetta is a translation process that enables users to run applications designed for x86 on arm64 (Apple Silicon). To install Rosetta, run the following command in your terminalTerminal windowsoftwareupdate --install-rosettaOnce Rosetta is installed, you should be able to run Wasp without any issues.
Windows
In order to use Wasp on Windows, you need to install WSL2 (Windows Subsystem for Linux) and a Linux distribution of your choice. We recommend using Ubuntu.
You can refer to this article for a step by step guide to using Wasp in the WSL environment. If you need further help, reach out to us on Discord.
Once in WSL2, run the following command in your WSL2 environment:
Terminal windowcurl -sSL https://get.wasp-lang.dev/installer.sh | sh
WSL2 and file system issuesAre you getting file system issues using WSL2?If you are using WSL2, make sure that your Wasp project is not on the Windows file system, but instead on the Linux file system. Otherwise, Wasp won’t be able to detect file changes, due to this issue in WSL2.
Finalize Installation
Run the following command to verify that Wasp was installed correctly:
Terminal windowwasp version
Also be sure to install the Wasp VSCode extension to get the best DX, e.g. syntax highlighting, code scaffolding, autocomplete, etc.
Installing the Wasp VSCode ExtensionYou can install the Wasp VSCode extension by searching for “Wasp” in the Extensions tab in VSCode, or by visiting the 🐝 Wasp VSCode Extension 🧑‍💻 homepage
Setting up your SaaS app
Cloning the OpenSaaS template
From the directory where you’d like to create your new project run:
Terminal windowwasp new
Then select option [3] saas from the list of templates after entering the name of your project.
This will clone a clean copy of the Open SaaS template into a new directory! 🎉
Start your DB
Before you start your app, you need to have a Postgres Database connected and running. With Wasp, that’s super easy!
First, make sure you have Docker installed and running. If not, download and install it here
With Docker running, open a new terminal window/tab and position yourself in the app directory:
Terminal windowcd app
Then run:
Terminal windowwasp start db
This will start and connect your app to a Postgres database for you. No need to do anything else! 🤯 Just make sure to leave this terminal window open in the background while developing. Once you terminate the process, your DB will no longer be available to your app.
Now let’s create our very first database migration, to ensure the database has a correct schema. Open a new terminal tab/window and run the following command:
Terminal windowwasp db migrate-dev
This might take a bit since this is the first time you are running it and it needs to install all the
dependencies for your Wasp project.
In the future, you will also want to run wasp db migrate-dev whenever you make changes to your Prisma schema (Entities),
to apply those schema changes to the database.
Additionally, if you want to see or manage your DB via Prisma’s DB Studio GUI, run:
Terminal windowwasp db studio
Start your app
At this point, you should be positioned in the app/ directory and have the database running in another terminal session.
Next, copy the .env.server.example file to .env.server.
Terminal windowcp .env.server.example .env.server
.env.server is where API keys for services like payments, email sender, and similar go, and this is where you will want to put them in later.
For now, you can leave it as it is (dummy API keys), this will be enough to run the app.
Then run:
Terminal windowwasp start
This will install all the dependencies and start the app (client and server) for you :)!
If the app doesn’t open automatically in your browser, you can open it manually by visiting http://localhost:3000 in your browser.
At this point, you should have:

your database running in one terminal session, likely on port 5432.
your app running in another terminal session, the client likely on port 3000, and the server likely on port 3001.

Run Blog and Docs
This SaaS app comes with a docs and blog section built with the Starlight template on top of the Astro framework. You can use this as a starting point for your own blog and documentation, if necessary.
If you do not need this, you can simply delete the blog folder from the root of the project.
If you want to run the Starlight docs and blog, first navigate to the blog folder:
Terminal windowcd ../blog
Then run:
Terminal windownpm install
Then start the development server:
Terminal windownpm run dev
Check the instructions in the terminal for the link to open the blog, it will typically be https://localhost:4321/.
What’s next?
Awesome! We have our new app ready and we know how to run both it and the blog/docs! Now, in the next section, we’ll give you a quick “guided tour” of the different parts of the app we created and understand how it works.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub     Edit page      Previous  Introduction      Next  Guided Tour            



=== PAGE: https://docs.opensaas.sh/#install-wasp ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/start/guided-tour ===

 Guided Tour | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Getting acquainted with the codebase     App File Structure    The Wasp Config file    Client    Server      Main Features     Auth    Subscription Payments with Stripe or Lemon Squeezy    Analytics and Admin Dashboard      App Customization Walkthrough     General Considerations    Customizations Checklist      What’s next?    On this page   Overview    Getting acquainted with the codebase     App File Structure    The Wasp Config file    Client    Server      Main Features     Auth    Subscription Payments with Stripe or Lemon Squeezy    Analytics and Admin Dashboard      App Customization Walkthrough     General Considerations    Customizations Checklist      What’s next?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Guided Tour      Awesome, you now have your very own SaaS app up and running! But, first, here are some important things you need to know about your app in its current state:

When signing up with a new user, you will get a message to check your email for a verification link. But, in development, these emails are simply written to your terminal. So, to continue with the registration process, check your server logs after sign up!

server logs[ Server ] ╔═══════════════════════╗[ Server ] ║ Dummy email sender ✉️  ║[ Server ] ╚═══════════════════════╝[ Server ] From:    Open SaaS App <me@example.com>[ Server ] To:      vinny@wasp.sh[ Server ] Subject: Verify your email[ Server ] ═════════ Text ═════════[ Server ] Click the link below to verify your email: http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw[ Server ] ═════════ HTML ═════════[ Server ] <p>Click the link below to verify your email</p>[ Server ] <a href="http://localhost:3000/email-verification?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InZpbm55QHdhc3Auc2giLCJleHAiOjE3MTg5NjUyNTB9.PkRGrmuDPuYFXkTprf7QpAye0e_O9a70xbER6LfxGJw">Verify email</a>[ Server ] ════════════════════════

Your app is still missing some key configurations (e.g. API keys for Payment Processors, OpenAI, AWS S3, Auth, Analytics). These services won’t work at the moment, but don’t fear, because we’ve provided detailed guides in these docs to help you set up all the services in this template.
If you want to get a feel for what your SaaS could look like when finished, check out OpenSaaS.sh in your browser. It was built using this template! So make sure to log in, play around with the demo app, make a test payment, and check out the admin dashboard.

In the sections below, we will take a short guide through the codebase and the app’s main features. Then at the end of this tour, we also prepared a checklist of likely changes you will want to make to the app to make it your own.
We’re looking forward to seeing what you build!
Getting acquainted with the codebase
Now that you’ve gotten a first look at the app, let’s dive into the codebase.
At the root of our project, you will see three folders:
Terminal window.├── app├── blog└── e2e-tests
app contains the Wasp project files, which is your full-stack React + NodeJS + Prisma app along with a Wasp config file, main.wasp, which will be explained in more detail below.
blog contains the Astro Starlight template for the blog and documentation section.
e2e-tests contains the end-to-end tests using Playwright, which you can run to test your app’s functionality.
App File Structure
We’ve structured this full-stack app template vertically (by feature). That means that most directories within app/src contain both the React client code and NodeJS server code necessary for implementing its logic.
Let’s check out what’s in the app folder in more detail:
v0.13 and belowIf you are using an older version of the OpenSaaS template with Wasp v0.13.x or below, you may see a slightly different file structure. But don’t worry, the vast majority of the code and features are the same! 😅
Terminal window.├── main.wasp              # Wasp Config file. You define your app structure here.├── .wasp/                 # Output dir for Wasp. DON'T MODIFY THESE FILES!├── public/                # Public assets dir, e.g. www.yourdomain.com/public-banner.webp├── src/                   # Your code goes here.│   ├── admin/             # Admin dashboard related pages and components.│   ├── analytics/         # Logic and background jobs for processing analytics.│   ├── auth/              # All auth-related pages/components and logic.│   ├── client/            # Shared components, hooks, landing page, and other client code (React).│   ├── demo-ai-app/       # Logic for the example AI-powered demo app.│   ├── file-upload/       # Logic for uploading files to S3.│   ├── landing-page       # Landing page related code│   ├── messages           # Logic for app user messages.│   ├── newsletter/        # Logic for scheduled recurring newsletter sending.│   ├── payment/           # Logic for handling payments and webhooks.│   ├── server/            # Scripts, shared server utils, and other server-specific code (NodeJS).│   ├── shared/            # Shared constants and util functions.│   └── user/              # Logic related to users and their accounts.├── .env.server            # Dev environment variables for your server code.├── .env.client            # Dev environment variables for your client code.├── .prettierrc            # Prettier configuration.├── tailwind.config.js     # TailwindCSS configuration.├── package.json├── package-lock.json└── .wasproot
The Wasp Config file
This template at its core is a Wasp project, where Wasp is a full-stack web app framework that let’s you write your app in React, NodeJS, and Prisma and will manage the “boilerplatey” work for you, allowing you to just take care of the fun stuff!
Wasp’s secret sauce is its use of a config file (main.wasp) and compiler which takes your code and outputs the client app, server app and deployment code for you.
In this template, we’ve already defined a number of things in the main.wasp config file, including:

Auth
Routes and Pages
Prisma Database Models
Operations (data read and write functions)
Background Jobs
Email Sending

By defining these things in the config file, Wasp continuously handles the boilerplate necessary with putting all these features together. You just need to focus on the business logic of your app.
Wasp abstracts away some things that you would normally be used to doing during development, so don’t be surprised if you don’t see some of the things you’re used to seeing.
NoteIt’s possible to learn Wasp’s feature set simply through using this template, but if you find yourself unsure how to implement a Wasp-specific feature and/or just want to learn more, a great starting point is the intro tutorial in the Wasp docs which takes ~20 minutes.
Client
The src/client folder contains any additional client-side code that doesn’t belong to a feature:
Terminal window.└── client    ├── components         # Your shared React components.    ├── fonts              # Extra fonts    ├── hooks              # Your shared React hooks.    ├── icons              # Your shared SVG icons.    ├── static             # Assets that you need access to in your code, e.g. import logo from 'static/logo.png'    ├── App.tsx            # Main app component to wrap all child components. Useful for global state, navbars, etc.    ├── cn.ts              # Helper function for dynamic and conditional Tailwind CSS classes.    └── Main.css
Server
The src/server folder contains any additional server-side code that does not belong to a specific feature:
Terminal window└── server    ├── scripts            # Scripts to run via Wasp, e.g. database seeding.    └── utils.ts
Main Features
Auth
This template comes with a fully functional auth flow out of the box. It takes advantages of Wasp’s built-in Auth features, which do the dirty work of rolling your own full-stack auth for you!
main.wasp  auth: {    userEntity: User,    methods: {      email: {        //...      },      google: {},      github: {},      discord: {}    },    onAuthFailedRedirectTo: "/",  },
By defining the auth structure in your main.wasp file, Wasp manages all the necessary code for you, including:

Email verified login with reset password
Social login with Google and/or GitHub
Auth-related database entities for user credentials, sessions, and social logins
Custom-generated AuthUI components for login, signup, and reset password
Auth hooks for fetching user data


We’ve set the template up with Wasp’s email, google, and gitHub methods, which are all battle-tested and suitable for production.
You can get started developing your app with the email method right away!
Dummy Email ProviderNote that the email method relies on an emailSender (configured at app.emailSender in the main.wasp file), a service which sends emails to verify users and reset passwords.For development purposes, Wasp provides a Dummy email sender which Open SaaS comes with as the default. This provider does not actually send any confirmation emails to the specified email address, but instead logs all email verification links/tokens to the console! You can then follow these links to verify the user and continue with the sign-up process.main.wasp  emailSender: {    provider: Dummy, // logs all email verification links/tokens to the server's console    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },
We will explain more about these auth methods, and how to properly integrate them into your app, in the Authentication Guide.
Subscription Payments with Stripe or Lemon Squeezy
No SaaS is complete without payments, specifically subscription payments. That’s why this template comes with a fully functional Stripe or Lemon Squeezy integration.
Let’s take a quick look at how payments are handled in this template.

a user clicks the BUY button and a Checkout session is created on the server
the user is redirected to the Checkout page where they enter their payment info
the user is redirected back to the app and the Checkout session is completed
Stripe / Lemon Squeezy sends a webhook event to the server with the payment info
The app server’s webhook handler handles the event and updates the user’s subscription status

The payment processor you choose (Stripe or Lemon Squeezy) and its related functions can be found at src/payment/paymentProcessor.ts. The Payment Processor object holds the logic for creating checkout sessions, webhooks, etc.
The logic for creating the Checkout session is defined in the src/payment/operation.ts file. Actions are a type of Wasp Operation, specifically your server-side functions that are used to write or update data to the database. Once they’re defined in the main.wasp file, you can easily call them on the client-side:
a) define the action in the main.wasp file
main.waspaction generateCheckoutSession {  fn: import { generateCheckoutSession } from "@src/payment/operations",  entities: [User]}
b) implement the action in the src/payment/operations file
src/server/actions.tsexport const generateCheckoutSession = async (paymentPlanId, context) => {  //... }
c) call the action on the client-side
src/client/app/SubscriptionPage.tsximport { generateCheckoutSession } from "wasp/client/operations";
const handleBuyClick = async (paymentPlanId) => {  const checkoutSession = await generateCheckoutSession(paymentPlanId);};
The webhook handler is defined in the src/payment/webhook.ts file. Unlike Actions and Queries in Wasp which are only to be used internally, we define the webhook handler in the main.wasp file as an API endpoint in order to expose it externally to Stripe
main.waspapi paymentsWebhook {  fn: import { paymentsWebhook } from "@src/payment/webhook",  httpRoute: (POST, "/payments-webhook")  entities: [User],}
Within the webhook handler, we look for specific events that the Payment Processor sends us to let us know which payment was completed and for which user. Then we update the user’s subscription status in the database.
To learn more about configuring the app to handle your products and payments, check out the Payments Integration guide.
Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Analytics and Admin Dashboard
Keeping an eye on your metrics is crucial for any SaaS. That’s why we’ve built an administrator’s dashboard where you can view your app’s stats, user data, and revenue all in one place.

To do that, we’ve leveraged Wasp’s Jobs feature to run a cron job that calculates your daily stats. The app stats, such as page views and sources, can be pulled from either Plausible or Google Analytics. All you have to do is create a project with the analytics provider of your choice and import the respective pre-built helper functions!
main.waspjob dailyStatsJob {  executor: PgBoss,  perform: {    fn: import { calculateDailyStats } from "@src/analytics/stats"  },  schedule: {    cron: "0 * * * *" // runs every hour  },  entities: [User, DailyStats, Logs, PageViewSource]}
For more info on integrating Plausible or Google Analytics, check out the Analytics guide.
App Customization Walkthrough
General Considerations
When you first start your Open SaaS app straight from the template, it will run, but many of the services won’t work because they lack your own API keys. Here are list of services that need your API keys to work properly:

Auth Methods (Google, GitHub)
Stripe or Lemon Squeezy
OpenAI (Chat GPT API)
Email Sending (Sendgrid) — you must set this up if you’re using the email Auth method
Analytics (Plausible or Google Analytics)
File Uploading (AWS S3)

Now would be a good time to decide which features you do and do not need for your app, and remove the ones from the codebase that you don’t need.
For the features you will use, the next section of the documentation, Guides, will walk you through how to set each one up!
Open SaaS is built on WaspRemember, this template is built on the Wasp framework. If, at any time, these docs fail to provide enough information about a certain built-in feature, make sure to check out the Wasp docs!
But before you start setting up the main features, let’s walk through the customizations you will likely want to make to the template to make it your own.
Customizations Checklist
main.wasp Config File

 Change the app name and title:
main.wasp  app YourAppName {    wasp: {      version: "^0.13.2"    },
    title: "Your App Name",
Restart Your AppUpon changing the app name, new, empty development database will be assigned to your app. This means you’ll need to rerun wasp db start, wasp db migrate-dev and wasp start.

 Update meta tags in app.head (even if you don’t have a custom domain yet, put one you would like to have, as this won’t affect development).
 Update app.emailSender.defaultFrom.name with the name of your app/company/whatever you want your users to see in their inbox, if you’re using the emailSender feature and/or email Auth method.
 Remove any features you might not use or need:

 Auth methods - app.auth.methods

 If you’re not using email Auth method, remove the routes/pages RequestPasswordReset, PasswordReset, and EmailVerification


 Email Sending - app.emailSender, job emailChecker
 Plausible analytics - app.head
 File Uploading - entity File, route FileUploadRoute, action createFile, query getAllFilesByUser, getDownloadFileSignedURL


 Rename Entites and their properties, Routes/Pages, & Operations, if you wish.

Customizing the Look / Style of the App

 Update your favicon at public/favicon.ico.
 Update the banner image used when posting links to your site at public/public-banner.webp.

 Update the URL for this banner at og:image and twitter:image in app.head of the main.wasp file.


 Make changes to your landing page, landingPage.tsx.

 Customize the navBar, features, testimonials, and faqs in the contentSections.ts file.
 Change/rename the logo.webp and main hero banner (open-saas-banner.webp) in the static folder.


 If you want to make changes to the global styles of the app, you can do so in tailwind.config.cjs. Be aware that the current custom global styles defined already are mostly used in the app’s Admin Dashboard!

Customizing the Analytics & Admin Dashboard

 If you’re using Plausible, update the app.head with your Plausible domain.
 Update the calculateDailyStats function in src/server/workers/calculateDailyStats.ts to pull the stats from the analytics provider you’ve chosen (Plausible or Google Analytics).
 Change the cron schedule in the dailyStatsJob in the main.wasp file to match how often you want your stats to be calculated.
 Update the AdminDashboard components to display the stats you do/don’t want to see.

.env.server and .env.client Files

 After you’ve followed the Guides in the next section, you’ll need to update the .env.server and .env.client files with your API keys and other environment variables for the services you’ve decided to use.
 Delete any redundant environment variables that you’re not using, from the .env.* files as well as the .env.*.example files.

Other Customizations

 Make a new GitHub Repo for your app.
 Deploy your app to a hosting provider.
 Buy a domain name for your app and get it set up with your hosting provider.
 Read the e2e-tests README and get your end-to-end tests set up.

 Change the tests to suit the changes you’ve made to your app


 Get the CI pipeline set up for your app (you can get started by using the Open SaaS development CI example here)

What’s next?
In the following Guides sections, we’ll walk you through getting those API keys and setting up the finer points of features such as Payments & Webhooks, Auth, Email Sending, Analytics, and more.     Edit page      Previous  Getting Started      Next  Analytics            



=== PAGE: https://docs.opensaas.sh/#getting-acquainted-with-the-codebase ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#app-file-structure ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-wasp-config-file ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#client ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#server ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#main-features ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#auth ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#subscription-payments-with-stripe-or-lemon-squeezy ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#analytics-and-admin-dashboard ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#app-customization-walkthrough ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#general-considerations ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#customizations-checklist ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#whats-next ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#pre-requisites ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#linux-and-macos ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#windows ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#finalize-installation ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#setting-up-your-saas-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#cloning-the-opensaas-template ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#start-your-db ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#start-your-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#using-tests-in-ci-with-github-actions ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#docs--blog-meta-tags ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#a-word-on-ssr--seo ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#stripe ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#get-your-test-stripe-api-keys ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-test-products ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-a-test-customer ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#set-up-the-customer-portal ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#install-the-stripe-cli ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#testing-webhooks-via-the-stripe-cli ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#testing-checkout-and-payments-via-the-client ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#lemon-squeezy ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#get-your-test-lemon-squeezy-api-keys ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#get-your-lemon-squeezy-store-id ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-test-products-1 ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-and-use-the-lemon-squeezy-webhook-in-local-development ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#deploying ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#how-presigned-urls-work ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-an-aws-account ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#create-an-aws-s3-bucket ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#change-the-cors-settings ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#get-your-aws-s3-credentials ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#using-and-customizing-file-uploads-with-s3-in-your-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#using-multer-to-upload-files-to-your-server ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#wasp-version-012--higher ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-dummy-email-provider-for-local-dev-only ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#using-a-production-ready-email-provider-eg-sendgrid ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#integrate-your-email-sender ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#tab-panel-0 ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#tab-panel-1 ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#steps-for-deploying ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#prerequisites ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#deploying-to-flyio ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#deploying-manually--to-other-providers ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#adding-server-redirect-urls-to-social-auth ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#setting-up-your-production-stripe-webhook ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#setting-up-your-production-lemon-squeezy-webhook ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#deploying-your-blog ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#other-vars ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/analytics/#google-analytics ===

 Analytics | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog    On this page   Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Analytics      This guide will show you how to integrate analytics for your app. You can choose between Google Analytics and Plausible.
Google Analytics is free, but uses cookies, so you’ll probably want/need to implement the Cookie Consent Modal when using it.
Plausible is an open-source, privacy-friendly alternative to Google Analytics. You DO NOT have to use the cookie consent modal with Plausible, as it does not use cookies. It’s also easier to use than Google if you use their hosted service, but be aware it is a paid feature. It is completely free if you want to self-host it, although this comes with some additional setup steps.
If you’re looking to add analytics to your blog, you can follow the Adding Analytics to your Blog section at the end of this guide.
Plausible
Hosted Plausible
Sign up for a hosted Plausible account here.
Once you’ve signed up, you’ll be taken to your dashboard. Create your site by adding your domain. Your domain is also your PLAUSIBLE_SITE_ID in your .env.server file. Make sure to add it.
Terminal windowPLAUSIBLE_SITE_ID=<your domain without www>
After adding your domain, you’ll be taken to a page with your Plausible script tag. Copy and paste this script tag into the main.wasp file’s head section.
app OpenSaaS {  wasp: {    version: "^0.13.0"  },  title: "My SaaS App",  head: [        "<your plausible script tag here>",  ],  //...
Go back to your Plausible dashboard, click on your username in the top right, and click on the Settings tab. Scroll down, find your API key and paste it into your .env.server file under the PLAUSIBLE_API_KEY variable.
No CookiesPlausible does not use cookies, so you don’t need to add it to your Cookie Consent Modal, hence the script can be added directly to app.head in your main.wasp file.
Self-hosted Plausible
Plausible, being an open-source project, allows you to self-host your analytics. This is a great option if you want to keep your data private and not pay for the hosted service.
coming soon…
until then, check out the official documentation
Contribute!If you’d like to help us write this guide, click the “Edit page” button at the bottom of this pageAs a completely free, open-source project, we appreciate any help 🙏
Google Analytics
First off, head over to src/analytics/stats.ts and switch out the Plausible Provider for Google Analytics so that your background (cron) job fetches the data from Google Analytics for your Admin Dashboard:
stats.ts//...import { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';
export const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {  //...}
Next, make sure you sign up for Google analytics, then go to your Admin panel in the bottom of the left sidebar and then create a “Property” for your app.
Once you’ve created a new Property, some Installation Instructions will pop up. Select install manually where you should see a string that looks like this:
<your-google-analytics-id> https://www.googletagmanager.com/gtag/js?id=<your-google-analytics-id>
and copy and paste the Google Analytics ID into your .env.client file to get it working with the Cookie Consent Modal provided with this template:
.env.clientREACT_APP_GOOGLE_ANALYTICS_ID=<your-google-analytics-id> # e.g. G-1234567890
noscriptIn the Installation Instructions, Google Tag Manager might also instruct you to paste the noscript code snippet immediately after the opening <body> tag.
You should skip this step because this snippet is activated only if users try to browse your app without JavaScript enabled, which is very rare and Wasp needs JS anyway.
Then, set up the Google Analytics API access by following these steps:


Set up a Google Cloud project: If you haven’t already, start by setting up a project in the Google Cloud Console.


Enable the Google Analytics API for your project: Navigate to the “Library” in the Google Cloud Console and search for the “Google Analytics Data API” (for Google Analytics 4 properties) and enable it.


Create credentials: Now go to the “Credentials” tab within your Google Cloud project, click on + credentials, and create a new service account key. First, give it a name. Then, under “Grant this service account access to project”, choose viewer.


Create Credentials: When you go back to Credentials page, you should see a new service account listed under “Service Accounts”. It will be a long email address to ends with @your-project-id.iam.gserviceaccount.com. Click on the service account name to go to the service account details page.


Under “Keys” in the service account details page, click “Add Key” and choose Create new key.


Select “JSON”, then click “Create” to download your new service account’s JSON key file. Keep this file secure and don’t add it to your git repo – it grants access to your Google Analytics data.




Update your Google Anayltics Settings: Go back to your Google Analytics dashboard, and click on the Admin section in the left sidebar. Under Property Settings > Property > Property Access Management Add the service account email address (the one that ends with @your-project-id.iam.gserviceaccount.com) and give it Viewer permissions.


Encode and add the Credentials: Add the client_email and the private_key from your JSON Key file into your .env.server file. But be careful! Because Google uses a special PEM private key, you need to first convert the key to base64, otherwise you will run into errors parsing the key. To do this, in a terminal window, run the command below and paste the output into your .env.server file under the GOOGLE_ANALYTICS_PRIVATE_KEY variable:
Terminal windowecho -n "-----BEGIN PRIVATE KEY-----\nMI...A++eK\n-----END PRIVATE KEY-----\n" | base64


Add your Google Analytics Property ID: You will find the Property ID in your Google Analytics dashboard in the Admin > Property > Property Settings > Property Details section of your Google Analytics property (not your Google Cloud console). Add this 9-digit number to your .env.server file under the GOOGLE_ANALYTICS_PROPERTY_ID variable.


Adding Analytics to your Blog
To add your analytics script to your Astro Starlight blog, all you need to do is modify the head property in your blog/astro.config.mjs file.
Below is an example of how to add Google Analytics to your blog:
export default defineConfig({  site: 'https://opensaas.sh',  integrations: [    starlightBlog({      // ...    }),    starlight({      //...       head: [        {          tag: 'script',          attrs: {            src: 'https://www.googletagmanager.com/gtag/js?id=<YOUR-GOOGLE-ANALYTICS-ID>',          },        },        {          tag: 'script',          content: `          window.dataLayer = window.dataLayer || [];          function gtag(){dataLayer.push(arguments);}          gtag('js', new Date());
          gtag('config', '<YOUR-GOOGLE-ANALYTICS-ID>');          `,        },      ],     Edit page      Previous  Guided Tour      Next  Authentication            



=== PAGE: https://docs.opensaas.sh/#hosted-plausible ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#self-hosted-plausible ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#google-analytics ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#adding-analytics-to-your-blog ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#plausible-analytics ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#your-terms--privacy-policy ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#allowing-users-to-control-certain-cookies-optional ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/analytics/#plausible ===

 Analytics | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog    On this page   Overview    Plausible     Hosted Plausible    Self-hosted Plausible      Google Analytics    Adding Analytics to your Blog         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Analytics      This guide will show you how to integrate analytics for your app. You can choose between Google Analytics and Plausible.
Google Analytics is free, but uses cookies, so you’ll probably want/need to implement the Cookie Consent Modal when using it.
Plausible is an open-source, privacy-friendly alternative to Google Analytics. You DO NOT have to use the cookie consent modal with Plausible, as it does not use cookies. It’s also easier to use than Google if you use their hosted service, but be aware it is a paid feature. It is completely free if you want to self-host it, although this comes with some additional setup steps.
If you’re looking to add analytics to your blog, you can follow the Adding Analytics to your Blog section at the end of this guide.
Plausible
Hosted Plausible
Sign up for a hosted Plausible account here.
Once you’ve signed up, you’ll be taken to your dashboard. Create your site by adding your domain. Your domain is also your PLAUSIBLE_SITE_ID in your .env.server file. Make sure to add it.
Terminal windowPLAUSIBLE_SITE_ID=<your domain without www>
After adding your domain, you’ll be taken to a page with your Plausible script tag. Copy and paste this script tag into the main.wasp file’s head section.
app OpenSaaS {  wasp: {    version: "^0.13.0"  },  title: "My SaaS App",  head: [        "<your plausible script tag here>",  ],  //...
Go back to your Plausible dashboard, click on your username in the top right, and click on the Settings tab. Scroll down, find your API key and paste it into your .env.server file under the PLAUSIBLE_API_KEY variable.
No CookiesPlausible does not use cookies, so you don’t need to add it to your Cookie Consent Modal, hence the script can be added directly to app.head in your main.wasp file.
Self-hosted Plausible
Plausible, being an open-source project, allows you to self-host your analytics. This is a great option if you want to keep your data private and not pay for the hosted service.
coming soon…
until then, check out the official documentation
Contribute!If you’d like to help us write this guide, click the “Edit page” button at the bottom of this pageAs a completely free, open-source project, we appreciate any help 🙏
Google Analytics
First off, head over to src/analytics/stats.ts and switch out the Plausible Provider for Google Analytics so that your background (cron) job fetches the data from Google Analytics for your Admin Dashboard:
stats.ts//...import { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';
export const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {  //...}
Next, make sure you sign up for Google analytics, then go to your Admin panel in the bottom of the left sidebar and then create a “Property” for your app.
Once you’ve created a new Property, some Installation Instructions will pop up. Select install manually where you should see a string that looks like this:
<your-google-analytics-id> https://www.googletagmanager.com/gtag/js?id=<your-google-analytics-id>
and copy and paste the Google Analytics ID into your .env.client file to get it working with the Cookie Consent Modal provided with this template:
.env.clientREACT_APP_GOOGLE_ANALYTICS_ID=<your-google-analytics-id> # e.g. G-1234567890
noscriptIn the Installation Instructions, Google Tag Manager might also instruct you to paste the noscript code snippet immediately after the opening <body> tag.
You should skip this step because this snippet is activated only if users try to browse your app without JavaScript enabled, which is very rare and Wasp needs JS anyway.
Then, set up the Google Analytics API access by following these steps:


Set up a Google Cloud project: If you haven’t already, start by setting up a project in the Google Cloud Console.


Enable the Google Analytics API for your project: Navigate to the “Library” in the Google Cloud Console and search for the “Google Analytics Data API” (for Google Analytics 4 properties) and enable it.


Create credentials: Now go to the “Credentials” tab within your Google Cloud project, click on + credentials, and create a new service account key. First, give it a name. Then, under “Grant this service account access to project”, choose viewer.


Create Credentials: When you go back to Credentials page, you should see a new service account listed under “Service Accounts”. It will be a long email address to ends with @your-project-id.iam.gserviceaccount.com. Click on the service account name to go to the service account details page.


Under “Keys” in the service account details page, click “Add Key” and choose Create new key.


Select “JSON”, then click “Create” to download your new service account’s JSON key file. Keep this file secure and don’t add it to your git repo – it grants access to your Google Analytics data.




Update your Google Anayltics Settings: Go back to your Google Analytics dashboard, and click on the Admin section in the left sidebar. Under Property Settings > Property > Property Access Management Add the service account email address (the one that ends with @your-project-id.iam.gserviceaccount.com) and give it Viewer permissions.


Encode and add the Credentials: Add the client_email and the private_key from your JSON Key file into your .env.server file. But be careful! Because Google uses a special PEM private key, you need to first convert the key to base64, otherwise you will run into errors parsing the key. To do this, in a terminal window, run the command below and paste the output into your .env.server file under the GOOGLE_ANALYTICS_PRIVATE_KEY variable:
Terminal windowecho -n "-----BEGIN PRIVATE KEY-----\nMI...A++eK\n-----END PRIVATE KEY-----\n" | base64


Add your Google Analytics Property ID: You will find the Property ID in your Google Analytics dashboard in the Admin > Property > Property Settings > Property Details section of your Google Analytics property (not your Google Cloud console). Add this 9-digit number to your .env.server file under the GOOGLE_ANALYTICS_PROPERTY_ID variable.


Adding Analytics to your Blog
To add your analytics script to your Astro Starlight blog, all you need to do is modify the head property in your blog/astro.config.mjs file.
Below is an example of how to add Google Analytics to your blog:
export default defineConfig({  site: 'https://opensaas.sh',  integrations: [    starlightBlog({      // ...    }),    starlight({      //...       head: [        {          tag: 'script',          attrs: {            src: 'https://www.googletagmanager.com/gtag/js?id=<YOUR-GOOGLE-ANALYTICS-ID>',          },        },        {          tag: 'script',          content: `          window.dataLayer = window.dataLayer || [];          function gtag(){dataLayer.push(arguments);}          gtag('js', new Date());
          gtag('config', '<YOUR-GOOGLE-ANALYTICS-ID>');          `,        },      ],     Edit page      Previous  Guided Tour      Next  Authentication            



=== PAGE: https://docs.opensaas.sh/#server-side-authorization ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#google-github--discord-auth ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/guides/email-sending/#integrate-your-email-sender ===

 Email Sending | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender    On this page   Overview    Sending Emails     The Dummy Email Provider (for Local Dev Only)    Using a Production-Ready Email Provider (e.g. SendGrid)      Integrate your email sender         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Email Sending      This guide explains how to use the integrated email sender and how you can integrate your own account in this template.
Sending Emails
The Dummy Email Provider (for Local Dev Only)
By default we’ve set up the email sender to use the Dummy provider. This is for local development only and no emails will actually be sent out!
To obtain an email verification token/link, you must check the server logs on initial sign up. You can click this link to verify your email and continue with the sign up process.
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: Dummy,    defaultFrom: {      name: "Open SaaS App",      email: "me@example.com"    },  },
Note that your app will not build if using the Dummy provider and you must switch to a production-ready provider in order to do so.
Using a Production-Ready Email Provider (e.g. SendGrid)
To change your email provider to a production-ready one, such as SendGrid, you’ll want to configure your emailSender like so:
main.waspapp SaaSTemplate {  // ...  emailSender: {    provider: SendGrid,    defaultFrom: {      name: "Open SaaS App",      // When using SendGrid, you must use the same email address that you configured your account to send out emails with!      email: "me@example.com"    },  },
This means that you can send emails from your app using the send function from the email modul provided by Wasp:
src/server/webhooks.tsimport { emailSender } from "wasp/server/email";
//...
  if (subscription.cancel_at_period_end) {    await emailSender.send({      to: customer.email,      subject: 'We hate to see you go :(',      text: 'We hate to see you go. Here is a sweet offer...',      html: 'We hate to see you go. Here is a sweet offer...',    });  }
In the example above, you can see that we’re sending an email to the customer when we receive a cancel subscription event within the Stripe webhook.
This is a powerful feature and super simple to use.
Integrate your email sender
To set up your email sender, you first need an account with one of the supported email providers.
      SendGrid     Mailgun      
Register at SendGrid.com and then get your API KEYS.
Copy yours to the .env.server file under the SENDGRID_API_KEY variable.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: SendGrid,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your SendGrid account to send emails with!  },  
Go to Mailgun and create an account.
Go to API Keys and create a new API key.
Copy the API key and add it to your .env.server file under the MAILGUN_API_KEY= variable.
Go to Domains and create a new domain.
Copy the domain and add it to your .env.server file as MAILGUN_DOMAIN=.
Make sure to change the defaultFrom email address in the main.wasp file to use the same email address that you configured your account to send out emails with!main.waspemailSender: {  provider: Mailgun,  defaultFrom: {    name: "Open SaaS App",    email: "me@example.com" // <--- same email address you configured your Mailgun account to send emails with!  },  
If you want more detailed info, or would like to use SMTP, check out the Wasp docs.     Edit page      Previous  Deploying      Next  File Uploading            



=== PAGE: https://docs.opensaas.sh/docs/auth/social-auth/google#3-creating-a-google-oauth-app ===

 404 | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                  404 Page not found. Check the URL or try using the search bar.                   



=== PAGE: https://docs.opensaas.sh/#subscription-statuses ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#subscription-plans ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#user-roles ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/general/admin-dashboard/#permissions ===

 Admin Dashboard | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users      On this page   Overview    Permissions    Admin Dashboard Pages     Analytics Dashboard    Users           Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Admin Dashboard      This is a reference on how the Admin dashboard, available at /admin, is set up.

Permissions
The Admin dashboard is only accessible to users with the isAdmin field set to true.
main.waspentity User {=psl  id                        Int             @id @default(autoincrement())  email                     String?         @unique  username                  String?  isAdmin                   Boolean         @default(false)  //...
To give yourself administrator priveledges, make sure you add your email addresses to the ADMIN_EMAILS environment variable in .env.server file before registering/logging in with that email address:
.env.serverADMIN_EMAILS=me@example.com
// or add many admins with a comma-separated list
ADMIN_EMAILS=me@example.com,you@example.com,them@example.com
Or if you’ve already logged in with an email address that you want to give admin priveledges to, you can run the following command in a separate terminal window to update the user’s isAdmin field manually:
Terminal windowwasp db studio


Star our Repo on GitHub! 🌟We’ve packed in a ton of features and love into this SaaS starter, and offer it all to you for free!If you’re finding this template and its guides useful, consider giving us a star on GitHub
Admin Dashboard Pages
Analytics Dashboard
The Admin analytics dashboard is a single place for you to view your most important metrics and perform some admin tasks. At the moment, it pulls data from:

Payments Processor:

total revenue
revenue for each day of the past week


Google or Plausible:

total number of page views (non-unique)
percentage change in page views from the previous day
top sources/referrers with unique visitor count (i.e. how many people came from that source to your app)


Database:

total number of registered users
daily change in number of registered users
total number of paying users
daily change in number of paying users



These metrics are aggregated within the background job dailyStatsJob, which by default is run every hour. You can change the frequency of this job by modifying its cron field:
main.waspjob dailyStatsJob {  executor: PgBoss,  perform: {    fn: import { calculateDailyStats } from "@src/analytics/stats"  },  schedule: {    cron: "0 * * * *" // every hour. useful in production    // cron: "* * * * *" // every minute. useful for debugging  },  entities: [User, DailyStats, Logs, PageViewSource]}
For more info on Wasp’s recurring background jobs, check out the Wasp Jobs docs.
For a guide on how to integrate these services so that you can view your analytics via the dashboard, check out the Payments Integration and Analytics guide of the docs.
Help us improveWe’re always looking to improve the Admin dashboard. If you feel something is missing or could be improved, consider opening an issue or submitting a pull request
Users
The Users page is where you can view all your users and their most important details. You can also search and filter users by:

email address
subscription/payment status
admin status
     Edit page      Previous  Tests      Next  User Overview            



=== PAGE: https://docs.opensaas.sh/#admin-dashboard-pages ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#analytics-dashboard ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#users ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#hey-im-vince ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#what-the-heck-is-coverlettergpt ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#whats-the-tech-stack ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#how-i-marketed-it ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#how-i-monetized-it ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#future-plans ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#final-words--more-resources ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#what-kind-of-hackathon-is-this ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#prizes ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#how-to-participate ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#deadline--results ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#lets-annoy-our-users ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-most-annoying-cookie-consent-banner-ever-hackathon ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-gdpr-quiz ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#windows-of-time ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#find-all-the-cookies ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#fresh-batch-of-cookies ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#cookie-management-application-process ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#grand-prize-winner-gangnam-style-beat ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#and-there-you-have-it ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#why-a-sudden-craze-with-all-these-starters-saas-es-are-not-a-new-thing-at-all ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#with-an-open-source-saas-starter-you-know-exactly-what-youre-getting-into ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#with-a-paid-starter-you-become-a-member-of-an-exclusive-tribe-aka-air-jordans-effect ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#security-in-open-source-everyone-is-a-reviewer ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#with-a-paid-saas-starter-the-bus-factor-is-1-with-open-source-you-get-the-full-community-support ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#open-source-saas-starter--unlimited-updates-closed-source-sometimes ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#with-a-paid-saas-starter-you-might-need-to-buy-a-license-for-every-new-app ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#with-an-open-source-saas-starter-you-can-add-new-features-yourself ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#summary ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-starting-point-open-saas-boilerplate ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#turboreels-tech-stack ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#building-faster-with-open-saas-boilerplate ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#out-of-the-box-stripe-integration ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#the-power-of-open-source ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#getting-first-users ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#ready-to-build-your-saas ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#quick-stats ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#small-wins-are-worth-it ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#build--launch-fast ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#keep-it-simple ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#its-all-about-tradeoffs ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#links--resources ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#final-thoughts ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            



=== PAGE: https://docs.opensaas.sh/#lets-stay-in-touch ===

 Introduction | OpenSaaS.sh     

  Skip to content       OpenSaaS.sh    Docs   Blog       Search  CtrlK      Cancel            GitHub Twitter Discord RSS     Select theme   DarkLightAuto                 Blog        Start Here       Introduction    Getting Started    Guided Tour          Guides       Analytics    Authentication    Authorization    Cookie Consent Modal    Deploying    Email Sending    File Uploading    Payments Integration    SEO    Tests          General       Admin Dashboard    User Overview            GitHub Twitter Discord RSS     Select theme   DarkLightAuto               On this page    Overview    Welcome to your new SaaS App!    What’s inside?    On this page   Overview    Welcome to your new SaaS App!    What’s inside?         Open SaaS is now running on Wasp v0.15! ⚙️If you're running an older version and would like to upgrade, please follow the migration instructions.
   Introduction      Welcome to your new SaaS App!
 
If you are an LLM trying to learn how to develop with this full-stack boilerplate starter, here are all of the links to the
    docs:
  Admin Dashboard  User Overview  Analytics  Authentication  Authorization  Cookie Consent Modal  Deploying  Email Sending  File Uploading  Payments Integration  SEO  Tests  Introduction  Getting Started  Guided Tour  
You’ve decided to build a SaaS app with this template. Great choice! 🎉
This template is:

fully open-source
completely free to use and distribute
comes with a ton of features out of the box
community-driven and constantly improving!

Check it out in action here: OpenSaaS.sh
Check out the Code: Open SaaS GitHub Repo
FREE & OPEN-SOURCE!? 🌟That’s right. Use this template however you like. No strings attached.If you find this template useful, consider giving us a star on GitHub. It helps us to keep bringing you open-source software just like this!
What’s inside?
The template itself is built on top of some very powerful tools and frameworks, including:

🐝 Wasp - a full-stack React, NodeJS, Prisma framework with superpowers
🚀 Astro - Astro’s lightweight “Starlight” template for documentation and blog
💸 Stripe or Lemon Squeezy - for products and payments
📈 Plausible or Google Analytics
🤖 OpenAI - OpenAI API integrated into the app or Replicate (coming soon 👀)
📦 AWS S3 - for file uploads
📧 SendGrid, MailGun, or SMTP - for email sending
💅 TailwindCSS - for styling
🧑‍💼 TailAdmin - admin dashboard & components for TailwindCSS

Because we’re using Wasp as the full-stack framework, we can leverage a lot of its features to build our SaaS in record time, including:

🔐 Full-stack Authentication - Email verified + social Auth in a few lines of code.
⛑ End-to-end Type Safety - Type your backend functions and get inferred types on the front-end automatically, without the need to install or configure any third-party libraries. Oh, and type-safe Links, too!
🤖 Jobs - Run cron jobs in the background or set up queues simply by defining a function in the config file.
🚀 One-command Deploy - Easily deploy via the CLI to Fly.io, or to other providers like Railway and Netlify.

You also get access to Wasp’s diverse, helpful community if you get stuck or need help.

🤝 Wasp Discord

“Work In Progress”We’ve tried to get as many of the core features of a SaaS app into this template as possible, but there still might be some missing features or functionality.We could always use some help tying up loose ends, so consider contributing!
In the next sections, we’ll get our SaaS app started and tour its features. Let’s get started!     Edit page      Next  Getting Started            

